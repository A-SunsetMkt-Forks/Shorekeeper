syntax = "proto3";

package shorekeeper;

enum LogType {
  Log_LogType_SecGetReportData2Flow = 0;
  Log_LogType_SecFBRoundStartFlow = 1;
  Log_LogType_SecFBRoundEndFlow = 2;
  Log_LogType_SecRoleFightFlow_BigWorldStart = 3;
  Log_LogType_SecRoleFightFlow_BigWorldEnd = 4;
  Log_LogType_SecRoleFightFlow_InstStart = 5;
  Log_LogType_SecRoleFightFlow_InstEnd = 6;
  Log_LogType_SecWorldInfoFlow_Start = 7;
  Log_LogType_SecWorldInfoFlow_End = 8;
  Log_LogType_SecWorldStartFlow = 9;
  Log_LogType_SecWorldSEndFlow = 10;
}

// MessageId: 28584 (Notify)
message AceAntiLogNotify {
  LogType AntiCheatingLogType = 197;
  int64 LogId = 212;
  int64 Jpl1 = 29;
  int64 Zpl2 = 130;
  int32 InstId = 28;
  int32 evl1 = 230;
}

message AceAntiSkillData {
  int32 SkillId = 1;
  int32 Level = 2;
}

message AceAntiRoleData {
  int32 RoleId = 1;
  int32 Level = 2;
  int32 Exp = 3;
  int32 Breakthrough = 4;
  repeated AceAntiAttrData AceAntiAttrData = 5;
  repeated AceAntiSkillData AceAntiSkillData = 6;
}

// MessageId: 22653 (Request)
message SecFBRoundStartFlowRequest {
  int64 LogId = 177;
  string CurrentTime = 151;
  AceAntiRoleData WTa = 179;
  AceAntiRoleData KTa = 101;
  AceAntiRoleData DOLLARTa = 107;
  AceAntiRoleData XTa = 174;
}

// MessageId: 15530 (Response)
message SecFBRoundStartFlowResponse {
  int64 LogId = 255;
  ErrorCode ErrorCode = 75;
}

// MessageId: 25968 (Request)
message ReportDataRequest {
  bytes AntiData2 = 29;
}

// MessageId: 26266 (Response)
message ReportDataResponse {
  DErrorResult Error = 206;
}

// MessageId: 27483 (Request)
message SecFBRoundEndFlowRequest {
  int64 LogId = 20;
  string ClientTime = 128;
  int64 ElapsedTime = 33;
  int32 iLa2 = 132;
  int32 rLa1 = 11;
  int32 tvl2 = 224;
  int32 ivl1 = 56;
  int32 oLa2 = 102;
  int64 rvl1 = 178;
  int64 ovl2 = 165;
  int32 nvl1 = 91;
  int32 svl = 229;
  int32 avl1 = 161;
  int32 lvl1 = 22;
  int32 hvl2 = 14;
  int32 ComboMax = 242;
  int32 _vl = 138;
  int32 uvl2 = 83;
  int32 cvl1 = 146;
}

// MessageId: 25560 (Response)
message SecFBRoundEndFlowResponse {
  int64 LogId = 93;
  DErrorResult Error = 125;
}

message kyl2 {
  int32 uLa2 = 1;
  AceAntiRoleData cLa = 2;
  int64 CLa1 = 3;
  int64 ALa = 4;
  int32 RLa2 = 5;
  int32 ULa1 = 6;
  int32 BLa1 = 7;
  int32 bLa2 = 8;
  int32 xLa = 9;
  int32 PLa = 10;
  int32 wLa = 11;
  int32 qLa = 12;
  int32 kLa = 13;
  int32 NLa = 14;
  int32 FLa2 = 15;
  int32 OLa1 = 16;
  int32 GLa = 17;
  repeated Vector dvl2 = 18;
}

// MessageId: 17920 (Request)
message SecRoleFightFlowRequest {
  int64 LogId = 202;
  string ClientTime = 246;
  repeated kyl2 gLa = 153;
  LogType AntiCheatingLogType = 36;
}

// MessageId: 23919 (Response)
message SecRoleFightFlowResponse {
  int64 LogId = 214;
  DErrorResult Error = 203;
}

// MessageId: 24026 (Request)
message SecWorldInfoFlowRequest {
  int64 LogId = 63;
  string ClientTime = 95;
  int32 iLa2 = 218;
  int32 rLa1 = 192;
  int32 tvl2 = 12;
  int32 ivl1 = 45;
  int32 oLa2 = 84;
  int32 rvl1 = 133;
  int32 ovl2 = 103;
  int32 nvl1 = 168;
  int32 svl = 185;
  int32 avl1 = 34;
  int32 lvl1 = 120;
  int32 hvl2 = 176;
  int32 _vl = 236;
  int32 uvl2 = 50;
  int32 cvl1 = 223;
}

// MessageId: 27573 (Response)
message SecWorldInfoFlowResponse {
  int64 LogId = 20;
  DErrorResult Error = 249;
}

// MessageId: 28279 (Request)
message SecWorldStartFlowRequest {
  int64 LogId = 189;
  string ClientTime = 206;
  AceAntiRoleData WTa = 40;
  AceAntiRoleData KTa = 63;
  AceAntiRoleData DOLLARTa = 201;
  AceAntiRoleData XTa = 167;
}

// MessageId: 22467 (Response)
message SecWorldStartFlowResponse {
  int64 LogId = 170;
  DErrorResult Error = 160;
}

// MessageId: 15924 (Request)
message SecWorldSEndFlowRequest {
  int64 LogId = 68;
  string ClientTime = 99;
  int32 ElapsedTime = 165;
  int32 iLa2 = 88;
  int32 rLa1 = 168;
  int32 tvl2 = 119;
  int32 ivl1 = 112;
  int32 oLa2 = 232;
  int64 rvl1 = 13;
  int64 ovl2 = 38;
  int32 nvl1 = 127;
  int32 svl = 26;
  int32 avl1 = 8;
  int32 lvl1 = 224;
  int32 hvl2 = 47;
  int32 _vl = 70;
  int32 uvl2 = 128;
  int32 cvl1 = 252;
  int32 ComboMax = 3;
}

// MessageId: 19888 (Response)
message SecWorldSEndFlowResponse {
  int64 LogId = 118;
  DErrorResult Error = 114;
}

enum MSG_ROUTE_ENUM {
  MSG_ROUTE_ENUM_RouteNone = 0;
  MSG_ROUTE_ENUM_Gateway = 1;
  MSG_ROUTE_ENUM_GameServer = 2;
}

enum EMsgFunction {
  EMsgFunction_FunctionNone = 0;
  EMsgFunction_BattleInfo = 1;
}

enum ErrorCode {
  ErrorCode_Success = 0;
  ErrorCode_RequestParamError = 1;
  ErrorCode_InternalError = 2;
  ErrorCode_UnKnownError = 3;
  ErrorCode_ServerNotReady = 4;
  ErrorCode_ServerFullLoad = 5;
  ErrorCode_InvalidUserId = 6;
  ErrorCode_InvalidToken = 7;
  ErrorCode_InvalidRequest = 8;
  ErrorCode_GmFail = 9;
  ErrorCode_GmParamError = 10;
  ErrorCode_GmException = 11;
  ErrorCode_NotEnableGm = 12;
  ErrorCode_NotElegantName = 13;
  ErrorCode_ContainsDirtyWord = 14;
  ErrorCode_DirtyWordServerError = 15;
  ErrorCode_DirtyWordServerReturnEmpty = 16;
  ErrorCode_DirtyWordCheckException = 17;
  ErrorCode_ComponentNotExist = 18;
  ErrorCode_ServerFullLoadGame = 19;
  ErrorCode_ServerFullLoadGate = 20;
  ErrorCode_PlayerLoggingInFlag = 21;
  ErrorCode_GateLoginException = 22;
  ErrorCode_GateLoginSeverSelectErr = 23;
  ErrorCode_GateTokenAccessErr = 24;
  ErrorCode_GateTokenAccessException = 25;
  ErrorCode_GateLoginUserIdErr = 26;
  ErrorCode_GateLoginNodeIdErr = 27;
  ErrorCode_GateLoginCreateCharacterErr = 28;
  ErrorCode_GateCreateCharacterException = 29;
  ErrorCode_GateEnterGameAddressNotFound = 30;
  ErrorCode_GateEnterGameException = 31;
  ErrorCode_GateEnterGameCreatePlayerErr = 32;
  ErrorCode_GateEnterGameAddPlayerErr = 33;
  ErrorCode_GameGateNodeNotFound = 34;
  ErrorCode_GamePlayerAdminExist = 35;
  ErrorCode_GameReloginGateNodeNotFound = 36;
  ErrorCode_GameReloginPlayerNotFound = 37;
  ErrorCode_ServerNotOpen = 38;
  ErrorCode_ServerMaintenance = 39;
  ErrorCode_InvalidLoginType = 40;
  ErrorCode_InvalidGateway = 41;
  ErrorCode_SDKServerError = 42;
  ErrorCode_TokenNotAuthrized = 43;
  ErrorCode_HadBan = 44;
  ErrorCode_NotInUserIdWhiteList = 45;
  ErrorCode_NoHealthyGamesvr = 46;
  ErrorCode_NoHealthyGateway = 47;
  ErrorCode_GarFailed = 48;
  ErrorCode_GarSdkCheckFail = 49;
  ErrorCode_GarNoneUserInfo = 50;
  ErrorCode_GarQueryUserInfoError = 51;
  ErrorCode_GarNoRegion = 52;
  ErrorCode_InternalExceptionCode = 53;
  ErrorCode_DecodeExceptionCode = 54;
  ErrorCode_EncodeExceptionCode = 55;
  ErrorCode_InvalidRequestExceptionCode = 56;
  ErrorCode_MessageOutOfLimitExceptionCode = 57;
  ErrorCode_MessageNoHandler = 58;
  ErrorCode_EncryptionNoCreate = 59;
  ErrorCode_DecryptFail = 60;
  ErrorCode_PlayerNotInTheScene = 61;
  ErrorCode_NonReentrantExceptionCode = 62;
  ErrorCode_PlayerLoggedOut = 63;
  ErrorCode_MsgFunctionClose = 64;
  ErrorCode_SeqNoError = 65;
  ErrorCode_InvalidMessageType = 66;
  ErrorCode_InvalidMessageHeader = 67;
  ErrorCode_InvalidSeqNo = 68;
  ErrorCode_InvalidMessageId = 69;
  ErrorCode_ProtobufDecodeFailed = 70;
  ErrorCode_ErrProtoSeedCheck = 71;
  ErrorCode_MessageCouldNotBeRouted = 72;
  ErrorCode_ClosedRegister = 100000;
  ErrorCode_RegisterOutOfLimit = 100001;
  ErrorCode_HaveNoCharacter = 100002;
  ErrorCode_InvalidCharacterName = 100003;
  ErrorCode_CreateCharacterFailed = 100004;
  ErrorCode_CreateCharacterDuplicateKey = 100005;
  ErrorCode_PlayerAlreadyLogin = 100006;
  ErrorCode_PlayerLoggingIn = 100007;
  ErrorCode_ErrLoginGWReconnecting = 100008;
  ErrorCode_LoginRetry = 100009;
  ErrorCode_QueryPlayerDataFailed = 100010;
  ErrorCode_CheckPlayerDataFailed = 100011;
  ErrorCode_CheckPlayerDataFailedDebug = 100012;
  ErrorCode_LogoutUnknownError = 100013;
  ErrorCode_AccountLoggedInElsewhere = 100014;
  ErrorCode_AccountIsBlocked = 100015;
  ErrorCode_DataOverflow = 100016;
  ErrorCode_AccountBeKick = 100017;
  ErrorCode_AppVersionNotMatch = 100018;
  ErrorCode_LauncherVersionIsTooLow = 100019;
  ErrorCode_ResourceVersionIsTooLow = 100020;
  ErrorCode_CloseConnection = 100021;
  ErrorCode_ErrAcquirePlayerLockFailed = 100022;
  ErrorCode_ErrPlayerLoggingOut = 100023;
  ErrorCode_MessageChecksumFailed = 100024;
  ErrorCode_LoginTimeout = 100025;
  ErrorCode_ErrWeaponDefault = 200000;
  ErrorCode_ErrWeaponLevelLimit = 200001;
  ErrorCode_ErrWeaponBreachLimit = 200002;
  ErrorCode_ErrWeaponConsumeInvalid = 200003;
  ErrorCode_ErrWeaponPkgFull = 200004;
  ErrorCode_ErrRoleNoConfig = 200005;
  ErrorCode_ErrRoleIsActive = 200006;
  ErrorCode_ErrRoleNotActive = 200007;
  ErrorCode_ErrRoleOverNotEnough = 200008;
  ErrorCode_ErrRoleLevelNotEnough = 200009;
  ErrorCode_ErrRoleException = 200010;
  ErrorCode_ErrRoleNotExchange = 200011;
  ErrorCode_ErrRoleResonNotActive = 200012;
  ErrorCode_ErrRoleResonIsActive = 200013;
  ErrorCode_ErrRoleConfigNotRight = 200014;
  ErrorCode_ErrRoleLevelMax = 200015;
  ErrorCode_ErrRolePerResonNotActive = 200016;
  ErrorCode_ErrRoleConditionNotFind = 200017;
  ErrorCode_ErrRoleConditionNoEnough = 200018;
  ErrorCode_ErrRoleInvalidNameLength = 200019;
  ErrorCode_ErrRoleExpInvalid = 200020;
  ErrorCode_ErrRoleActiveNeedNoEnough = 200021;
  ErrorCode_ErrRoleResonMaxLevel = 200022;
  ErrorCode_ErrRoleProtoError = 200023;
  ErrorCode_ErrRoleItemListEmpty = 200024;
  ErrorCode_ErrRoleItemListCountOutRange = 200025;
  ErrorCode_ErrRoleItemExpError = 200026;
  ErrorCode_ErrRolePhantPosError = 200027;
  ErrorCode_ErrRolePhantSameError = 200028;
  ErrorCode_ErrRolePhantEmptyError = 200029;
  ErrorCode_ErrRoleItemListNoEnough = 200030;
  ErrorCode_ErrRoleGetSkillByIdFailed = 200031;
  ErrorCode_ErrRoleFavorLevelNotEnough = 200032;
  ErrorCode_ErrRolSkillNodeType = 200033;
  ErrorCode_ErrRolSkillNodeTypeActive = 200034;
  ErrorCode_ErrRolSkillNodeTypeUlock = 200035;
  ErrorCode_ErrRolSkillPointsNotEnough = 200036;
  ErrorCode_ErrTrialRoleExist = 200037;
  ErrorCode_ErrTrialRoleNotExist = 200038;
  ErrorCode_ErrTrialRoleRegionDataExist = 200039;
  ErrorCode_ErrTrialRoleBtObjDataExist = 200040;
  ErrorCode_ErrTrialRoleRegionExist = 200041;
  ErrorCode_ErrTrialRoleRegionNotExist = 200042;
  ErrorCode_ErrLoadEquipDefault = 200043;
  ErrorCode_ErrLoadEquipInvalidPos = 200044;
  ErrorCode_ErrLoadEquipInvalidRole = 200045;
  ErrorCode_ErrLoadEquipRoleConfig = 200046;
  ErrorCode_ErrPhantomIdNotExist = 200047;
  ErrorCode_ErrPhantomNotExist = 200048;
  ErrorCode_ErrPhantomLvupMax = 200049;
  ErrorCode_ErrPhantomLvupMismatchItemId = 200050;
  ErrorCode_ErrPhantomLvupNoItem = 200051;
  ErrorCode_ErrPhantomLvupLimit = 200052;
  ErrorCode_ErrPhantomItemType = 200053;
  ErrorCode_ErrPhantomInvalidPos = 200054;
  ErrorCode_ErrPhantomConfigNotFound = 200055;
  ErrorCode_ErrPhantomItemNotExist = 200056;
  ErrorCode_ErrPhantomPropNotExist = 200057;
  ErrorCode_ErrPhantomQaulityNotExist = 200058;
  ErrorCode_ErrPhantomBreachNotExist = 200059;
  ErrorCode_ErrPhantomLevelNotEnough = 200060;
  ErrorCode_ErrPhantomExpItemNotExist = 200061;
  ErrorCode_ErrPhantomSubPropRandomErr = 200062;
  ErrorCode_ErrPhantomSubPropNotEnough = 200063;
  ErrorCode_ErrPhantomSubPropGenDupicate = 200064;
  ErrorCode_ErrPhantomSubStrengthenPropNotExist = 200065;
  ErrorCode_ErrPhantomLevelConfigNotExist = 200066;
  ErrorCode_ErrPhantomLevelUpConsumeItemNotEnough = 200067;
  ErrorCode_ErrPhantomLevelUpMaterialLock = 200068;
  ErrorCode_ErrPhantomLevelUpConsumeItemErr = 200069;
  ErrorCode_ErrPhantomLevelUpRepeatItem = 200070;
  ErrorCode_ErrPhantomMainPropNotExist = 200071;
  ErrorCode_ErrPhantomGrowthNotExist = 200072;
  ErrorCode_ErrPhantomBreachItemCount = 200073;
  ErrorCode_ErrPhantomBreachRepeatItem = 200074;
  ErrorCode_ErrPhantomDecomposeEquiped = 200075;
  ErrorCode_ErrPhantomDecomposeFail = 200076;
  ErrorCode_ErrPhantomBreachBindItem = 200077;
  ErrorCode_ErrPhantomBreachErrItem = 200078;
  ErrorCode_ErrPhantomRecommendNoData = 200079;
  ErrorCode_ErrPhantomCannotTakeOff = 200080;
  ErrorCode_ErrPhantomCannotReplace = 200081;
  ErrorCode_ErrVisionSkillFavoriteTypeLimit = 200082;
  ErrorCode_ErrVisionSkillFavoriteCountLimit = 200083;
  ErrorCode_ErrVisionSkillCfgNotFound = 200084;
  ErrorCode_ErrVisionSkillNotFound = 200085;
  ErrorCode_ErrVisionSkillLevelUpMax = 200086;
  ErrorCode_ErrVisionSkillLevelUpLimit = 200087;
  ErrorCode_ErrVisionSkillSlotNotFound = 200088;
  ErrorCode_ErrVisionSkillEquipTypeLimit = 200089;
  ErrorCode_ErrVisionSkillUnEquipLimit = 200090;
  ErrorCode_ErrVisionSkillGemCfgNotFound = 200091;
  ErrorCode_ErrVisionSkillEquipLimit = 200092;
  ErrorCode_ErrVisionSkillGemLimit = 200093;
  ErrorCode_ErrVisionSkillOperFail = 200094;
  ErrorCode_ErrVisionSkillSlotEquipLimit = 200095;
  ErrorCode_ErrExploreSkillRouletteRepeat = 200096;
  ErrorCode_ErrItemCfgNotFound = 200097;
  ErrorCode_ErrItemNotFound = 200098;
  ErrorCode_ErrItemNotEnough = 200099;
  ErrorCode_ErrItemDecomposeLimit = 200100;
  ErrorCode_ErrItemUseLevelLimit = 200101;
  ErrorCode_ErrItemLockLimit = 200102;
  ErrorCode_ErrItemInvalidParams = 200103;
  ErrorCode_ErrItemDecomposeFail = 200104;
  ErrorCode_ErrItemUseFail = 200105;
  ErrorCode_ErrExchangeRewardCostItemNotEnough = 200106;
  ErrorCode_ExchangeRewardSuccess = 200107;
  ErrorCode_ErrPkgCapacityNotEnough = 200108;
  ErrorCode_ErrGiftOptionalCount = 200109;
  ErrorCode_ErrGiftOptionalNotExists = 200110;
  ErrorCode_ErrGiftNotExists = 200111;
  ErrorCode_ErrItemCount = 200112;
  ErrorCode_ErrItemIdNotContain = 200113;
  ErrorCode_ErrItemTypeNotContain = 200114;
  ErrorCode_ErrCalabashMaxLevel = 200115;
  ErrorCode_ErrCalabashConfig = 200116;
  ErrorCode_ErrCalabashLevelUp = 200117;
  ErrorCode_ErrCalabashExp = 200118;
  ErrorCode_ErrCalabashDevelopNoReward = 200119;
  ErrorCode_ErrCalabashMonsterNotFound = 200120;
  ErrorCode_PropRewardTips = 200121;
  ErrorCode_ErrEnergyMaxCharge = 200122;
  ErrorCode_ErrStateCanotTeleport = 200123;
  ErrorCode_ErrStateCannotEnterInst = 200124;
  ErrorCode_ErrStateCannotOnline = 200125;
  ErrorCode_ErrStateCannotChangeFormation = 200126;
  ErrorCode_ErrReportPlayerCountLimit = 200127;
  ErrorCode_ErrReportPlayerReasonNotFound = 200128;
  ErrorCode_ErrReportMessageLengthLimit = 200129;
  ErrorCode_ErrCookingToolFixed = 200130;
  ErrorCode_ErrCookingFormulaNotFound = 200131;
  ErrorCode_ErrCookingCount = 200132;
  ErrorCode_ErrCookingProcessNotFound = 200133;
  ErrorCode_ErrCookingLevelNotFound = 200134;
  ErrorCode_ErrCookingLevelLimt = 200135;
  ErrorCode_ErrCookingInteractiveNotFound = 200136;
  ErrorCode_ErrCookingFuncNotOpen = 200137;
  ErrorCode_ErrChallengeNotFound = 200138;
  ErrorCode_ErrChallengeNoTeam = 200139;
  ErrorCode_ErrChallengeTeamLimit = 200140;
  ErrorCode_ErrChallengeTeamMemLimit = 200141;
  ErrorCode_ErrChallengeChangeFormation = 200142;
  ErrorCode_ErrChallengeFunNotOpen = 200143;
  ErrorCode_ErrChallengeSeasonUpdate = 200144;
  ErrorCode_ErrChallengeLockRoleLimit = 200145;
  ErrorCode_ErrChallengeRoleLocked = 200146;
  ErrorCode_ErrChallengeNoRoleAlive = 200147;
  ErrorCode_ErrChallengeFormationEmpty = 200148;
  ErrorCode_ErrCycleChallengeNoRoleAlive = 200149;
  ErrorCode_ErrCycleChallengeFormationEmpty = 200150;
  ErrorCode_ErrInfluenceLocked = 200151;
  ErrorCode_ErrInfluenceRewardNotFound = 200152;
  ErrorCode_ErrInfluenceConfigNotFound = 200153;
  ErrorCode_ErrReputationLimit = 200154;
  ErrorCode_ErrInfluenceRewardFailed = 200155;
  ErrorCode_ErrInfluenceFunNotOpen = 200156;
  ErrorCode_ErrForgeFuncNotOpen = 200157;
  ErrorCode_ErrForgeCountLimit = 200158;
  ErrorCode_ErrForgeLocked = 200159;
  ErrorCode_ErrForgeConfigNotFound = 200160;
  ErrorCode_ErrForgeUnlocked = 200161;
  ErrorCode_ErrSynthesisFuncNotOpen = 200162;
  ErrorCode_ErrSynthesisConfigNotFound = 200163;
  ErrorCode_ErrSynthesisCountLimit = 200164;
  ErrorCode_ErrSynthesisLocked = 200165;
  ErrorCode_ErrSynthesisLevelNotFound = 200166;
  ErrorCode_ErrSynthesisLevelLimit = 200167;
  ErrorCode_ErrSynthesisCannotUnlock = 200168;
  ErrorCode_ErrSynthesisUnlocked = 200169;
  ErrorCode_ErrTrialRoleCannotMatch = 200170;
  ErrorCode_ErrPhantomFormationTeleport = 200171;
  ErrorCode_ErrPhantomFormationEnterInst = 200172;
  ErrorCode_ErrPhantomFormationMultiPlay = 200173;
  ErrorCode_ErrPhantomFormationAdvice = 200174;
  ErrorCode_ErrPhantomFormationChangeFormation = 200175;
  ErrorCode_ErrPhantomFormationRepeat = 200176;
  ErrorCode_ErrPhantomFormationChangeFailed = 200177;
  ErrorCode_ErrRoleChangeRoleCreateFailed = 200178;
  ErrorCode_ErrRoleChangeRoleUpdateCreateFailed = 200179;
  ErrorCode_ErrRoleChangeRoleNotUnlock = 200180;
  ErrorCode_ErrRoleChangeMultiPlay = 200181;
  ErrorCode_ErrRoleChangeInst = 200182;
  ErrorCode_ErrRoleChangeElementFunc = 200183;
  ErrorCode_ErrPhantomFormationCannotJoin = 200184;
  ErrorCode_ErrPhantomFormationHost = 200185;
  ErrorCode_ErrRoleChangeShowAllRole = 200186;
  ErrorCode_ErrInteractBoardEntityNotFound = 200187;
  ErrorCode_ErrInteractBoardRange = 200188;
  ErrorCode_ErrInteractBoardSystemNotFound = 200189;
  ErrorCode_ErrInteractBoardEntityConfig = 200190;
  ErrorCode_ErrInteractEntranceNotFound = 200191;
  ErrorCode_ErrInteractEntranceNotMatch = 200192;
  ErrorCode_ErrItemMaxUseCount = 200193;
  ErrorCode_ErrFuncNotExist = 200194;
  ErrorCode_ErrPhantomChangeInBattle = 200195;
  ErrorCode_ErrItemCanNotDestroy = 200196;
  ErrorCode_ErrPhantomEquipSourceCost = 200197;
  ErrorCode_ErrPhantomEquipTargetCost = 200198;
  ErrorCode_ErrPhantomEquipDuplicate = 200199;
  ErrorCode_ErrPhantomAutoEquipFromOther = 200200;
  ErrorCode_ErrPhantomConsumeItemCount = 200201;
  ErrorCode_ErrPhantomConsumeItemDuplicate = 200202;
  ErrorCode_ErrPhantomConsumeItemIncrDuplicate = 200203;
  ErrorCode_ErrPhantomConsumeItem = 200204;
  ErrorCode_ErrPhantomConsumeNoExp = 200205;
  ErrorCode_ErrPhantomBreachPos = 200206;
  ErrorCode_ErrPhantomBreachSuspend = 200207;
  ErrorCode_ErrPhantomBreachQuality = 200208;
  ErrorCode_ErrPhantomBreachExp = 200209;
  ErrorCode_ErrPhantomBreachConsumeItem = 200210;
  ErrorCode_ErrPhantomBreachNoSuspend = 200211;
  ErrorCode_ErrPhantomSpecialSkillRole = 200212;
  ErrorCode_ErrPhantomNotEquip = 200213;
  ErrorCode_ErrPhantomSpecilSkillPos = 200214;
  ErrorCode_ErrPhantomSubPropPlanConfig = 200215;
  ErrorCode_ErrPhantomMainPropGenFail = 200216;
  ErrorCode_ErrLivenessFuncNotOpen = 200217;
  ErrorCode_ErrLivenessTaskNotFound = 200218;
  ErrorCode_ErrLivenessTaskDataNotFound = 200219;
  ErrorCode_ErrLivenessTaskNotFinish = 200220;
  ErrorCode_ErrLivenessTaskRewarded = 200221;
  ErrorCode_ErrLivenessRewardNotFound = 200222;
  ErrorCode_ErrLivenessGoalNotReach = 200223;
  ErrorCode_ErrLivenessRewardParam = 200224;
  ErrorCode_ErrLivenessTaskRewardParam = 200225;
  ErrorCode_ErrWeaponLevelUpComsumeCount = 200226;
  ErrorCode_ErrWeaponConsumeSelf = 200227;
  ErrorCode_ErrWeaponConsumeItemNotFound = 200228;
  ErrorCode_ErrWeaponConsumeItemIdNotFound = 200229;
  ErrorCode_ErrWeaponLocked = 200230;
  ErrorCode_ErrWeaponConsumeDuplicate = 200231;
  ErrorCode_ErrWeaponEquiped = 200232;
  ErrorCode_ErrWeaponLevelUpItemDuplicate = 200233;
  ErrorCode_ErrWeaponLevelUpNoExp = 200234;
  ErrorCode_ErrWeaponLevelUpLevel = 200235;
  ErrorCode_ErrPhantomMainPropNotMatch = 200236;
  ErrorCode_ErrPhantomSubPropNotMatch = 200237;
  ErrorCode_ErrPhantomEquiped = 200238;
  ErrorCode_ErrAdviceNotInit = 200239;
  ErrorCode_ErrTowerChallengeNotOpen = 200240;
  ErrorCode_ErrTowerNotInChallenge = 200241;
  ErrorCode_ErrTowerConfigNotFound = 200242;
  ErrorCode_ErrTowerChallengeNotInOpenTime = 200243;
  ErrorCode_ErrTowerInChallenge = 200244;
  ErrorCode_ErrTowerFormationCount = 200245;
  ErrorCode_ErrTowerFormationRoleDuplicate = 200246;
  ErrorCode_ErrTowerRoleCost = 200247;
  ErrorCode_ErrTowerDifficultyNotClear = 200248;
  ErrorCode_ErrTowerFloorNotClear = 200249;
  ErrorCode_ErrTowerAreaNotClear = 200250;
  ErrorCode_ErrTowerRecommendNotSettle = 200251;
  ErrorCode_ErrTowerRewardNotFound = 200252;
  ErrorCode_ErrTowerNoReward = 200253;
  ErrorCode_ErrTowerRewarded = 200254;
  ErrorCode_ErrTowerRewardTarget = 200255;
  ErrorCode_ErrTowerSeasonUpdate = 200256;
  ErrorCode_ErrLordGymConfigNotFound = 200257;
  ErrorCode_ErrLordGymNotInPlay = 200258;
  ErrorCode_ErrLordGymLock = 200259;
  ErrorCode_ErrLordGymBtTreeNotFound = 200260;
  ErrorCode_ErrRoleSexFuncNotOpen = 200261;
  ErrorCode_ErrPhantomSubPropLocked = 200262;
  ErrorCode_ErrPhantomIdentifyNoCost = 200263;
  ErrorCode_ErrGiftPackType = 200264;
  ErrorCode_ErrGiftPackUseLimit = 200265;
  ErrorCode_ErrCdKeyNotEnable = 200266;
  ErrorCode_ErrCdKeyRequestCount = 200267;
  ErrorCode_ErrCdKeyRequestErr = 200268;
  ErrorCode_ErrCdKeyRequestDataErr = 200269;
  ErrorCode_ErrCdKeyException = 200270;
  ErrorCode_ErrCdKeyProcessCount = 200271;
  ErrorCode_ErrCdKeyNotFound = 200272;
  ErrorCode_ErrCdKeyBatchNotFound = 200273;
  ErrorCode_ErrCdKeyNotInValidTime = 200274;
  ErrorCode_ErrCdKeyBatchMaxCount = 200275;
  ErrorCode_ErrCdKeyEachPlayerMaxCount = 200276;
  ErrorCode_ErrCdKeyGroupCount = 200277;
  ErrorCode_ErrCdKeyCondition = 200278;
  ErrorCode_ErrCdKeyAddCountFail = 200279;
  ErrorCode_ErrCdKeyLength = 200280;
  ErrorCode_ErrCdKeyCharacter = 200281;
  ErrorCode_ErrGiftPackRandomErr = 200282;
  ErrorCode_ErrReconnectUserWhiteList = 200283;
  ErrorCode_ErrReconnectChannelWhiteList = 200284;
  ErrorCode_ErrReconnectIpInvalid = 200285;
  ErrorCode_ErrReconnectIpWhiteList = 200286;
  ErrorCode_ErrCdKeyExpire = 200287;
  ErrorCode_ErrWeaponResonLevelLimit = 200288;
  ErrorCode_ErrWeaponConfigNotFound = 200289;
  ErrorCode_ErrWeaponResonConfigNotFound = 200290;
  ErrorCode_ErrWeaponResonConsumeItem = 200291;
  ErrorCode_ErrWeaponResonConsumeGold = 200292;
  ErrorCode_ErrDestroyItemDuplicate = 200293;
  ErrorCode_ErrDestroyWeapon = 200294;
  ErrorCode_ErrCannotDestroyItem = 200295;
  ErrorCode_ErrCannotDestroyPhantom = 200296;
  ErrorCode_ErrCannotDestroyWeaponForm = 200297;
  ErrorCode_ErrCannotDestroyItemUnknown = 200298;
  ErrorCode_ErrWeaponConsumeQuality = 200299;
  ErrorCode_ErrPhantomSkinChangeCd = 200300;
  ErrorCode_ErrPhantomSkinUnlock = 200301;
  ErrorCode_ErrPhantomSkinMatch = 200302;
  ErrorCode_ErrLoginGameTainted = 200303;
  ErrorCode_ErrCookLimitCount = 200304;
  ErrorCode_ErrCookLimitTime = 200305;
  ErrorCode_ErrForgeLimitCount = 200306;
  ErrorCode_ErrForgeLimitTime = 200307;
  ErrorCode_ErrSynthesisLimitCount = 200308;
  ErrorCode_ErrSynthesisLimitTime = 200309;
  ErrorCode_ErrLoginIpBan = 200310;
  ErrorCode_ErrLoginDeviceBan = 200311;
  ErrorCode_ErrRoleNameEmpty = 200312;
  ErrorCode_ErrAdviceLength = 200313;
  ErrorCode_ErrPhantomRefiningCount = 200314;
  ErrorCode_ErrPhantomRefiningScore = 200315;
  ErrorCode_ErrPhantomRefiningTotalScore = 200316;
  ErrorCode_ErrPhantomRefiningDeveloped = 200317;
  ErrorCode_ErrPhotoMemoryCollectConfig = 200318;
  ErrorCode_ErrPhotoMemoryFuncNotOpen = 200319;
  ErrorCode_ErrPhotoMemoryCollectLock = 200320;
  ErrorCode_ErrPhotoMemoryCollectRewarded = 200321;
  ErrorCode_ErrRoleCount = 200322;
  ErrorCode_ErrCookFormulaUnlocked = 200323;
  ErrorCode_ErrForgeFormulaUnlocked = 200324;
  ErrorCode_ErrSynthesisFormulaUnlocked = 200325;
  ErrorCode_ErrCookFormulaBuyCount = 200326;
  ErrorCode_ErrForgeFormulaBuyCount = 200327;
  ErrorCode_ErrSynthesisFormulaBuyCount = 200328;
  ErrorCode_ErrCdKeyDailyVerifyCount = 200329;
  ErrorCode_ErrLongShanTaskNotFound = 200330;
  ErrorCode_ErrLongShanActivityClosed = 200331;
  ErrorCode_ErrLongShanTaskNotAccept = 200332;
  ErrorCode_ErrLongShanTaskNotComplete = 200333;
  ErrorCode_ErrLongShanTaskRewarded = 200334;
  ErrorCode_ErrTowerDefenceRewardParamErr = 200335;
  ErrorCode_ErrTowerDefenceInstanceNotFound = 200336;
  ErrorCode_ErrTowerDefenceActivityNotOpen = 200337;
  ErrorCode_ErrTowerDefenceActivityDataNotFound = 200338;
  ErrorCode_ErrTowerDefenceInstDataNotFound = 200339;
  ErrorCode_ErrTowerDefenceInstRewarded = 200340;
  ErrorCode_ErrTowerDefenceInstScoreNotEnough = 200341;
  ErrorCode_ErrTowerDefenceScoreRewarded = 200342;
  ErrorCode_ErrTowerDefenceScoreRewardNotEnough = 200343;
  ErrorCode_ErrTowerDefenceScoreRewardNotFound = 200344;
  ErrorCode_ErrTowerDefenceInstBuffNotEnable = 200345;
  ErrorCode_ErrTowerDefencePhantomDuplicate = 200346;
  ErrorCode_ErrTowerDefencePhantomNotSelect = 200347;
  ErrorCode_ErrorTowerDefenceInstNotOpen = 200348;
  ErrorCode_ErrorTowerDefenceInstCondition = 200349;
  ErrorCode_ErrNameModifyCd = 200350;
  ErrorCode_ErrNameVerifying = 200351;
  ErrorCode_ErrTimePointRewardActivityConfigNotFound = 200352;
  ErrorCode_ErrTimePointRewardActivityNotOpen = 200353;
  ErrorCode_ErrTimePointRewardActivityRewarded = 200354;
  ErrorCode_ErrTimePointRewardActivityTime = 200355;
  ErrorCode_ErrCDKeyVerifying = 200356;
  ErrorCode_ErrorTowerDefenceInstLocked = 200357;
  ErrorCode_ErrTrackMoonEntrustLocked = 200358;
  ErrorCode_ErrTrackMoonRoleLocked = 200359;
  ErrorCode_ErrTrackMoonBuildLocked = 200360;
  ErrorCode_ErrTrackMoonBuildEntity = 200361;
  ErrorCode_ErrCopyUserRequestErr = 200362;
  ErrorCode_ErrCopyUserInserting = 200363;
  ErrorCode_ErrCopyUserErr = 200364;
  ErrorCode_ErrCopyUserDataErr = 200365;
  ErrorCode_ErrCopyUserInsertErr = 200366;
  ErrorCode_ErrCopyUserInsertFailed = 200367;
  ErrorCode_ErrRiskHarvestBuffGroupNotFound = 200368;
  ErrorCode_ErrRiskHarvestActivityClosePlay = 200369;
  ErrorCode_ErrRiskHarvestModeChangeClosePlay = 200370;
  ErrorCode_ErrRiskHarvestLeaveClosePlay = 200371;
  ErrorCode_ErrRiskHarvestInstNotFound = 200372;
  ErrorCode_ErrRiskHarvestActivityNotOpen = 200373;
  ErrorCode_ErrRiskHarvestInstDataNotFound = 200374;
  ErrorCode_ErrRiskHarvestInstRewarded = 200375;
  ErrorCode_ErrRiskHarvestInstNotPass = 200376;
  ErrorCode_ErrRiskHarvestScoreRewardNotFound = 200377;
  ErrorCode_ErrRiskHarvestScoreRewarded = 200378;
  ErrorCode_ErrRiskHarvestScoreNotEnough = 200379;
  ErrorCode_ErrRiskHarvestRoleTrial = 200380;
  ErrorCode_ErrRiskHarvestMatching = 200381;
  ErrorCode_ErrRiskHarvestNotDefaultWorld = 200382;
  ErrorCode_ErrRiskHarvestMultiMode = 200383;
  ErrorCode_ErrRiskHarvestInstLocked = 200384;
  ErrorCode_ErrRiskHarvestInstTeleportEntityNotFound = 200385;
  ErrorCode_ErrRiskHarvestInstOpen = 200386;
  ErrorCode_ErrRiskHarvestPlayOpenFailed = 200387;
  ErrorCode_ErrRiskHarvestPlayDataNotFound = 200388;
  ErrorCode_ErrRiskHarvestBuffNoReward = 200389;
  ErrorCode_ErrRiskHarvestBuffRewarded = 200390;
  ErrorCode_ErrRiskHarvestBuffLocked = 200391;
  ErrorCode_ErrRiskHarvestBuffCountRewardNotFound = 200392;
  ErrorCode_ErrRiskHarvestBuffCountRewarded = 200393;
  ErrorCode_ErrRiskHarvestBuffCountNotEnough = 200394;
  ErrorCode_ErrRiskHarvestInstScoreNotEnough = 200395;
  ErrorCode_ErrItemDisuseLimit = 200396;
  ErrorCode_ErrItemDisuseFunc = 200397;
  ErrorCode_ErrPhantomRefiningMaxCount = 200398;
  ErrorCode_ErrPhantomRefiningDulplicate = 200399;
  ErrorCode_ErrPhantomNotNormal = 200400;
  ErrorCode_ErrGetSelfPsnOnlineId = 200401;
  ErrorCode_ErrGetPsnUserPlayerErr = 200402;
  ErrorCode_ErrTowerDefenceHostLeave = 200403;
  ErrorCode_ErrRiskHarvestNotInInst = 200404;
  ErrorCode_ErrEnterInstTypeErr = 200405;
  ErrorCode_ErrInputSettingCount = 200406;
  ErrorCode_ErrInputSettingDeviceType = 200407;
  ErrorCode_ErrInputSettingActionCount = 200408;
  ErrorCode_ErrInputSettingAxisCount = 200409;
  ErrorCode_ErrInputCombinationActionCount = 200410;
  ErrorCode_ErrInputCombinationAxisCount = 200411;
  ErrorCode_ErrInputSettingActionName = 200412;
  ErrorCode_ErrInputSettingAxisName = 200413;
  ErrorCode_ErrInputCombinationActionName = 200414;
  ErrorCode_ErrInputCombinationAxisName = 200415;
  ErrorCode_ErrInputActionKeyNameLength = 200416;
  ErrorCode_ErrInputActionKeyLength = 200417;
  ErrorCode_ErrInputAxisKeyNameLength = 200418;
  ErrorCode_ErrInputAxisKeyLength = 200419;
  ErrorCode_ErrInputCombinationActionKeyNameLength = 200420;
  ErrorCode_ErrInputCombinationActionKeyLength = 200421;
  ErrorCode_ErrInputCombinationActionKeyListLength = 200422;
  ErrorCode_ErrInputCombinationAxisKeyNameLength = 200423;
  ErrorCode_ErrInputCombinationAxisKeyLength = 200424;
  ErrorCode_ErrInputCombinationAxisKeyListLength = 200425;
  ErrorCode_ErrInputDeviceSubTypeLength = 200426;
  ErrorCode_ErrPSNAccountBlocked = 200427;
  ErrorCode_ErrRoleNameInvalid = 200428;
  ErrorCode_ErrMailBindRewardNotBind = 200429;
  ErrorCode_ErrMailBindRewarded = 200430;
  ErrorCode_ErrInputSettingNull = 200431;
  ErrorCode_ErrMultiInstExchangeCountErr = 200432;
  ErrorCode_ErrMultiInstExchangeFirstPass = 200433;
  ErrorCode_ErrMultiInstExchangeActivity = 200434;
  ErrorCode_ErrMultiInstExchangeFuncNotOpen = 200435;
  ErrorCode_ErrMultiInstExchangeTypeErr = 200436;
  ErrorCode_ErrMultiInstExchangeLevelTypeErr = 200437;
  ErrorCode_ErrMapDefault = 300000;
  ErrorCode_ErrMapMarkNumLimit = 300001;
  ErrorCode_ErrMapNoFogConfig = 300002;
  ErrorCode_ErrMapFogAlreadyUnlock = 300003;
  ErrorCode_ErrFormationEmpty = 300004;
  ErrorCode_ErrFormationUnknown = 300005;
  ErrorCode_ErrFormationDead = 300006;
  ErrorCode_ErrFormationRoleRepeat = 300007;
  ErrorCode_ErrFormationRoleNotActive = 300008;
  ErrorCode_ErrFormationRoleIndexOut = 300009;
  ErrorCode_ErrFormationRoleCountOut = 300010;
  ErrorCode_ErrFightFormationRoleNotExist = 300011;
  ErrorCode_ErrFightFormationRoleIdNotMatch = 300012;
  ErrorCode_ErrFightFormationRoleCountNotMatch = 300013;
  ErrorCode_ErrFightFormationRoleCareerNotMatch = 300014;
  ErrorCode_ErrFightFormationRoleElementNotMatch = 300015;
  ErrorCode_ErrFightFormationCannotTrial = 300016;
  ErrorCode_ErrFightFormationTrialRoleNotMatch = 300017;
  ErrorCode_ErrFormationOverSize = 300018;
  ErrorCode_ErrSwitchRoleIsDead = 300019;
  ErrorCode_ErrUpdateFormationCurRoleIsDead = 300020;
  ErrorCode_ErrUpdateFormationRoleIdsIsNull = 300021;
  ErrorCode_ErrFormationIdOutOfRange = 300022;
  ErrorCode_ErrCanNotCancelCurFormation = 300023;
  ErrorCode_ErrCurRoleNotInFormationRoleIds = 300024;
  ErrorCode_ErrUpateFormationNotInSingleWorld = 300025;
  ErrorCode_ErrSwitchRoleTypeSignleWorld = 300026;
  ErrorCode_ErrSwitchRoleTypeMultiWorld = 300027;
  ErrorCode_ErrSwitchRoleTypeFbInstance = 300028;
  ErrorCode_ErrSwitchRoleTypeUndefine = 300029;
  ErrorCode_ErrSingWorldCanNotUpdateFightRoles = 300030;
  ErrorCode_ErrUpdateFightRolesIsNull = 300031;
  ErrorCode_ErrUpdateFightRolesCurIdNotExist = 300032;
  ErrorCode_ErrInStroyCharacterCanNotSwitchRole = 300033;
  ErrorCode_ErrSwitchRoleNotInFightRoles = 300034;
  ErrorCode_ErrCanNotSwitchRepeat = 300035;
  ErrorCode_ErrSwitchRoleEntityIdNotExist = 300036;
  ErrorCode_ErrSwitchRoleEntityNotExist = 300037;
  ErrorCode_ErrSitchRoleEntityIsDead = 300038;
  ErrorCode_ErrorTeamOperaFail = 300039;
  ErrorCode_ErrorPlayerAlreadyHaveTeam = 300040;
  ErrorCode_ErrorTeamInviteContentInvalid = 300041;
  ErrorCode_ErrorPlayerInBanTime = 300042;
  ErrorCode_ErrorPlayerInInviteCd = 300043;
  ErrorCode_ErrorPlayerAlreadyInTeam = 300044;
  ErrorCode_ErrorKickOutPermissionNotEnough = 300045;
  ErrorCode_ErrorTeamIsFull = 300046;
  ErrorCode_ErrorTeamServiceNotReady = 300047;
  ErrorCode_ErrorTeamPlayerJoinRepeat = 300048;
  ErrorCode_ErrorPlayerNotInTeam = 300049;
  ErrorCode_ErrorInvitePlayerNotExist = 300050;
  ErrorCode_ErrorKickPlayerNotInTeam = 300051;
  ErrorCode_ErrorDismissPermissionNotEnough = 300052;
  ErrorCode_ErrorTeamRoleIdNotActive = 300053;
  ErrorCode_ErrorTeamRoleIdRepeat = 300054;
  ErrorCode_ErrorJoinOtherWorldOtherNotExist = 300055;
  ErrorCode_ErrorJoinOtherWorldOtherNotInScene = 300056;
  ErrorCode_ErrorJoinOtherWorldSceneNotExist = 300057;
  ErrorCode_ErrorTeamNotExist = 300058;
  ErrorCode_ErrRewardCfgNotFound = 300059;
  ErrorCode_ErrTeleportIdNotExist = 300060;
  ErrorCode_ErrTeleportIdNotActivate = 300061;
  ErrorCode_ErrTeleportCreatureIdNotExist = 300062;
  ErrorCode_ErrTeleportIdAlreadyActivate = 300063;
  ErrorCode_ErrTeleportGmGetPlayerFailed = 300064;
  ErrorCode_ErrTeleportGmGetCreatureGenCfgFailed = 300065;
  ErrorCode_ErrTgmNotExitst = 300066;
  ErrorCode_ErrTgmNotPlayer = 300067;
  ErrorCode_ErrTgmNotGenCfg = 300068;
  ErrorCode_ErrTgmInsId = 300069;
  ErrorCode_ErrTeleportEntityNotExist = 300070;
  ErrorCode_ErrTeleportComponentNotExist = 300071;
  ErrorCode_ErrTeleportComponentNotMatch = 300072;
  ErrorCode_ErrAreaEnterRepeated = 300073;
  ErrorCode_ErrAreaIdNotExist = 300074;
  ErrorCode_ErrAreaIdNoNeedRecord = 300075;
  ErrorCode_ErrPlayerIsNotDead = 300076;
  ErrorCode_ErrPlayerCanNotRevive = 300077;
  ErrorCode_ErrPlayerReviveCountReachMax = 300078;
  ErrorCode_ErrPlayerReviveDelayNotReach = 300079;
  ErrorCode_ErrAutoReviveNotRequest = 300080;
  ErrorCode_ErrReviveRegionExisted = 300081;
  ErrorCode_ErrReviveRegionNotExisted = 300082;
  ErrorCode_ErrReviveRegionConfigNotExist = 300083;
  ErrorCode_ErrCanNotUseItemRevive = 300084;
  ErrorCode_ErrIsMatching = 300085;
  ErrorCode_ErrNotInMatcing = 300086;
  ErrorCode_ErrMatchPoolNotExist = 300087;
  ErrorCode_ErrNotFindMatchResult = 300088;
  ErrorCode_ErrConfirmResultRepeat = 300089;
  ErrorCode_ErrAlreadyHaveFbTeam = 300090;
  ErrorCode_ErrFbTeamNotExist = 300091;
  ErrorCode_ErrPlayerNotInFbTeam = 300092;
  ErrorCode_ErrHostCanNotReady = 300093;
  ErrorCode_ErrChangeReadyRepeat = 300094;
  ErrorCode_ErrFbTeamHaveSameRole = 300095;
  ErrorCode_ErrReadyStateCanNotChangeRole = 300096;
  ErrorCode_ErrChangeSameRole = 300097;
  ErrorCode_ErrNotHaveKickPermission = 300098;
  ErrorCode_ErrBeKickNotInFbTeam = 300099;
  ErrorCode_ErrNotHaveFightPermission = 300100;
  ErrorCode_ErrFbTeamNotAllReady = 300101;
  ErrorCode_ErrFbInstIdNotExist = 300102;
  ErrorCode_ErrFbMatchRoleNotMatch = 300103;
  ErrorCode_ErrSingleInstCanNotMatch = 300104;
  ErrorCode_ErrWaitOtherEnterSceneForbidMatch = 300105;
  ErrorCode_ErrIsEnteringOtherSceneForbidMatch = 300106;
  ErrorCode_InstPlayBtObjNotFound = 300107;
  ErrorCode_InstPlayNotSuccess = 300108;
  ErrorCode_InstPlayAlreadyGetReward = 300109;
  ErrorCode_InstPlayExchangeRewardFail = 300110;
  ErrorCode_InstPlaySetterRepeat = 300111;
  ErrorCode_InstEntranceNotUnlock = 300112;
  ErrorCode_InstEntranceNotOpen = 300113;
  ErrorCode_EnterInstLevelNotEnough = 300114;
  ErrorCode_EnterInstWorldLevelNotEnough = 300115;
  ErrorCode_EnterInstQuestNotEnough = 300116;
  ErrorCode_ErrForbidEnterInstInMatch = 300117;
  ErrorCode_ErrForbidEnterInstInEnteringOtherWorld = 300118;
  ErrorCode_ErrForbidEnterInstInWaitingOtherEnterWorld = 300119;
  ErrorCode_ErrEnterInstTypeNotMatch = 300120;
  ErrorCode_ErrNotHaveGetRewardCount = 300121;
  ErrorCode_ErrInMatching = 300122;
  ErrorCode_ErrNotInMatching = 300123;
  ErrorCode_ErrNotFindValidMatchServer = 300124;
  ErrorCode_ErrNotFindMatchServerPrx = 300125;
  ErrorCode_ErrNotHaveMatchTeamInfo = 300126;
  ErrorCode_ErrAlreadyConfirmMatchResult = 300127;
  ErrorCode_ErrMatchTeamNotInReadyState = 300128;
  ErrorCode_ErrMatchRoleNotActive = 300129;
  ErrorCode_ErrMatchReadyRepeat = 300130;
  ErrorCode_ErrMatchPlayerNotReady = 300131;
  ErrorCode_ErrMatchNotHostCanNotKick = 300132;
  ErrorCode_ErrMatchNotHostCanNotSetMatching = 300133;
  ErrorCode_ErrSetMatchFlagRepeat = 300134;
  ErrorCode_ErrPlayerNotInMatchTeam = 300135;
  ErrorCode_ErrGetMatchPoolFail = 300136;
  ErrorCode_ErrPlayerInMatchPool = 300137;
  ErrorCode_ErrPlayerNotInMatchPool = 300138;
  ErrorCode_ErrPlayerInMatchTeamCanNotCancel = 300139;
  ErrorCode_ErrPlayerIsConfirmResult = 300140;
  ErrorCode_ErrNotFindMatchTeam = 300141;
  ErrorCode_ErrPlayerIsReadyCanNotChangeRole = 300142;
  ErrorCode_ErrNotHostCanNotSetMultRoles = 300143;
  ErrorCode_ErrCanNotSetRepeatRole = 300144;
  ErrorCode_ErrPlayerNotReadyCanNotCancel = 300145;
  ErrorCode_ErrRoleRepeatCanNotReady = 300146;
  ErrorCode_ErrBeKickNotInMatchTeam = 300147;
  ErrorCode_ErrNotHostCanNotKick = 300148;
  ErrorCode_ErrNotHostCanNotSetTeamState = 300149;
  ErrorCode_ErrTeamMatchingCanNotStartInst = 300150;
  ErrorCode_ErrMatchTeamHavePlayerNotReady = 300151;
  ErrorCode_ErrNotHostCanNotEnterInst = 300152;
  ErrorCode_ErrMatchTeamIsNotEnterInstState = 300153;
  ErrorCode_ErrMatchInstIdNotExist = 300154;
  ErrorCode_ErrSingleInstanceCanNotMatch = 300155;
  ErrorCode_ErrOnlineStateCanNotMatch = 300156;
  ErrorCode_ErrTeamHaveSameRoleCanNotBegin = 300157;
  ErrorCode_ErrNotJoinChatChannel = 300158;
  ErrorCode_ErrChatChannelNotFound = 300159;
  ErrorCode_ErrChatChannelTypeNotMatch = 300160;
  ErrorCode_ErrChatContentTooLong = 300161;
  ErrorCode_ErrFightRoleIsAllDied = 300162;
  ErrorCode_ErrLoadingSceneIdNotMatch = 300163;
  ErrorCode_ErrLoadingPlayerNotInScene = 300164;
  ErrorCode_ErrPlayerIsSceneLoadingCanNotBeKick = 300165;
  ErrorCode_ErrTeamPlayerIsSceneLoadingCanNotDissolve = 300166;
  ErrorCode_ErrIsSceneLoadingCanNotDissolve = 300167;
  ErrorCode_ErrSceneLoadingCanNotEnterInst = 300168;
  ErrorCode_ErrActivateResetPointNotEntity = 300169;
  ErrorCode_ErrHostIsLoadingScene = 300170;
  ErrorCode_ErrHostIsLoadingSceneCanNotApply = 300171;
  ErrorCode_ErrIsLoadingSceneCanNotAcceptApply = 300172;
  ErrorCode_ErrNotFindHostWorldScene = 300173;
  ErrorCode_ErrCanNotRepeatCreateNeedSaveScene = 300174;
  ErrorCode_DeadStateCanNotAgreeOherEnter = 300175;
  ErrorCode_HostIsDeadStateCanNotEnter = 300176;
  ErrorCode_ErrSceneIsLoadingCanNotLeave = 300177;
  ErrorCode_ErrInstCanNotReChallenge = 300178;
  ErrorCode_ErrInstMemberNotEnoughCanNotReChallenge = 300179;
  ErrorCode_ErrInstHavePlayerLeaveCanNotReChallenge = 300180;
  ErrorCode_ErrInstHavePlayerNotDeadCanNotReChallenge = 300181;
  ErrorCode_ErrInstNotSettleCanNotReChallenge = 300182;
  ErrorCode_ErrInstCanNotRepetApplyRechallenge = 300183;
  ErrorCode_ErrInstCanNotRepetReceiveRechallenge = 300184;
  ErrorCode_ErrInstOwnerCanIniviteRechallenge = 300185;
  ErrorCode_ErrInstOwnerCanNotReceiveRechallenge = 300186;
  ErrorCode_ErrPlayerIsLogoutCanNotCreateScene = 300187;
  ErrorCode_ErrPlayerIsCreatingScene = 300188;
  ErrorCode_ErrPlayerCreateSceneFail = 300189;
  ErrorCode_ErrBigWorldCanNotReset = 300190;
  ErrorCode_ErrMultiGameModeCanNotReset = 300191;
  ErrorCode_ErrIsEnterSceneApplyingCanNotDoRepeate = 300192;
  ErrorCode_ErrIsQueryLobbyFriendDetailCanNotDoRepeate = 300193;
  ErrorCode_ErrIsQueryLobbyPlayerDetailCanNotDoRepeate = 300194;
  ErrorCode_ErrPlayerIsLoadingCanNotDoTeleport = 300195;
  ErrorCode_ErrPlayerIsTeleportCanNotDoTeleport = 300196;
  ErrorCode_ErrTeleportPositionIllegal = 300197;
  ErrorCode_ErrPlayerIsLoadingCanNotRevive = 300198;
  ErrorCode_ErrPlayerIsTeleportCanNotRevive = 300199;
  ErrorCode_ErrPlayerIsInTeleportCanNotBeKick = 300200;
  ErrorCode_ErrTeamPlayerIsInTeleportCanNotDissolve = 300201;
  ErrorCode_ErrHostIsInTeleportCanNotApply = 300202;
  ErrorCode_ErrIsInTeleportCanNotAcceptApply = 300203;
  ErrorCode_ErrStrNotIllegal = 400000;
  ErrorCode_ErrBasicInfoPhotoUnlocked = 400001;
  ErrorCode_ErrBasicInfoFrameUnlocked = 400002;
  ErrorCode_ErrCanNotGetSelfBasicInfo = 400003;
  ErrorCode_ErrMailNotExist = 400004;
  ErrorCode_ErrMailAlreadyRead = 400005;
  ErrorCode_ErrNoMailCanGet = 400006;
  ErrorCode_ErrMailNoAttachment = 400007;
  ErrorCode_ErrMailAttachmentIsGet = 400008;
  ErrorCode_ErrMailAttachmentNotGet = 400009;
  ErrorCode_ErrMailNotRead = 400010;
  ErrorCode_ErrNoMailCanDelete = 400011;
  ErrorCode_ErrMailItemBagFull = 400012;
  ErrorCode_ErrMailFuncNotOpen = 400013;
  ErrorCode_ErrMailOverSize = 400014;
  ErrorCode_ErrMailTakeLimit = 400015;
  ErrorCode_ErrMailAttachmentItemInvalidCount = 400016;
  ErrorCode_ErrMailAttachmentItemNoConf = 400017;
  ErrorCode_ErrMailNoConf = 400018;
  ErrorCode_ErrShopIdNotExit = 400019;
  ErrorCode_ErrShopInfoExist = 400020;
  ErrorCode_ErrShopTimeLimit = 400021;
  ErrorCode_ErrShopMoneyId = 400022;
  ErrorCode_ErrShopNumLimit = 400023;
  ErrorCode_ErrShopCondLimit = 400024;
  ErrorCode_ErrShopBankNoExit = 400025;
  ErrorCode_ErrShopNoShow = 400026;
  ErrorCode_ErrShopVersion = 400027;
  ErrorCode_ErrShopIlligalParam = 400028;
  ErrorCode_ErrDragonPoolConf = 400029;
  ErrorCode_ErrFullLevel = 400030;
  ErrorCode_ErrItemConf = 400031;
  ErrorCode_ErrNotEnoughItem = 400032;
  ErrorCode_NotMingSuTi = 400033;
  ErrorCode_HadFinishMingSuTi = 400034;
  ErrorCode_MingSuCallEntityFail = 400035;
  ErrorCode_ErrDragonPoolFuncNotOpen = 400036;
  ErrorCode_ErrWorldLevelHadDown = 400037;
  ErrorCode_ErrWorldLevelNotDown = 400038;
  ErrorCode_ErrWorldLevelMin = 400039;
  ErrorCode_ErrWorldLevelCd = 400040;
  ErrorCode_ErrIsBlockedPlayer = 400041;
  ErrorCode_ErrIsNotBlockedPlayer = 400042;
  ErrorCode_ErrBlockListCountMax = 400043;
  ErrorCode_ErrYouAreBlocked = 400044;
  ErrorCode_ErrAlreadyOnFriendList = 400045;
  ErrorCode_ErrNotOnFriendList = 400046;
  ErrorCode_ErrAlreadyOnFriendApplyList = 400047;
  ErrorCode_ErrFriendApplyNotExists = 400048;
  ErrorCode_ErrFriendListCountMax = 400049;
  ErrorCode_ErrInitiatorFriendListCountMax = 400050;
  ErrorCode_ErrReceiverApplyListCountMax = 400051;
  ErrorCode_ErrCanNotFriendApplySendToSelf = 400052;
  ErrorCode_ErrFriendApplySended = 400053;
  ErrorCode_ErrFriendRemarkLengthLimit = 400054;
  ErrorCode_ErrFriendApplyRequestLimit = 400055;
  ErrorCode_ErrFriendRequestEmpty = 400056;
  ErrorCode_ErrFriendRequestOverSize = 400057;
  ErrorCode_ErrPayShopNotExists = 400058;
  ErrorCode_ErrPayShopDisabled = 400059;
  ErrorCode_ErrPayShopGoodsNotExists = 400060;
  ErrorCode_ErrPayShopGoodsDisabled = 400061;
  ErrorCode_ErrPayShopGoodsLocked = 400062;
  ErrorCode_ErrPayShopGoodsOutSellTime = 400063;
  ErrorCode_ErrPayShopGoodsBuyLimit = 400064;
  ErrorCode_ErrPayShopDataChanged = 400065;
  ErrorCode_ErrPayShopIllegalBuyCount = 400066;
  ErrorCode_ErrPayShopIsDirect = 400067;
  ErrorCode_ErrPayShopIsNotDirect = 400068;
  ErrorCode_ErrPayShopTabDisabled = 400069;
  ErrorCode_ErrMonthCardWithoutValidity = 400070;
  ErrorCode_ErrMonthCardUpdateConfNotExist = 400071;
  ErrorCode_ErrMonthCardDaysMax = 400072;
  ErrorCode_ErrMonthCardRewardGot = 400073;
  ErrorCode_ErrMonthCardConfNotExist = 400074;
  ErrorCode_ErrIsNotSpecialItem = 400075;
  ErrorCode_ErrNoEquipSpecialItem = 400076;
  ErrorCode_ErrNoValidBattlePass = 400077;
  ErrorCode_ErrBattlePassRewardNotFound = 400078;
  ErrorCode_ErrBattlePassNotPaid = 400079;
  ErrorCode_ErrBattlePassIsPaid = 400080;
  ErrorCode_ErrBattlePassRewardLocked = 400081;
  ErrorCode_ErrBattlePassRewardTaken = 400082;
  ErrorCode_ErrBattlePassCanNotRepeatActive = 400083;
  ErrorCode_BattlePassNoRecurringReward = 400084;
  ErrorCode_ErrBattlePassIsAdvanced = 400085;
  ErrorCode_ErrBattlePassTaskNotFound = 400086;
  ErrorCode_ErrBattlePassTaskNotFinished = 400087;
  ErrorCode_ErrBattlePassTaskTaken = 400088;
  ErrorCode_ErrBattlePassExpIsFull = 400089;
  ErrorCode_ErrAdviceNotFound = 400090;
  ErrorCode_ErrConjunctionCanNotWord = 400091;
  ErrorCode_ErrAdviceTextNotExists = 400092;
  ErrorCode_ErrAdviceWordNotExists = 400093;
  ErrorCode_ErrAdviceTemplateNotExists = 400094;
  ErrorCode_ErrAdviceCellCalcException = 400095;
  ErrorCode_ErrIsNotAdviceEntity = 400096;
  ErrorCode_ErrAdviceCreateLimit = 400097;
  ErrorCode_ErrAdviceContentCanNotEmpty = 400098;
  ErrorCode_ErrAdviceEntityNotFount = 400099;
  ErrorCode_ErrAdviceVoteLimit = 400100;
  ErrorCode_ErrAdviceIsVoteUp = 400101;
  ErrorCode_ErrAdviceIsVoteDown = 400102;
  ErrorCode_ErrNoAdviceItem = 400103;
  ErrorCode_ErrAdviceCreateNotOpen = 400104;
  ErrorCode_ErrAdviceCanNotCreateByVisitor = 400105;
  ErrorCode_ErrAdviceSetingIsShow = 400106;
  ErrorCode_ErrAdviceSetingIsNoShow = 400107;
  ErrorCode_ErrAdviceUpMaxValue = 400108;
  ErrorCode_ErrAdviceDownMaxValue = 400109;
  ErrorCode_ProtoVersionCheckFail = 400110;
  ErrorCode_ProtoMd5CheckFail = 400111;
  ErrorCode_ConfigVersionCheckFail = 400112;
  ErrorCode_ConfigMd5CheckFail = 400113;
  ErrorCode_ErrInvalidMonthCardDays = 400114;
  ErrorCode_ErrMonthCardExtendedDaysMax = 400115;
  ErrorCode_ErrMobileButtonNoCfg = 400116;
  ErrorCode_ErrMoneyWrongPayCount = 400117;
  ErrorCode_ErrMailTextSenderNotFound = 400118;
  ErrorCode_ErrMailTextTitleNotFound = 400119;
  ErrorCode_ErrMailTextContentNotFound = 400120;
  ErrorCode_ErrAdviceIsNotVoteUp = 400121;
  ErrorCode_ErrParkourChallengeNoConf = 400122;
  ErrorCode_ErrParkourLocationNoConf = 400123;
  ErrorCode_ErrParkourChallengeNotOpen = 400124;
  ErrorCode_ErrParkourChallengeNoData = 400125;
  ErrorCode_ErrParkourChallengeTaken = 400126;
  ErrorCode_ErrParkourChallengeUnderscore = 400127;
  ErrorCode_ErrParkourChallengeScoreNoConf = 400128;
  ErrorCode_ErrParkourTakeFail = 400129;
  ErrorCode_ErrShopIllegalBuyCount = 400130;
  ErrorCode_ErrQuestErrTaskId = 500000;
  ErrorCode_ErrQuestErrStepId = 500001;
  ErrorCode_ErrQuestErrTaskBag = 500002;
  ErrorCode_ErrQuestStepStatusNotCanAccept = 500003;
  ErrorCode_ErrQuestStepStatusNotCanCommit = 500004;
  ErrorCode_ErrQuestStepConf = 500005;
  ErrorCode_ErrQuestStepData = 500006;
  ErrorCode_ErrQuestCanNotAccept = 500007;
  ErrorCode_ErrAreaQuestDelegationBoardRequest = 500008;
  ErrorCode_ErrAreaQuestAreaIdErr = 500009;
  ErrorCode_ErrAreaQuestExpired = 500010;
  ErrorCode_ErrDevoteLevel = 500011;
  ErrorCode_ErrDevoteRewardReceived = 500012;
  ErrorCode_ErrQuestNotFinish = 500013;
  ErrorCode_ErrDevoteId = 500014;
  ErrorCode_ErrAreaQuestLimit = 500015;
  ErrorCode_ErrQuestNodeNotActive = 500016;
  ErrorCode_ErrQuestNotActiveId = 500017;
  ErrorCode_ErrQuestNodeNotFound = 500018;
  ErrorCode_ErrQuestComNotFound = 500019;
  ErrorCode_ErrQuestTraceType = 500020;
  ErrorCode_ErrQuestNotProgress = 500021;
  ErrorCode_ErrQuestNoCombatState = 500022;
  ErrorCode_ErrQuestNodeData = 500023;
  ErrorCode_ErrQuestNotChildQuestNode = 500024;
  ErrorCode_ErrQuestNotClientSubmit = 500025;
  ErrorCode_ErrQuestAccepted = 500026;
  ErrorCode_ErrResourceOccupation = 500027;
  ErrorCode_ErrRequestOccupationType = 500028;
  ErrorCode_ErrNotFoundOccupation = 500029;
  ErrorCode_ErrNotOnlineQuestAccept = 500030;
  ErrorCode_ErrQuestDestroy = 500031;
  ErrorCode_ErrTreeNodeNotFind = 500032;
  ErrorCode_ErrTreeNodeNotActive = 500033;
  ErrorCode_ErrIsNotChildQuestNode = 500034;
  ErrorCode_ErrChildQuestConditionCanNotSubmit = 500035;
  ErrorCode_ErrNodeNotFindAction = 500036;
  ErrorCode_ErrNodeActionIsFinish = 500037;
  ErrorCode_ErrNodeActionGetItemIsNotQuestItem = 500038;
  ErrorCode_ErrNodeActionGetItemHasNotFreeSize = 500039;
  ErrorCode_ErrInvalidBtType = 500040;
  ErrorCode_ErrTimerNotFind = 500041;
  ErrorCode_ErrPreCondition = 500042;
  ErrorCode_ErrHandIdItemData = 500043;
  ErrorCode_ErrTreeNotFailedNode = 500044;
  ErrorCode_ErrTreeNotFailConf = 500045;
  ErrorCode_ErrTreeNotGiveUpConf = 500046;
  ErrorCode_ErrTreeNotRollback = 500047;
  ErrorCode_ErrNodeNotFindNpcId = 500048;
  ErrorCode_ErrNotRollbackPermission = 500049;
  ErrorCode_ErrNotRollbackRepeat = 500050;
  ErrorCode_ErrTreeSuspend = 500051;
  ErrorCode_ErrPlayerNotInQuestMap = 500052;
  ErrorCode_ErrSaveNewNotRollback = 500053;
  ErrorCode_ErrUiPlayType = 500054;
  ErrorCode_ErrOccupationTime = 500055;
  ErrorCode_ErrReleaseTime = 500056;
  ErrorCode_ErrActionSetTime = 500057;
  ErrorCode_ErrForcedOccupationResource = 500058;
  ErrorCode_ErrAddPlayBubble = 500059;
  ErrorCode_ErrDisableSwitchOccupation = 500060;
  ErrorCode_ErrOpenSystemBoardResultFail = 500061;
  ErrorCode_ErrEntityNoInhaledComponent = 500062;
  ErrorCode_ErrEntityInhaledStrength = 500063;
  ErrorCode_ErrTapeDefault = 600000;
  ErrorCode_ErrTapeInvalidPos = 600001;
  ErrorCode_ErrTapeIsNotActiveRole = 600002;
  ErrorCode_ErrTapeItemTypeFail = 600003;
  ErrorCode_ErrTapeNotExistTapeItem = 600004;
  ErrorCode_ErrTapeNotExistTapeConfig = 600005;
  ErrorCode_ErrTapeNotExistTapeProps = 600006;
  ErrorCode_ErrTapeHasTakeOnTape = 600007;
  ErrorCode_ErrTapeHasNotTakeOnTape = 600008;
  ErrorCode_ErrTapeNotExistTapeQualityConfig = 600009;
  ErrorCode_ErrTapeNotExistLevelUpExpConfig = 600010;
  ErrorCode_ErrTapeInvalidLevelUpExpValue = 600011;
  ErrorCode_ErrTapeNotExistExpDecayRatioConfig = 600012;
  ErrorCode_ErrTapeLevelUpEqualItem = 600013;
  ErrorCode_ErrTapeLevelUpRepeatItem = 600014;
  ErrorCode_ErrTapeLevelUpInvalidExpItemNum = 600015;
  ErrorCode_ErrTapeLevelUpInvalidExpRate = 600016;
  ErrorCode_ErrTapeLevelUpInvalidAddExp = 600017;
  ErrorCode_ErrTapeLevelUpMaxLevel = 600018;
  ErrorCode_ErrTapeLevelUpConsumeItemNotEnough = 600019;
  ErrorCode_ErrTapeLevelUpMaterialLock = 600020;
  ErrorCode_ErrTapeTransferEqualItem = 600021;
  ErrorCode_ErrTapeTransferQualityNotEqual = 600022;
  ErrorCode_ErrTapeTransferSuitNotEqual = 600023;
  ErrorCode_ErrTapeTransferMaterialLock = 600024;
  ErrorCode_ErrTapeTransferMaterialEquipped = 600025;
  ErrorCode_ErrTapeNotExistTransferPropNumConfig = 600026;
  ErrorCode_ErrTapeTransferPropNumIsMax = 600027;
  ErrorCode_ErrTapeTransferRandomSubPropFail = 600028;
  ErrorCode_ErrTapeResetTransferHasNotProp = 600029;
  ErrorCode_ErrTapeResetTransferMaterialNotEnough = 600030;
  ErrorCode_ErrTapeNotExistTapeExpItem = 600031;
  ErrorCode_ErrTapeNotExistTapeExpItemConfig = 600032;
  ErrorCode_ErrCollectEntityNotExist = 600033;
  ErrorCode_ErrCollectInvalidEntityMainType = 600034;
  ErrorCode_ErrRunningLevelPlayNotFind = 600035;
  ErrorCode_ErrLevelPlayInteractionEntity = 600036;
  ErrorCode_ErrLevelPlayNotExistByConfId = 600037;
  ErrorCode_ErrLevelPlayNotCreate = 600038;
  ErrorCode_ErrLevelPlayRewarded = 600039;
  ErrorCode_ErrLevelPlayInteractionType = 600040;
  ErrorCode_ErrLevelPlayNotPlayer = 600041;
  ErrorCode_ErrLevelPlayNotComplete = 600042;
  ErrorCode_ErrLevelPlayRewardFail = 600043;
  ErrorCode_ErrLevelPlayNotWaitState = 600044;
  ErrorCode_ErrLevelPlayAction = 600045;
  ErrorCode_ErrLevelPlayGetRewardLimit = 600046;
  ErrorCode_ErrFlowNotExist = 600047;
  ErrorCode_ErrFlowHaveNotActionWait = 600048;
  ErrorCode_ErrFlowHaveNotTalkWait = 600049;
  ErrorCode_ErrFlowHaveNotOptionWait = 600050;
  ErrorCode_ErrFlowInvalidOptionId = 600051;
  ErrorCode_ErrInteractFlowCanNotPlay = 600052;
  ErrorCode_ErrInteractInvalidFlowState = 600053;
  ErrorCode_ErrInteractOptionOwnerIsNotFlowOwner = 600054;
  ErrorCode_ErrInteractOptionOwnerIsNotActionOwner = 600055;
  ErrorCode_ErrActionOwnerIsNotEntity = 600056;
  ErrorCode_ErrActionOwnerNotFound = 600057;
  ErrorCode_ErrActionSceneNotFound = 600058;
  ErrorCode_ErrActionGroupNotFound = 600059;
  ErrorCode_ErrFinishClientActionFail = 600060;
  ErrorCode_ErrActionHostPlayerNotFound = 600061;
  ErrorCode_ErrActionFail = 600062;
  ErrorCode_ErrActionPlayerNotFound = 600063;
  ErrorCode_ErrInteractMultiGameMode = 600064;
  ErrorCode_ErrInteractAddFlowFail = 600065;
  ErrorCode_ErrBehaviorTreeOwnerNotFound = 600066;
  ErrorCode_ErrBehaviorTreeNotFound = 600067;
  ErrorCode_ErrBehaviorTreePending = 600068;
  ErrorCode_ErrBehaviorTreeTimerTypeNotFound = 600069;
  ErrorCode_ErrBehaviorTreeStopTimerFail = 600070;
  ErrorCode_ErrBehaviorTreeTimerCompNotFound = 600071;
  ErrorCode_ErrInteractCd = 600072;
  ErrorCode_ErrInteractRange = 600073;
  ErrorCode_ErrDropPickRange = 600074;
  ErrorCode_ErrBtTmpItemContextNotExist = 600075;
  ErrorCode_ErrBtTmpItemBtObjNotExist = 600076;
  ErrorCode_ErrPlayerBigWorldNotExist = 600077;
  ErrorCode_ErrRoleEntityNotExist = 600078;
  ErrorCode_ErrAddFlowFail = 600079;
  ErrorCode_ErrInteracting = 600080;
  ErrorCode_ErrInteractCollectBagFull = 600081;
  ErrorCode_ErrBtObjIsNotInstPlay = 600082;
  ErrorCode_ErrReviveConfigNotExist = 600083;
  ErrorCode_ErrFinishFlowFail = 600084;
  ErrorCode_ErrFlowActionFail = 600085;
  ErrorCode_ErrGmSubmitChildQuestNodeMaxDepth = 600086;
  ErrorCode_ErrGmSubmitChildQuestNodeIsNotProgress = 600087;
  ErrorCode_ErrEntityPatrolComponentNotExist = 600088;
  ErrorCode_ErrInteractIsNotParticipant = 600089;
  ErrorCode_ErrVisionEntityInteractFail = 600090;
  ErrorCode_ErrMaxDropTimes = 600091;
  ErrorCode_ErrStateEntityMultiHang = 600092;
  ErrorCode_ErrPlayerLoading = 600093;
  ErrorCode_ErrPlayerTeleporting = 600094;
  ErrorCode_ErrInteractBtPending = 600095;
  ErrorCode_ErrInteractDead = 600096;
  ErrorCode_ErrMultiHangEntity = 600097;
  ErrorCode_ErrRenjuCanNotResetWhenComplete = 600098;
  ErrorCode_ErrRenjuCanNotMove = 600099;
  ErrorCode_ErrEntityNotFound = 600100;
  ErrorCode_ErrSceneHostPlayerNotMatch = 600101;
  ErrorCode_ErrVehicleComponentNotFound = 600102;
  ErrorCode_ErrVehicleSeatNotFound = 600103;
  ErrorCode_ErrVehicleGettingOn = 600104;
  ErrorCode_ErrPortalEntityNotFound = 600105;
  ErrorCode_ErrPortalCompNotFound = 600106;
  ErrorCode_ErrPortalTeleportPosNotEqual = 600107;
  ErrorCode_ErrSceneWorldNotExist = 700000;
  ErrorCode_ErrPlayerNotInScene = 700001;
  ErrorCode_ErrDropEntityNotExist = 700002;
  ErrorCode_ErrDropComponentNotExist = 700003;
  ErrorCode_ErrDropOwnerError = 700004;
  ErrorCode_ErrPlayerAlreadyInScene = 700005;
  ErrorCode_ErrSceneIdParseError = 700006;
  ErrorCode_ErrJoinSceneIdNotExist = 700007;
  ErrorCode_ErrSceneInviteFail = 700008;
  ErrorCode_ErrSceneInvitePlayerNotExist = 700009;
  ErrorCode_ErrSceneInviteTokenInvalid = 700010;
  ErrorCode_ErrSceneInviterNotExist = 700011;
  ErrorCode_ErrSceneInviteeIdNotMatch = 700012;
  ErrorCode_ErrSceneTeamIsFull = 700013;
  ErrorCode_ErrScenePlayerIsInTeam = 700014;
  ErrorCode_ErrSceneInviteerIsInPlayeInst = 700015;
  ErrorCode_ErrBeKickerNotInScene = 700016;
  ErrorCode_ErrorCanNotSceneKickSelf = 700017;
  ErrorCode_ErrCanNotKickOtherInPlayInst = 700018;
  ErrorCode_ErrCanNotKickOtherWhoIsInPlayInst = 700019;
  ErrorCode_ErrNoSceneKickPermission = 700020;
  ErrorCode_ErrInviterIsInOtherScene = 700021;
  ErrorCode_ErrInOtherSceneCanNotInvite = 700022;
  ErrorCode_ErrSceneBackSceneFlagError = 700023;
  ErrorCode_ErrLeaveSceneIdNotMatch = 700024;
  ErrorCode_ErrPrewarTeamAlreadyExist = 700025;
  ErrorCode_ErrPrewarTeamNotExist = 700026;
  ErrorCode_ErrCreatePrewarTeamPermissionNotEnough = 700027;
  ErrorCode_ErrPrewarTeamInvitePermissionNotEnough = 700028;
  ErrorCode_ErrPrewarBeInviterNotInScene = 700029;
  ErrorCode_ErrPrewarBeInviterInInstance = 700030;
  ErrorCode_ErrPlayerAlreadyInPrewarTeam = 700031;
  ErrorCode_ErrPlayerNotInPrewarTeam = 700032;
  ErrorCode_ErrPlayerSetPrewarReadyStateRepeat = 700033;
  ErrorCode_ErrPrewarTeamBeKickerNotInScene = 700034;
  ErrorCode_ErrPrewarTeamKickPermissionNotEnough = 700035;
  ErrorCode_ErrPrewarIniviteTooFrequently = 700036;
  ErrorCode_ErrPrewarJoinInstanceIdNotMatch = 700037;
  ErrorCode_ErrPrewarCaptainCanNotLeave = 700038;
  ErrorCode_ErrPrewarReadyStateCanNotChangeRole = 700039;
  ErrorCode_ErrScenePrewarTeamHavePlayerNotReady = 700040;
  ErrorCode_ErrAlreadyInMultiScene = 700041;
  ErrorCode_ErrOnlyCaptainCanDissolvePrewarTeam = 700042;
  ErrorCode_ErrMultiChangeRoleIndexInvalid = 700043;
  ErrorCode_ErrMultiCanNotChangeOtherRole = 700044;
  ErrorCode_ErrMultiChangeRoleEntityNorExist = 700045;
  ErrorCode_ErrSceneCanNotUseThisFunc = 700046;
  ErrorCode_ErrSceneCanNotUseThisItem = 700047;
  ErrorCode_ErrSceneFightRoleIdRepeat = 700048;
  ErrorCode_ErrShieldAddEntityNotExist = 700049;
  ErrorCode_ErrShieldAddShieldIdExisted = 700050;
  ErrorCode_ErrShieldChangeEntityNotExist = 700051;
  ErrorCode_ErrShieldChangeShieldIdNotExist = 700052;
  ErrorCode_ErrShieldRemoveEntityNotExist = 700053;
  ErrorCode_ErrShieldRemoveShieldIdNotExist = 700054;
  ErrorCode_ErrHardnessModeChangedEntityNotExist = 700055;
  ErrorCode_ErrSceneEntityNotExist = 700056;
  ErrorCode_ErrSceneEntityNotHavePartData = 700057;
  ErrorCode_ErrsceneEntityNotHavePartId = 700058;
  ErrorCode_ErrChangeControlRoleRepeat = 700059;
  ErrorCode_ErrVisionSkillCallEntityFail = 700060;
  ErrorCode_ErrSceneDataLoadError = 700061;
  ErrorCode_ErrCreatureDataError = 700062;
  ErrorCode_ErrCreatureGenIsExist = 700063;
  ErrorCode_ErrCreatureGenIsNotExist = 700064;
  ErrorCode_ErrCreatureGenIsControlByOther = 700065;
  ErrorCode_ErrCreatureGenNotHaveControlPerm = 700066;
  ErrorCode_ErrCreatureReachMaxCount = 700067;
  ErrorCode_ErrCreatureConditionNotMatch = 700068;
  ErrorCode_ErrCreatureTimeIntervalError = 700069;
  ErrorCode_ErrCreatureCfgNotExist = 700070;
  ErrorCode_ErrCreatureEntityIsNotValidity = 700071;
  ErrorCode_ErrUniqueEntityCanNotCreateTwice = 700072;
  ErrorCode_ErrRoleNotHaveVisionSkill = 700073;
  ErrorCode_ErrHitGearEntityNotExist = 700074;
  ErrorCode_ErrHitGearHaveNotEntityConfig = 700075;
  ErrorCode_ErrHitGearHaveNotGearConfig = 700076;
  ErrorCode_ErrHitGearHaveNotGameplayConfig = 700077;
  ErrorCode_ErrHitGearHaveNotStepConfig = 700078;
  ErrorCode_ErrHitGearHaveEntityCommonTag = 700079;
  ErrorCode_ErrHitGearEntityFunctionTypeFail = 700080;
  ErrorCode_ErrHitGearAcceptStepFail = 700081;
  ErrorCode_ErrCreateInstanceNotContainEntrance = 700082;
  ErrorCode_ErrCreateInstanceHaveNotEntranceConfig = 700083;
  ErrorCode_ErrCreateInstanceEntranceLock = 700084;
  ErrorCode_ErrCreateInstanceHaveNotConfig = 700085;
  ErrorCode_ErrCreateInstanceEnterCountNotEnough = 700086;
  ErrorCode_ErrCreateInstanceConditionNotMatch = 700087;
  ErrorCode_ErrEnterCountRequestHaveNotConfig = 700088;
  ErrorCode_ErrUnlockInstanceEntranceHaveNotConfig = 700089;
  ErrorCode_ErrUnlockInstanceEntranceNotNeedUnlock = 700090;
  ErrorCode_ErrUnlockInstanceEntranceUnlocked = 700091;
  ErrorCode_ErrUnlockInstanceEntranceCondiitonNotMatch = 700092;
  ErrorCode_ErrEnterSceneGameplayRequestHaveNotConfig = 700093;
  ErrorCode_ErrEnterSceneGameplayRequestAccepted = 700094;
  ErrorCode_ErrEnterSceneGameplayRequestAcceptFail = 700095;
  ErrorCode_ErrStoryCharacterCreatFail = 700096;
  ErrorCode_ErrStoryCharacterCreatRepeat = 700097;
  ErrorCode_ErrStoryCharacterNotExist = 700098;
  ErrorCode_ErrCheckGearEntityNotExist = 700099;
  ErrorCode_ErrCheckGearType = 700100;
  ErrorCode_ErrCheckGearNotEntityConfig = 700101;
  ErrorCode_ErrCheckGearActive = 700102;
  ErrorCode_ErrCheckGearInactive = 700103;
  ErrorCode_ErrTargetGearGroupEntityNotExist = 700104;
  ErrorCode_ErrTargetGearGroupConfigNotExist = 700105;
  ErrorCode_ErrTargetGearEntityNotExist = 700106;
  ErrorCode_ErrTargetGearConfigNotExist = 700107;
  ErrorCode_ErrTargetGearStartTypeIsNotHit = 700108;
  ErrorCode_ErrTargetGearStartTypeIsNotAction = 700109;
  ErrorCode_ErrTargetGearStarted = 700110;
  ErrorCode_ErrTargetGearFinished = 700111;
  ErrorCode_ErrTargetGearIsNotInCreatedConsole = 700112;
  ErrorCode_ErrTargetGearGroupEntityIsNotAllInit = 700113;
  ErrorCode_ErrLanternCatNotExit = 700114;
  ErrorCode_ErrLanternCatConfNotExit = 700115;
  ErrorCode_ErrLanternCatType = 700116;
  ErrorCode_ErrLanternActived = 700117;
  ErrorCode_ErrLanternTargetNotExit = 700118;
  ErrorCode_ErrCaptureFail = 700119;
  ErrorCode_ErrDyingFail = 700120;
  ErrorCode_ErrThrowDamageEntityNotExit = 700121;
  ErrorCode_ErrThrowDamageCalculateId = 700122;
  ErrorCode_ErrThrowDamageIdNotExit = 700123;
  ErrorCode_ErrThrowDamageRoleIdConf = 700124;
  ErrorCode_ErrThrowDamageTypeNotExit = 700125;
  ErrorCode_InstIdNotExist = 700126;
  ErrorCode_ErrControlObjectEntityNotExist = 700127;
  ErrorCode_ErrControlObjectConfigNotExist = 700128;
  ErrorCode_ErrControlGroupConfigNotExist = 700129;
  ErrorCode_ErrControlObjectLocked = 700130;
  ErrorCode_ErrControlGroupLocked = 700131;
  ErrorCode_ErrControlCanNotPutTarget = 700132;
  ErrorCode_ErrControlTargetOccupied = 700133;
  ErrorCode_ErrControlObjectCatching = 700134;
  ErrorCode_ErrControlObjectNotCatching = 700135;
  ErrorCode_ErrControlObjectOtherCatching = 700136;
  ErrorCode_ErrEntityPositionIllegal = 700137;
  ErrorCode_ErrTreasureBoxNot = 700138;
  ErrorCode_ErrTreasureBoxNotInit = 700139;
  ErrorCode_ErrTreasureBoxNotConfig = 700140;
  ErrorCode_ErrTreasureBoxHadReward = 700141;
  ErrorCode_ErrTreasureBoxNotInteraction = 700142;
  ErrorCode_ErrTreasureBoxNotDropId = 700143;
  ErrorCode_ErrTreasureBoxDropErr = 700144;
  ErrorCode_ErrTreasureBoxNotExist = 700145;
  ErrorCode_ErrTreasureBoxInvalidTag = 700146;
  ErrorCode_ErrTreasureBoxHadTag = 700147;
  ErrorCode_ErrTreasureBoxNotTag = 700148;
  ErrorCode_ErrSneakGameNotOpen = 700149;
  ErrorCode_ErrSneakFinishRepeat = 700150;
  ErrorCode_ErrClientControlDamage = 700151;
  ErrorCode_ErrSceneDataSaveFail = 700152;
  ErrorCode_NotInFbInstance = 700153;
  ErrorCode_GMErrCanNotCreateWorldInst = 700154;
  ErrorCode_GMErrPlayerAlreadyInFbInst = 700155;
  ErrorCode_GMErrTagetInstanceIsNotMulti = 700156;
  ErrorCode_GMErrPlayerNotFound = 700157;
  ErrorCode_ErrEntityFlowTooMuch = 700158;
  ErrorCode_GmErrIsWalkable = 700159;
  ErrorCode_GmErrIsNotWalkable = 700160;
  ErrorCode_GmErrNoNavmesh = 700161;
  ErrorCode_ErrBigWorldInstIdNotExist = 700162;
  ErrorCode_ErrInstIdNotBigWorld = 700163;
  ErrorCode_ErrInInstanceNotSwitchBigWorld = 700164;
  ErrorCode_ErrAlreadyInThisBigWorld = 700165;
  ErrorCode_ErrNoPermissionGetTreasureBox = 700166;
  ErrorCode_ErrCreateBigWorldRepeat = 700167;
  ErrorCode_DebugErrInstIdNotExist = 700168;
  ErrorCode_ErrSceneAiStopped = 700169;
  ErrorCode_ErrGlobalEntityConfigNotExist = 700170;
  ErrorCode_ErrSceneFixedConfigNotExist = 700171;
  ErrorCode_ErrSceneFixedEntityNotFound = 700172;
  ErrorCode_ErrSceneGlobalEntityNotFount = 700173;
  ErrorCode_ErrEntityNotHaveVarComponent = 700174;
  ErrorCode_ErrEntityVarNameNotExist = 700175;
  ErrorCode_ErrEntityVarTypeError = 700176;
  ErrorCode_ErrEntityConfigNotOffer = 700177;
  ErrorCode_ErrConfigTypeNotGloabl = 700178;
  ErrorCode_ErrConfigTypeNotSceneFixed = 700179;
  ErrorCode_ErrConfigTypeNotCharacter = 700180;
  ErrorCode_ErrEntityPosNotOffer = 700181;
  ErrorCode_ErrSceneCellPosNotFount = 700182;
  ErrorCode_ErrEntityCongigNotInSleep = 700183;
  ErrorCode_ErrSummonCfgNotFound = 700184;
  ErrorCode_ErrSummonAddEntityFail = 700185;
  ErrorCode_ErrSummonMaxCount = 700186;
  ErrorCode_ErrSummonMaxGenerations = 700187;
  ErrorCode_ErrSummonEntityIdAlreadyExist = 700188;
  ErrorCode_ErrSummonerEntityType = 700189;
  ErrorCode_ErrEntityStatusIsNotDead = 700190;
  ErrorCode_ErrEntityNotHaveAttributeComp = 700191;
  ErrorCode_ErrEntityDbData = 700192;
  ErrorCode_ErrSceneFixedEntityCreated = 700193;
  ErrorCode_ErrInvalidAwakeEntityContext = 700194;
  ErrorCode_ErrTriggerComponentNotExist = 700195;
  ErrorCode_ErrTriggerComponentMaxCount = 700196;
  ErrorCode_ErrNotSelfRole = 700197;
  ErrorCode_ErrNoControlRights = 700198;
  ErrorCode_ErrEntityHaveNotEntityOwner = 700199;
  ErrorCode_ErrEntityOwnerNotMatch = 700200;
  ErrorCode_ErrCreateSceneFixedEntitiesEmpty = 700201;
  ErrorCode_ErrInteractComponentNotExist = 700202;
  ErrorCode_ErrInteractOptionIndexInvalid = 700203;
  ErrorCode_ErrOnlineInteractNoPermission = 700204;
  ErrorCode_ErrOnlineInteractNotOpen = 700205;
  ErrorCode_ErrAwakeEntityNoPermission = 700206;
  ErrorCode_ErrCannotUseSkillStatus = 700207;
  ErrorCode_ErrInteractOptionGuidInvalid = 700208;
  ErrorCode_ErrAddInteractOptionFail = 700209;
  ErrorCode_ErrRemoveInteractOptionFail = 700210;
  ErrorCode_ErrInteractOptionOwnerNotFound = 700211;
  ErrorCode_ErrSummonPlayerId = 700212;
  ErrorCode_ErrSummonTemplateCfgNotFound = 700213;
  ErrorCode_ErrAttributeComponent = 700214;
  ErrorCode_ErrAnimFsmComponent = 700215;
  ErrorCode_ErrStateComponent = 700216;
  ErrorCode_ErrBattleComponent = 700217;
  ErrorCode_ErrPartComponent = 700218;
  ErrorCode_ErrAiControlComponent = 700219;
  ErrorCode_ErrSummonsComponent = 700220;
  ErrorCode_ErrAiBlackboardComponent = 700221;
  ErrorCode_ErrSetVarInvalidContext = 700222;
  ErrorCode_ErrSetVarInvalidVarRefPb = 700223;
  ErrorCode_ErrSetVarGetRightVarDefineFail = 700224;
  ErrorCode_ErrSetVarSetLeftVarDefineFail = 700225;
  ErrorCode_ErrCalcVarInvalidContext = 700226;
  ErrorCode_ErrCalcVarInvalidVarRef = 700227;
  ErrorCode_ErrCalcVarGetVarDefineFail = 700228;
  ErrorCode_ErrCalcVarInvalidVarType = 700229;
  ErrorCode_ErrCalcVarInvalidOp = 700230;
  ErrorCode_ErrCalcVarSetResultFail = 700231;
  ErrorCode_ErrActionEntityNoExist = 700232;
  ErrorCode_ErrActionNoInteractConfig = 700233;
  ErrorCode_ErrActionIdNoExist = 700234;
  ErrorCode_ErrActionBtObjNoExist = 700235;
  ErrorCode_ErrActionNodeNoExist = 700236;
  ErrorCode_ErrActionNoChildQuest = 700237;
  ErrorCode_ErrActionParams = 700238;
  ErrorCode_ErrActionNotEntityContext = 700239;
  ErrorCode_ErrActionExecutorNotFind = 700240;
  ErrorCode_ErrActionSessionNotFind = 700241;
  ErrorCode_ErrActionCreateSessionIdFail = 700242;
  ErrorCode_ErrActionPathConvertFail = 700243;
  ErrorCode_ErrActionConfigNotFind = 700244;
  ErrorCode_ErrActionHaveNotHandler = 700245;
  ErrorCode_ErrActionInternalError = 700246;
  ErrorCode_ErrActionInvalidIndex = 700247;
  ErrorCode_ErrActionIsNotServer = 700248;
  ErrorCode_ErrActionRemainActionNotFinish = 700249;
  ErrorCode_ErrActionExecutorIsNotBlackbard = 700250;
  ErrorCode_ErrContinuityActionNotFinish = 700251;
  ErrorCode_ErrActionIsNotContinuity = 700252;
  ErrorCode_ErrResetLocationEntityNotExist = 700253;
  ErrorCode_ErrEntityPosAbnormalNotExists = 700254;
  ErrorCode_ErrGmRemoveEntityNotExists = 700255;
  ErrorCode_ErrDrownEntityNotExists = 700256;
  ErrorCode_ErrTargetGearNotExists = 700257;
  ErrorCode_ErrOutofBattleEntityNotExists = 700258;
  ErrorCode_ErrOrderAddBuffEntityNotExists = 700259;
  ErrorCode_ErrOrderRemoveBuffEntityNotExists = 700260;
  ErrorCode_ErrActivateBuffEntityNotExists = 700261;
  ErrorCode_ErrToughCalcExtraRatioChangeEntityNotExists = 700262;
  ErrorCode_ErrAdsorbEntityNotExist = 700263;
  ErrorCode_ErrAdsorbCondNotMeet = 700264;
  ErrorCode_ErrTimelineTrackMultiGameForbid = 700265;
  ErrorCode_ErrTimelineTraceEntityNotExists = 700266;
  ErrorCode_ErrTimelineTraceComponentNotExists = 700267;
  ErrorCode_ErrTimelineTraceGroupIndex = 700268;
  ErrorCode_ErrTimelineTraceFinish = 700269;
  ErrorCode_ErrTimelineTraceCondition = 700270;
  ErrorCode_ErrTimelineTraceTargetEmpty = 700271;
  ErrorCode_ErrTimelineTraceControl = 700272;
  ErrorCode_ErrTimelineTraceFinishCondition = 700273;
  ErrorCode_ErrTimelineTraceNotInControl = 700274;
  ErrorCode_ErrForbidEnterInstance = 700275;
  ErrorCode_ErrForbitEnterBigWorld = 700276;
  ErrorCode_ErrPrefabIncIdExist = 700277;
  ErrorCode_ErrPrefabIdExist = 700278;
  ErrorCode_ErrPrefabNumberIsZero = 700279;
  ErrorCode_ErrPrefabEntityIsExist = 700280;
  ErrorCode_ErrPrefabTreasureBox = 700281;
  ErrorCode_ErrPrefabActionCreate = 700282;
  ErrorCode_ErrPrefabVarNoExist = 700283;
  ErrorCode_ErrClientOnlyEntityCantCreate = 700284;
  ErrorCode_ErrTimelineTraceActionRun = 700285;
  ErrorCode_ErrGmActivateTeleportSceneNotExist = 700286;
  ErrorCode_ErrGmCreateInstSceneHasExist = 700287;
  ErrorCode_ErrVfxNpcNotExist = 700288;
  ErrorCode_ErrVfxNpcIsNotVfxNpc = 700289;
  ErrorCode_ErrBlackboardLimit = 700290;
  ErrorCode_ErrBlackboardArrayLimit = 700291;
  ErrorCode_ErrBlackboardStringLimit = 700292;
  ErrorCode_ErrReconnectGWGetGatePlayerFailed = 800000;
  ErrorCode_ErrGWReconnectGWInvalidPlayerState = 800001;
  ErrorCode_ErrGWReconnectGWVerifyTokenFailed = 800002;
  ErrorCode_ErrGWReconnectGWBackOnlineAsyncFailed = 800003;
  ErrorCode_ErrGWReconnectGWBackOnlineAsyncException = 800004;
  ErrorCode_ErrReconnectGwclientLatestSeqNoNotHit = 800005;
  ErrorCode_ErrGWReconnectConfirmGetPlayerFailed = 800006;
  ErrorCode_ErrAttrChangeHandleInvalidClientAction = 800007;
  ErrorCode_ErrThrowDamageReqGetStateComponentFailed = 800008;
  ErrorCode_ErrThrowDamageReqEntityIsAlreadyDead = 800009;
  ErrorCode_ErrAnimalDieRequestForceSetDieError = 800010;
  ErrorCode_ErrCollectEntityForceSetEntityDieError = 800011;
  ErrorCode_ErrMonsterBoomForceSetDieError = 800012;
  ErrorCode_ErrAttrChangeReqReplaceAttrListFailed = 800013;
  ErrorCode_ErrReconnectInvalidOperation = 800014;
  ErrorCode_ErrReconnectGwNodeTainted = 800015;
  ErrorCode_ErrFavorRoleNotFound = 900000;
  ErrorCode_ErrFavorConfNotFound = 900001;
  ErrorCode_ErrFavorQuestNotFound = 900002;
  ErrorCode_ErrFavorLevelRewardLimit = 900003;
  ErrorCode_ErrFavorQuestAcceptLimit = 900004;
  ErrorCode_ErrFavorItemLocked = 900005;
  ErrorCode_ErrFavorItemHasUnLocked = 900006;
  ErrorCode_ErrElevatorEntityNotExit = 900007;
  ErrorCode_ErrElevatorConfigNotExit = 900008;
  ErrorCode_ErrElevatorLocked = 900009;
  ErrorCode_ErrElevatorIsNotReverse = 900010;
  ErrorCode_ErrElevatorIsNotForward = 900011;
  ErrorCode_ErrElevatorIsNotStart = 900012;
  ErrorCode_ErrElevatorIsNotEnd = 900013;
  ErrorCode_ErrElevatorFloorError = 900014;
  ErrorCode_ErrHostRefuse = 900015;
  ErrorCode_ErrHostOffline = 900016;
  ErrorCode_ErrHostHasOnline = 900017;
  ErrorCode_ErrHostPlayerMax = 900018;
  ErrorCode_ErrHostRefuseStrangers = 900019;
  ErrorCode_ErrHostForbidJoin = 900020;
  ErrorCode_ErrHostTemporarilyForbidJoin = 900021;
  ErrorCode_ErrSlaveInBlockList = 900022;
  ErrorCode_ErrExceedJoinLevelDiff = 900023;
  ErrorCode_ErrHostNotOpenOnlineFunc = 900024;
  ErrorCode_ErrHostInOtherPlayer = 900025;
  ErrorCode_ErrHostInForbidOnlineQuest = 900026;
  ErrorCode_ErrSlaveHasOnline = 900027;
  ErrorCode_ErrSlaveInForbidOnlineQuest = 900028;
  ErrorCode_ErrSlaveNotOpenOnlineFunc = 900029;
  ErrorCode_ErrSlaveApplyRepeated = 900030;
  ErrorCode_ErrSlaveTryApplySelf = 900031;
  ErrorCode_ErrLobbyTryQuerySelf = 900032;
  ErrorCode_ErrSlaveRequestExpired = 900033;
  ErrorCode_ErrEnterringOtherScene = 900034;
  ErrorCode_ErrWaitingOtherJoin = 900035;
  ErrorCode_ErrWaitListFull = 900036;
  ErrorCode_ErrAlreayInWaitEnterList = 900037;
  ErrorCode_ErrHostNotInBigWorld = 900038;
  ErrorCode_ErrPlayerNotInBigWorld = 900039;
  ErrorCode_ErrPlayerNotInWaitList = 900040;
  ErrorCode_ErrForbidOperaInMatching = 900041;
  ErrorCode_ErrLobbyNotFoundPlayer = 900042;
  ErrorCode_ErrRoleTrailCannotOnline = 900043;
  ErrorCode_ErrHostRoleTrail = 900044;
  ErrorCode_ErrInMatchingCanNotJoinOther = 900045;
  ErrorCode_ErrInMatchCanNotBeApply = 900046;
  ErrorCode_ErrInMatchCanNotAcceptApply = 900047;
  ErrorCode_ErrSlaveInFlow = 900048;
  ErrorCode_ErrHostInFlow = 900049;
  ErrorCode_ErrAchievementNotClinet = 900050;
  ErrorCode_ErrTriggerConditionNotMet = 900051;
  ErrorCode_ErrNpcTraceNotConf = 900052;
  ErrorCode_ErrBuffProducerConfNotFound = 900053;
  ErrorCode_ErrBuffProducerHasDone = 900054;
  ErrorCode_ErrBuffConsumerConfNotFound = 900055;
  ErrorCode_ErrBuffConsumerBuffNotFound = 900056;
  ErrorCode_ErrBuffConsumerEntityNotFound = 900057;
  ErrorCode_ErrItemPosInvaild = 900058;
  ErrorCode_ErrItemIdInvaild = 900059;
  ErrorCode_ErrRouletteFuncIdInvaild = 900060;
  ErrorCode_ErrStateIsRunning = 900061;
  ErrorCode_ErrSceneEntityNotFind = 900062;
  ErrorCode_ErrActionPlayersIsEmpty = 900063;
  ErrorCode_ErrFireBulletNoLauncher = 900064;
  ErrorCode_ErrFireBulletNoTarget = 900065;
  ErrorCode_ErrTurntableConfigNotFound = 900066;
  ErrorCode_ErrTurntableActivityNotOpen = 900067;
  ErrorCode_ErrTurntableActivityIsFinish = 900068;
  ErrorCode_ErrTurntableActivityQuestNotFinish = 900069;
  ErrorCode_ErrTurntableActivityRoundConfigNotFound = 900070;
  ErrorCode_ErrEnrichmentAreaIsEmpty = 900071;
  ErrorCode_ErrEnrichmentAreaNotFind = 900072;
  ErrorCode_ErrEnrichmentAreaInCD = 900073;
  ErrorCode_ErrEnrichmentAreaInFog = 900074;
  ErrorCode_ErrBuffItemConfig = 1000000;
  ErrorCode_ErrBuffItemNotShare = 1000001;
  ErrorCode_ErrBuffItemShareRoleId = 1000002;
  ErrorCode_ErrBuffItemRoleIdNotExist = 1000003;
  ErrorCode_ErrBuffItemNotEnough = 1000004;
  ErrorCode_ErrBuffItemMultiUse = 1000005;
  ErrorCode_ErrBuffItemCdLimit = 1000006;
  ErrorCode_ErrBuffItemNumZero = 1000007;
  ErrorCode_ErrBuffItemNotPlayer = 1000008;
  ErrorCode_ErrSceneItemNotExit = 1000009;
  ErrorCode_ErrSceneItemType = 1000010;
  ErrorCode_ErrSceneItemOperate = 1000011;
  ErrorCode_ErrSceneItemState = 1000012;
  ErrorCode_ErrStateEntityNoExit = 1000013;
  ErrorCode_ErrStateEntityNotTagComp = 1000014;
  ErrorCode_ErrStateEntityTypeNotExit = 1000015;
  ErrorCode_ErrStateEntityStateNotExit = 1000016;
  ErrorCode_ErrStateEntityNotConfig = 1000017;
  ErrorCode_ErrStateEntityStateType = 1000018;
  ErrorCode_ErrStateEntityStateNoChange = 1000019;
  ErrorCode_ErrStateEntitySilent = 1000020;
  ErrorCode_ErrStateEntityComplete = 1000021;
  ErrorCode_ErrStateEntityLock = 1000022;
  ErrorCode_ErrStateEntityNotBorn = 1000023;
  ErrorCode_ErrStateNameNoExit = 1000024;
  ErrorCode_ErrStateInBorn = 1000025;
  ErrorCode_ErrStateCondition = 1000026;
  ErrorCode_ErrStateNotOwner = 1000027;
  ErrorCode_ErrChangeSelfStateObjNotEntity = 1000028;
  ErrorCode_ErrFoundationNotExists = 1000029;
  ErrorCode_ErrTeleControlNotExists = 1000030;
  ErrorCode_ErrFoundationNotComponent = 1000031;
  ErrorCode_ErrFoundationActived = 1000032;
  ErrorCode_ErrFoundationUnActived = 1000033;
  ErrorCode_ErrFoundationNotMatch = 1000034;
  ErrorCode_ErrFoundationNotInRange = 1000035;
  ErrorCode_ErrFoundationNotStateId = 1000036;
  ErrorCode_ErrGravityGearNotExists = 1000037;
  ErrorCode_ErrGravityGearNotConfig = 1000038;
  ErrorCode_ErrGravityGearForbidReset = 1000039;
  ErrorCode_ErrFollowTrackEntityNoExist = 1000040;
  ErrorCode_ErrFollowTrackNotComp = 1000041;
  ErrorCode_ErrFollowTrackNotFoundationId = 1000042;
  ErrorCode_ErrFollowTrackNotFoundation = 1000043;
  ErrorCode_ErrFollowTrackActiveed = 1000044;
  ErrorCode_ErrThrowPlayerNotExit = 1000045;
  ErrorCode_ErrAnimalEntityNotExist = 1000046;
  ErrorCode_ErrNotAnimalEntity = 1000047;
  ErrorCode_ErrSneakBtObjNotExist = 1000048;
  ErrorCode_ErrSneakNodeIdNotExist = 1000049;
  ErrorCode_ErrSneakNotFailedNode = 1000050;
  ErrorCode_ErrSneakNotTime = 1000051;
  ErrorCode_ErrSneakTime = 1000052;
  ErrorCode_ErrInSneak = 1000053;
  ErrorCode_ErrNotInSneak = 1000054;
  ErrorCode_ErrBeControlledEntityNotExist = 1000055;
  ErrorCode_ErrNotBeControlledEntity = 1000056;
  ErrorCode_ErrNotBeControlledPlayer = 1000057;
  ErrorCode_ErrNotBeControlledNotPlayer = 1000058;
  ErrorCode_ErrBeControlledShowEntityNotExist = 1000059;
  ErrorCode_ErrNotBeControlledShowEntity = 1000060;
  ErrorCode_ErrNotBeControlledShowPlayer = 1000061;
  ErrorCode_ErrBeControlledShowNoChange = 1000062;
  ErrorCode_ErrGravityGearCondition = 1000063;
  ErrorCode_ErrChairEntityNoExist = 1000064;
  ErrorCode_ErrChairSitDownErr = 1000065;
  ErrorCode_ErrChairEntity = 1000066;
  ErrorCode_ErrPlayerAlreadySit = 1000067;
  ErrorCode_ErrChairNotStateConfig = 1000068;
  ErrorCode_ErrSneakBtObjIncId = 1000069;
  ErrorCode_ErrTimelineMove = 1000070;
  ErrorCode_ErrBeControlledConfig = 1000071;
  ErrorCode_ErrBeControlledThrow = 1000072;
  ErrorCode_ErrBeControlledTimeNull = 1000073;
  ErrorCode_ErrTriggerEnterActionEffective = 1000074;
  ErrorCode_ErrTriggerLeaveActionEffective = 1000075;
  ErrorCode_ErrTriggerLastActionStateError = 1000076;
  ErrorCode_GuideGroupInfoIsNull = 1100000;
  ErrorCode_GuideStateError = 1100001;
  ErrorCode_GuideConfigNotFind = 1100002;
  ErrorCode_GuideNoEnough = 1100003;
  ErrorCode_GuideIsFinish = 1100004;
  ErrorCode_GuidePerIsNotFinish = 1100005;
  ErrorCode_GuideNoCondition = 1100006;
  ErrorCode_GuideNoCurGroup = 1100007;
  ErrorCode_GuideIsServerMonitor = 1100008;
  ErrorCode_GuideNoPending = 1100009;
  ErrorCode_GuideStepRepeat = 1100010;
  ErrorCode_GuideGroupNoClient = 1100011;
  ErrorCode_GuideGroupDoing = 1100012;
  ErrorCode_GuideGroupIsNotRepeat = 1100013;
  ErrorCode_GuideTutorialConfigNotFind = 1100014;
  ErrorCode_GuideTutorialIsUnlock = 1100015;
  ErrorCode_GuideTutorialNotUnlock = 1100016;
  ErrorCode_GuideTutorialIsReceive = 1100017;
  ErrorCode_GuideTutorialAwardConfigNotFind = 1100018;
  ErrorCode_GuideTutorialAwardError = 1100019;
  ErrorCode_GuideGroupIdNoMatch = 1100020;
  ErrorCode_ErrRequestTypeNotExist = 1100021;
  ErrorCode_ErrIllustratedEntryLock = 1100022;
  ErrorCode_ErrIllustratedEntryBanUnlock = 1100023;
  ErrorCode_ErrRequestTypeMax = 1100024;
  ErrorCode_AchievementEntryNotExist = 1100025;
  ErrorCode_AchievementEntryNotFinish = 1100026;
  ErrorCode_AchievementEntryIsReceive = 1100027;
  ErrorCode_AchievementEntryNoConfig = 1100028;
  ErrorCode_AchievementEntryNotOpen = 1100029;
  ErrorCode_AchievementGroupEntryNotExist = 1100030;
  ErrorCode_AchievementGroupEntryNotFinish = 1100031;
  ErrorCode_AchievementGroupEntryIsReceive = 1100032;
  ErrorCode_AchievementGroupEntryNoConfig = 1100033;
  ErrorCode_AchievementGroupEntryNotOpen = 1100034;
  ErrorCode_SilentAreaNotConfig = 1100035;
  ErrorCode_SilentAreaNotUnlock = 1100036;
  ErrorCode_SilentAreaNotFinish = 1100037;
  ErrorCode_SilentAreaReceive = 1100038;
  ErrorCode_AchievementEntryIsFinish = 1100039;
  ErrorCode_AchievementEntryNeedCondition = 1100040;
  ErrorCode_AchievementSceneNotFind = 1100041;
  ErrorCode_BirthdayIsSetting = 1100042;
  ErrorCode_BirthdayInValid = 1100043;
  ErrorCode_RoleShowListMaxCount = 1100044;
  ErrorCode_RoleShowListHasRepeatId = 1100045;
  ErrorCode_RoleShowListHasInValidId = 1100046;
  ErrorCode_CardShowListMaxCount = 1100047;
  ErrorCode_CardShowListHasRepeatId = 1100048;
  ErrorCode_CardShowListHasInValidId = 1100049;
  ErrorCode_CardRepeatSet = 1100050;
  ErrorCode_CardIsInValidId = 1100051;
  ErrorCode_CardIsRead = 1100052;
  ErrorCode_RoleShowListEmpty = 1100053;
  ErrorCode_SettingNotFind = 1100054;
  ErrorCode_RogueRoadConfigNotFind = 1100055;
  ErrorCode_RollRogueRoomError = 1100056;
  ErrorCode_RollRogueBuffError = 1100057;
  ErrorCode_GetRogueRoomIdsError = 1100058;
  ErrorCode_GetRoguePortalEntityNotFind = 1100059;
  ErrorCode_GetRoguePortalLocationNotFind = 1100060;
  ErrorCode_HttpTimeout = 1100061;
  ErrorCode_HttpResultUndefine = 1100062;
  ErrorCode_ConvGateTimeout = 1100063;
  ErrorCode_ProtoKeyTimeout = 1100064;
  ErrorCode_LoginReqTimeout = 1100065;
  ErrorCode_EnterGameTimeout = 1100066;
  ErrorCode_ReReconvReqTimeout = 1100067;
  ErrorCode_RecvSeqNoNotHit = 1100068;
  ErrorCode_AchievementFuncNotOpen = 1100069;
  ErrorCode_RoguelikeInstComponentNotFind = 1100070;
  ErrorCode_RogueCurRoomDataIsNull = 1100071;
  ErrorCode_LevelPlayComponentNotFind = 1100072;
  ErrorCode_OpenLevelPlayFail = 1100073;
  ErrorCode_CloseLevelPlayFail = 1100074;
  ErrorCode_RogueRoomConfigNotFind = 1100075;
  ErrorCode_RogueRoomTypeNotRight = 1100076;
  ErrorCode_RogueRoomTypeNotConfig = 1100077;
  ErrorCode_RogueRoomSubLevelNotFind = 1100078;
  ErrorCode_SelectNextRoomIsValid = 1100079;
  ErrorCode_RogueGainPackageFail = 1100080;
  ErrorCode_RogueGainListIsNull = 1100081;
  ErrorCode_RogueGainIdValid = 1100082;
  ErrorCode_QulityListCountNotRight = 1100083;
  ErrorCode_RandomResultCountNotRight = 1100084;
  ErrorCode_GuaranteeRogueBuffInValid = 1100085;
  ErrorCode_RoleBuffPoolNotFind = 1100086;
  ErrorCode_NotValidBuff = 1100087;
  ErrorCode_NotValidPhantom = 1100088;
  ErrorCode_RandomPhantomFail = 1100089;
  ErrorCode_NotValidRole = 1100090;
  ErrorCode_RandomRoleFail = 1100091;
  ErrorCode_RogueRoadNotFind = 1100092;
  ErrorCode_ResultCountNotMatch = 1100093;
  ErrorCode_InValidRoomCountNotMatch = 1100094;
  ErrorCode_GuaranteeRogueRoomInValid = 1100095;
  ErrorCode_InstIdNotMatchLevelPlayId = 1100096;
  ErrorCode_GetRoomBornPositionFail = 1100097;
  ErrorCode_RoguePortalDataNotClean = 1100098;
  ErrorCode_RoguePortalRoomDataNotFind = 1100099;
  ErrorCode_RogueSelectRoomFail = 1100100;
  ErrorCode_RogueProgressDataIsEmpty = 1100101;
  ErrorCode_RogueGainTypeIsValid = 1100102;
  ErrorCode_RougeNotOpen = 1100103;
  ErrorCode_RougeInstIdIsValid = 1100104;
  ErrorCode_RogueRoleListCountNotRight = 1100105;
  ErrorCode_RogueMainRoleConfigNotFind = 1100106;
  ErrorCode_RogueGainDataDictError = 1100107;
  ErrorCode_RogueDiscountedBuffConfigNotFind = 1100108;
  ErrorCode_RogueDiscountedRoomTypeConfigNotFind = 1100109;
  ErrorCode_RogueDiscountedShopConfigNotFind = 1100110;
  ErrorCode_RogueDiscountedCalculateFail = 1100111;
  ErrorCode_RogueMoneyNotEnough = 1100112;
  ErrorCode_RougeShopRefreshTimeEmpyt = 1100113;
  ErrorCode_RougeCurRoomNotFinish = 1100114;
  ErrorCode_PlayerDataRepairErrorDebug = 1100115;
  ErrorCode_PlayerDataRepairError = 1100116;
  ErrorCode_CreateCharacterReqTimeout = 1100117;
  ErrorCode_SignActivityNotOpen = 1100118;
  ErrorCode_SignActivityNoConfig = 1100119;
  ErrorCode_SignActivityIndexValid = 1100120;
  ErrorCode_SignActivityNoData = 1100121;
  ErrorCode_SignActivityStateNotRight = 1100122;
  ErrorCode_RogueSeasonDataNull = 1100123;
  ErrorCode_RogueSeasonConfigNotFind = 1100124;
  ErrorCode_RogueTokenConfigNotFind = 1100125;
  ErrorCode_RogueTokenStatusVaild = 1100126;
  ErrorCode_RogueSeasonRewardConfigNotFind = 1100127;
  ErrorCode_RogueSeasonRewardIsReceive = 1100128;
  ErrorCode_RougeSeasonPointNotEnough = 1100129;
  ErrorCode_RougeRoomDataError = 1100130;
  ErrorCode_RogueGainDataError = 1100131;
  ErrorCode_RogueRoleIdsError = 1100132;
  ErrorCode_RogueRogueRoomRouteError = 1100133;
  ErrorCode_RogueGetCurRoomLevelPlayError = 1100134;
  ErrorCode_RogueTalentTreeConfigNotFind = 1100135;
  ErrorCode_RogueTalentTreeConditionNotMet = 1100136;
  ErrorCode_RogueTalentTreePerNodeLock = 1100137;
  ErrorCode_RogueTalentTreeNodeMaxLevel = 1100138;
  ErrorCode_RogueTalentTreeConsumeNoEnough = 1100139;
  ErrorCode_RogueRoadRandomRoleBuffError = 1100140;
  ErrorCode_ActivityFuncNotOpen = 1100141;
  ErrorCode_RogueGuideInstNotSupport = 1100142;
  ErrorCode_ErrPayReceiptCannotRefundClose = 1100143;
  ErrorCode_ErrPayReceiptRefundCloseFail = 1100144;
  ErrorCode_PayRefundOverdueBan = 1100145;
  ErrorCode_UnknowChannelId = 1100146;
  ErrorCode_LoginServerNotFind = 1100147;
  ErrorCode_OldGameNodeLogoutFail = 1100148;
  ErrorCode_LoginHandleSwitchError = 1100149;
  ErrorCode_NoAvailableLoginService = 1100150;
  ErrorCode_ServerIsClosing = 1100151;
  ErrorCode_AddPlayerRecordFail = 1100152;
  ErrorCode_FindGatewayFail = 1100153;
  ErrorCode_CommonFightRolesInfoError = 1100154;
  ErrorCode_CurRoleEntityNotFind = 1100155;
  ErrorCode_ScenePlayerInfoNotFind = 1100156;
  ErrorCode_IncrAdviceVoteError = 1100157;
  ErrorCode_InsertAdviceError = 1100158;
  ErrorCode_UpdateAdviceError = 1100159;
  ErrorCode_DeleteAdviceError = 1100160;
  ErrorCode_EntityNoInWater = 1100161;
  ErrorCode_AttributeComponentNotFind = 1100162;
  ErrorCode_TryAddItemDataFail = 1100163;
  ErrorCode_ItemConfigTypeNotRight = 1100164;
  ErrorCode_ItemLogicNotFind = 1100165;
  ErrorCode_RemoveItemLogicNotFind = 1100166;
  ErrorCode_AddItemLogicNotFind = 1100167;
  ErrorCode_AddItemFail = 1100168;
  ErrorCode_UpdatePlayerARemarkFail = 1100169;
  ErrorCode_DeleteFriendApplyFail = 1100170;
  ErrorCode_DeleteFriendshipFail = 1100171;
  ErrorCode_WorldTeamIsNull = 1100172;
  ErrorCode_TeamCountNotRight = 1100173;
  ErrorCode_AddCalabashExpFail = 1100174;
  ErrorCode_SendRequestToSdkFail = 1100175;
  ErrorCode_DirtyWordErrorCode = 1100176;
  ErrorCode_HarvestActivityNotOpen = 1100177;
  ErrorCode_HarvestActivityPointReceived = 1100178;
  ErrorCode_HarvestActivityPointNotConfig = 1100179;
  ErrorCode_HarvestActivityPointNotEnough = 1100180;
  ErrorCode_HarvestActivityLevelNoData = 1100181;
  ErrorCode_HarvestActivityLevelReceived = 1100182;
  ErrorCode_HarvestActivityLevelNotConfig = 1100183;
  ErrorCode_HarvestActivityLevelNotEnough = 1100184;
  ErrorCode_HarvestActivityLevelDiffNotConfig = 1100185;
  ErrorCode_RoguelikeEventConfigNotFind = 1100186;
  ErrorCode_RoguelikeEventIndexError = 1100187;
  ErrorCode_RoguelikeInstConfigNotFind = 1100188;
  ErrorCode_RoguelikeMainRoleError = 1100189;
  ErrorCode_RoguelikeEventIsEmpty = 1100190;
  ErrorCode_RoguelikeEventRandomError = 1100191;
  ErrorCode_RoguelikeEventRandomEmpty = 1100192;
  ErrorCode_PhantomCollectActivityNotOpen = 1100193;
  ErrorCode_PhantomCollectActivitynNotConfig = 1100194;
  ErrorCode_PhantomCollectActivitynNoData = 1100195;
  ErrorCode_PhantomCollectActivityReceived = 1100196;
  ErrorCode_HarvestInstIdInValid = 1100197;
  ErrorCode_HarvestVarNotExist = 1100198;
  ErrorCode_HarvestResultCacheNotExist = 1100199;
  ErrorCode_HarvestInstNotOpen = 1100200;
  ErrorCode_HarvestActivityLimitDataNotFind = 1100201;
  ErrorCode_HarvestDiffConfigNotFind = 1100202;
  ErrorCode_HarvestActivityDiffConfigNotFind = 1100203;
  ErrorCode_ErrIllustratedConfigNotFind = 1100204;
  ErrorCode_CharacterAlreadyCreated = 1100205;
  ErrorCode_SdkHelperInternalError = 1100206;
  ErrorCode_GameServiceControllerInternalError = 1100207;
  ErrorCode_DoGetCacheInfoInternalError = 1100208;
  ErrorCode_DoGetCacheInfosInternalError = 1100209;
  ErrorCode_DeleteFriendLoadedInternalError = 1100210;
  ErrorCode_UpdateFriendRemarkInternalError = 1100211;
  ErrorCode_CheckApplyRequestInternalError = 1100212;
  ErrorCode_OnReLoginInternalError = 1100213;
  ErrorCode_CreateCharacterRequestInternalError = 1100214;
  ErrorCode_LoginRequestInternalError = 1100215;
  ErrorCode_LoginRequestInternalError2 = 1100216;
  ErrorCode_EnterGameRequestInternalError = 1100217;
  ErrorCode_ReconnectRequestInternalError = 1100218;
  ErrorCode_ReconnectRequestInternalError2 = 1100219;
  ErrorCode_SwitchNodeInternalError = 1100220;
  ErrorCode_InnerLoginInternalError = 1100221;
  ErrorCode_AccessTokenInternalError = 1100222;
  ErrorCode_CreateCharacterInternalError = 1100223;
  ErrorCode_RogueSeasonNotValid = 1100224;
  ErrorCode_RogueCurRoleNotFind = 1100225;
  ErrorCode_RogueSeasonNotMatch = 1100226;
  ErrorCode_RogueGainLogicNotFind = 1100227;
  ErrorCode_RogueBuffConfigNotFind = 1100228;
  ErrorCode_RoguePhantomNotConfig = 1100229;
  ErrorCode_RogueRoleNotConfig = 1100230;
  ErrorCode_RoguePopularSlotConfigNotFind = 1100231;
  ErrorCode_RoguePopularCountIsMax = 1100232;
  ErrorCode_RoguePopularConfigNotFind = 1100233;
  ErrorCode_RogueRoleNotOpen = 1100234;
  ErrorCode_RogueGuideInstError = 1100235;
  ErrorCode_RogueMainRoleChange = 1100236;
  ErrorCode_RogueShopConfigNull = 1100237;
  ErrorCode_RogueGainIsSelect = 1100238;
  ErrorCode_RogueGainNoRefresh = 1100239;
  ErrorCode_RogueRefreshCostNotFind = 1100240;
  ErrorCode_RogueNotMaxLayer = 1100241;
  ErrorCode_RogueRoomSubLevelNotFind2 = 1100242;
  ErrorCode_RoguePopularSlotArgConfigNotFind = 1100243;
  ErrorCode_RogueInstSeasonNotMatch = 1100244;
  ErrorCode_RogueSeasonTalentTreeNotFind = 1100245;
  ErrorCode_RogueGainOptionsNotFind = 1100246;
  ErrorCode_RogueGainIsSell = 1100247;
  ErrorCode_RogueMiracleCreationConfNotFind = 1100248;
  ErrorCode_RogueGainPackageError = 1100249;
  ErrorCode_RogueTrialRoleIdsCountNotRight = 1100250;
  ErrorCode_RogueVarNotExist = 1100251;
  ErrorCode_RougeWhiteCatConfigNotFind = 1100252;
  ErrorCode_RougeWhiteCatNotOpen = 1100253;
  ErrorCode_RougeWhiteCatLimitedTime = 1100254;
  ErrorCode_RougeWhiteCatRewardLock = 1100255;
  ErrorCode_RougeWhiteCatRewardIsReceive = 1100256;
  ErrorCode_RougeWhiteCatRewardIndexErr = 1100257;
  ErrorCode_RougeWhiteCatInstIndexErr = 1100258;
  ErrorCode_RougeWhiteCatInstLock = 1100259;
  ErrorCode_RougeWhiteCatBossRewardIndexErr = 1100260;
  ErrorCode_RougeWhiteCatBossRewardLock = 1100261;
  ErrorCode_RougeWhiteCatBossRewardIsReceive = 1100262;
  ErrorCode_RougeWhiteCatLevelPlayIndexErr = 1100263;
  ErrorCode_RougeWhiteCatLevelPlayLock = 1100264;
  ErrorCode_RougeWhiteCatLevelPlayIsReceive = 1100265;
  ErrorCode_ResourceVersionTooLow = 1100266;
  ErrorCode_RogueLimitTimeRewardConfigNotFind = 1100267;
  ErrorCode_RogueWhiteCatLimitedTimeOut = 1100268;
  ErrorCode_RougeWhiteCatLimitedRewardLock = 1100269;
  ErrorCode_RougeWhiteCatLimitedRewardIsReceive = 1100270;
  ErrorCode_RougeWhiteCatBlackFlowerNoCount = 1100271;
  ErrorCode_RogueInstCountNotRight = 1100272;
  ErrorCode_RogueInstFightFormationNotConfig = 1100273;
  ErrorCode_RogueTrialRoleNotValid = 1100274;
  ErrorCode_RogueRoleNotValid = 1100275;
  ErrorCode_ErrorBlackFlowerEntityNotRight = 1100276;
  ErrorCode_ErrorBlackFlowerStatus = 1100277;
  ErrorCode_ErrorBlackFlowerCanNotReward = 1100278;
  ErrorCode_ErrorBlackFlowerRewardFail = 1100279;
  ErrorCode_ErrChatNotFriendNorOnline = 1200000;
  ErrorCode_ErrChatContentFilterFailed = 1200001;
  ErrorCode_ErrChatLockState = 1200002;
  ErrorCode_ErrChatEmojiNotValid = 1200003;
  ErrorCode_ErrChatSendTooFast = 1200004;
  ErrorCode_ErrChatMuteNotValidId = 1200005;
  ErrorCode_ErrBanChatDefault = 1200006;
  ErrorCode_ErrRoleQuestFuncNotOpen = 1200007;
  ErrorCode_ErrRoleQuestMaxCount = 1200008;
  ErrorCode_ErrRoleQuestUnlockPointNotEnough = 1200009;
  ErrorCode_ErrDailyQuestNotFoundArea = 1200010;
  ErrorCode_ErrDailyQuestNotFoundInfluence = 1200011;
  ErrorCode_ErrDailyQuestRewardAlreadyGet = 1200012;
  ErrorCode_ErrDailyQuestDataError = 1200013;
  ErrorCode_ErrDailyQuestCantGetReward = 1200014;
  ErrorCode_ErrEntityBuffProducerStateError = 1200015;
  ErrorCode_ErrEntityBuffProducerNotFound = 1200016;
  ErrorCode_ErrVoiceRemainChangeRoleNotInFormation = 1200017;
  ErrorCode_ErrVoiceRemainChangeRoleNotAlive = 1200018;
  ErrorCode_ErrApplyEffectFail = 1300000;
  ErrorCode_ErrOutofBattleTargetNotMonster = 1300001;
  ErrorCode_ErrMonsterBoomEntityNotExists = 1300002;
  ErrorCode_ErrMonsterBoomNotMonster = 1300003;
  ErrorCode_ErrMonsterBoomIsDead = 1300004;
  ErrorCode_ErrAnimationStateSpecialFuncException = 1300005;
  ErrorCode_ErrPayConfigNotFound = 1400000;
  ErrorCode_ErrPayCreateReceiptFail = 1400001;
  ErrorCode_ErrPayReceiptNotFound = 1400002;
  ErrorCode_ErrPayReceiptPlayerIdUnMatch = 1400003;
  ErrorCode_ErrPayReceiptCannotDealClose = 1400004;
  ErrorCode_ErrPayReceiptDealCloseFail = 1400005;
  ErrorCode_ErrPayNotEnable = 1400006;
  ErrorCode_ErrPayDataChanged = 1400007;
  ErrorCode_ErrPayUpdateReceiptFail = 1400008;
  ErrorCode_ErrGachaConfigNotFound = 1400009;
  ErrorCode_ErrGachaRuleGroupConfigNotFound = 1400010;
  ErrorCode_ErrGachaRulesNotFound = 1400011;
  ErrorCode_ErrGachaTypeKnowns = 1400012;
  ErrorCode_ErrGachaDailyTimesLimit = 1400013;
  ErrorCode_ErrGachaTotalTimesLimit = 1400014;
  ErrorCode_ErrGachaDailyTotalTimesLimit = 1400015;
  ErrorCode_ErrGachaIsNotOpen = 1400016;
  ErrorCode_ErrGachaIsNotInOpenTime = 1400017;
  ErrorCode_ErrGachaFuncIsNotOpen = 1400018;
  ErrorCode_ErrItemExchageConfigNotFound = 1400019;
  ErrorCode_ErrItemExchageDailyTimesLimit = 1400020;
  ErrorCode_ErrItemExchangeTotalTimesLimit = 1400021;
  ErrorCode_ErrGachaLimitNotFound = 1400022;
  ErrorCode_ErrGachaLimitsEmpty = 1400023;
  ErrorCode_ErrTextServerTimeout = 1400024;
  ErrorCode_ErrTextServerResFail = 1400025;
  ErrorCode_ErrTextServerResEmpty = 1400026;
  ErrorCode_ErrTextServerResException = 1400027;
  ErrorCode_ErrItemExchageParamError = 1400028;
  ErrorCode_ErrBattlePassFuncIsNotOpen = 1400029;
  ErrorCode_ErrPayShopFuncIsNotOpen = 1400030;
  ErrorCode_ErrGachaPoolConfigNotFound = 1400031;
  ErrorCode_ErrGachaPoolIsNotOpen = 1400032;
  ErrorCode_ErrGachaPoolIsNotInOpenTime = 1400033;
  ErrorCode_ErrGachaPoolLimitNotFound = 1400034;
  ErrorCode_ErrGachaPoolNotBelongToGacha = 1400035;
  ErrorCode_ErrGachaUsePoolIdNotSet = 1400036;
  ErrorCode_ErrGachaTimesNonsupport = 1400037;
  ErrorCode_ErrGachaFrontRuleGroupNotFinish = 1400038;
  ErrorCode_ErrGachaRuleGroupFinish = 1400039;
  ErrorCode_ErrPayGiftBuyLimit = 1400040;
  ErrorCode_ErrPayGiftTypeUnknown = 1400041;
  ErrorCode_ErrPayGiftNotInSellTime = 1400042;
  ErrorCode_ErrBattlePassBuyLevelLimit = 1400043;
  ErrorCode_ErrBattlePassBuyLevelError = 1400044;
  ErrorCode_ErrJsFileNotFound = 1400045;
  ErrorCode_ErrPayReceiptIsRefunded = 1400046;
  ErrorCode_ErrPayReceiptIsNotPay = 1400047;
  ErrorCode_ErrPayReceiptRefundFail = 1400048;
  ErrorCode_ErrPayGiftLocked = 1400049;
  ErrorCode_ErrPayGiftBuyConditionLimit = 1400050;
  ErrorCode_ErrMapMarkConfigIdNotExist = 1400051;
  ErrorCode_ErrTreasureSlotMarkNotExist = 1400052;
  ErrorCode_ErrTreasureBoxMarkNotExist = 1400053;
  ErrorCode_ErrTreasureSlotMarkExist = 1400054;
  ErrorCode_ErrMapMarkTypeNotCustom = 1400055;
  ErrorCode_ErrInfoDisplayId = 1500000;
  ErrorCode_ErrItemAlreadyInCd = 1500001;
  ErrorCode_ErrCantFinAdventureConfig = 1500002;
  ErrorCode_ErrAdventureRewardReceived = 1500003;
  ErrorCode_ErrAdventureTaskCache = 1500004;
  ErrorCode_ErrAdventureState = 1500005;
  ErrorCode_ErrAdventureRewardOrder = 1500006;
  ErrorCode_ErrAdventureChapterState = 1500007;
  ErrorCode_ErrCantDetectRepeat = 1500008;
  ErrorCode_ErrNotInCurrentFollowList = 1500009;
  ErrorCode_ErrCantDetectOtherDetectionType = 1500010;
  ErrorCode_ErrNotSelectCurrentDetectionId = 1500011;
  ErrorCode_ErrDetectionConfigNotFound = 1500012;
  ErrorCode_ErrDetectionListCantBeEmpty = 1500013;
  ErrorCode_ErrCantFindAnyDetectionTarget = 1500014;
  ErrorCode_ErrCantFindTurntableComponentEntity = 1500015;
  ErrorCode_ErrHaveNoTurntableControlComponent = 1500016;
  ErrorCode_ErrCantFindLevitationMagnetComponentEntity = 1500017;
  ErrorCode_ErrHaveNoLevitaionMagnetComponent = 1500018;
  ErrorCode_ErrCantFindBoardEntity = 1500019;
  ErrorCode_ErrCantFindPlacementEntity = 1500020;
  ErrorCode_ErrHaveNoPlacementComponent = 1500021;
  ErrorCode_ErrCantFindBoardEntityComponent = 1500022;
  ErrorCode_ErrBoardHaveNoAnyPlacement = 1500023;
  ErrorCode_ErrBoardNotActiveAllGrid = 1500024;
  ErrorCode_ErrNeedBeControlledBefore = 1500025;
  ErrorCode_ErrPlaceFailOfAlreadyOnBoard = 1500026;
  ErrorCode_ErrInvalidBoardPosition = 1500027;
  ErrorCode_ErrNeedRemoveControlRelation = 1500028;
  ErrorCode_ErrNotOccupyOnBoard = 1500029;
  ErrorCode_ErrHaveNoFillRule = 1500030;
  ErrorCode_ErrGridPosAlreadyOccupied = 1500031;
  ErrorCode_ErrHaveNoJigsawFoundationConfig = 1500032;
  ErrorCode_ErrInvalidGridPos = 1500033;
  ErrorCode_ErrGridPosAlreadyActive = 1500034;
  ErrorCode_ErrCantPlaceItemOnBoard = 1500035;
  ErrorCode_ErrNeedJigsawFoundationComponentWhenBeControlled = 1500036;
  ErrorCode_ErrHaveNoBoardComponentConfig = 1500037;
  ErrorCode_ErrNeedJigsawItemComponentWhenBeControlled = 1500038;
  ErrorCode_ErrCantFindOriginBoardEntity = 1500039;
  ErrorCode_ErrDistanceNotInRangeBetweenEntity = 1500040;
  ErrorCode_ErrJigsawFoundationIsAlreadySilent = 1500041;
  ErrorCode_ErrCrystalEntityNotFound = 1500042;
  ErrorCode_ErrGachaBoardEntityNotFound = 1500043;
  ErrorCode_ErrNotCrystalEntity = 1500044;
  ErrorCode_ErrNotGachaFoundationEntity = 1500045;
  ErrorCode_ErrGachaHoleIsFull = 1500046;
  ErrorCode_ErrJigsawItemSilent = 1500047;
  ErrorCode_ErrThrowDamageConfigNotExists = 1500048;
  ErrorCode_ErrThrowDamageComponetNotExists = 1500049;
  ErrorCode_ErrEggNotMatchEggFoundation = 1500050;
  ErrorCode_ProgressBarEntityNotFound = 1500051;
  ErrorCode_NotProgressBarEntity = 1500052;
  ErrorCode_ProgressBarIsSilent = 1500053;
  ErrorCode_ScenePlayerInfoNotFound = 1500054;
  ErrorCode_PlayerNotInAnyScene = 1500055;
  ErrorCode_TeleportNotInValidDistance = 1500056;
  ErrorCode_AddMapMarkInfoLackOfTeleportParam = 1500057;
  ErrorCode_TemporaryTeleportNotExists = 1500058;
  ErrorCode_ErrNotHostPlayer = 1500059;
  ErrorCode_ErrMarkIdNotExists = 1500060;
  ErrorCode_ErrCantUpdateTemporaryTeleportMarkInfo = 1500061;
  ErrorCode_NotHostCantAddTemporaty = 1500062;
  ErrorCode_TemporaryTeleportPosIsNotWalkable = 1500063;
  ErrorCode_BadTemporaryTeleportConfig = 1500064;
  ErrorCode_HaveNoTemporaryTeleportComponent = 1500065;
  ErrorCode_ErrCantDetectAtInvalidPoint = 1500066;
  ErrorCode_ErrNotDetectionTreasureBoxBefore = 1500067;
  ErrorCode_ErrJigsawFoundationIsCompleteCantModifyGridState = 1500068;
  ErrorCode_GridIsActiveCantSwitchState = 1500069;
  ErrorCode_GridIsOccupiedCantSwitchState = 1500070;
  ErrorCode_ErrHaveNoBaseInfoComponent = 1500071;
  ErrorCode_ErrHaveNoParentEntity = 1500072;
  ErrorCode_NotRelationEntity = 1500073;
  ErrorCode_ErrLevelPlayNotRunning = 1500074;
  ErrorCode_ErrStateCantChangeWhenLifeCycleDestroy = 1500075;
  ErrorCode_ErrRangeEntityIdNotFoundWhenForbidTempTeleport = 1500076;
  ErrorCode_TemporaryTeleportIsForbidden = 1500077;
  ErrorCode_ErrGravityGearIsComplete = 1500078;
  ErrorCode_ErrInvalidRoleWhenUpdatePassiveSkill = 1500079;
  ErrorCode_ErrInvalidRolePassiveSkillId = 1500080;
  ErrorCode_ErrPassiveSkillNotAddBuff = 1500081;
  ErrorCode_ErrPassiveSkillCantSpecifyBuff = 1500082;
  ErrorCode_ErrPassiveSkillAddBuffFail = 1500083;
  ErrorCode_ErrPassiveSkillAddBulletFail = 1500084;
  ErrorCode_ErrBuffCreatePassiveSkillFail = 1500085;
  ErrorCode_ErrInvalidPreContext = 1500086;
  ErrorCode_ErrBadPassiveSkillId = 1500087;
  ErrorCode_ErrPassiveSkillComponentNotFound = 1500088;
  ErrorCode_ErrRepeatePassiveSkill = 1500089;
  ErrorCode_ErrBadPassiveSkillTriggerType = 1500090;
  ErrorCode_ErrAddPassiveSkillFailOfEntityNotFound = 1500091;
  ErrorCode_ErrEntityNotClientControlWhenAddPassiveSkill = 1500092;
  ErrorCode_ErrEntityNotClientControlWhenRemovePassiveSkill = 1500093;
  ErrorCode_ErrPassiveSkillNotFoundWhenRemovePassiveSkill = 1500094;
  ErrorCode_ErrRepeatedBattleContext = 1500095;
  ErrorCode_ErrPassiveSkillAddSkillFail = 1500096;
  ErrorCode_ErrCombatSendPackAbnormal = 1500097;
  ErrorCode_ErrContextCheckFail = 1500098;
  ErrorCode_ErrFsmComponentNotFound = 1500099;
  ErrorCode_ErrFsmCreateContextFail = 1500100;
  ErrorCode_ErrFsmStateBehaviorPreMessageCantBeZero = 1500101;
  ErrorCode_ErrFsmBehaviorCheckBattleContextFail = 1500102;
  ErrorCode_ErrFsmPlayMontageLackPreMessage = 1500103;
  ErrorCode_ErrFsmPlayMontageCheckContextFail = 1500104;
  ErrorCode_ErrFsmPlayMontageConfigCheckFail = 1500105;
  ErrorCode_ErrSkillFlowNotExist = 1500106;
  ErrorCode_ErrGetReportDataOverLimit = 1500107;
  ErrorCode_ErrGetReportDataTooFast = 1500108;
  ErrorCode_ErrNotInAnyScene = 1500109;
  ErrorCode_ErrAceLogDataNotFound = 1500110;
  ErrorCode_ErrAceLogDataRepeatReport = 1500111;
  ErrorCode_ErrAceInvalidLogId = 1500112;
  ErrorCode_ErrAceSceneGlobalObjNotFound = 1500113;
  ErrorCode_ErrAceBadParam = 1500114;
  ErrorCode_ErrS2CConfirmIdNotExists = 1500115;
  ErrorCode_ErrPassiveSkillConfigNotFound = 1500116;
  ErrorCode_ErrNotBehaviorController = 1500117;
  ErrorCode_ErrPlayMontageFail = 1500118;
  ErrorCode_ErrFightDataInConsistent = 1500119;
  ErrorCode_ErrNotInAoiSight = 1500120;
  ErrorCode_ErrPassiveSkillNotOwner = 1500121;
  ErrorCode_ErrReportStartFirstly = 1500122;
  ErrorCode_ErrCombatSkillGAHandleGetEntityFailed = 1600000;
  ErrorCode_ErrCombatMaterialHandleGetEntityFailed = 1600001;
  ErrorCode_ErrCombatParticleHandleGetEntityFailed = 1600002;
  ErrorCode_ErrCombatPartLifeChangeEntityNotExisted = 1600003;
  ErrorCode_ErrCombatCreateBulletTargetNotExisted = 1600004;
  ErrorCode_ErrCombatDeleteBulletTargetNotExisted = 1600005;
  ErrorCode_ErrCombatDeleteBulletGetEntityFailed = 1600006;
  ErrorCode_ErrCombatBulletTargetNoExist = 1600007;
  ErrorCode_ErrPartEntityNotExisted = 1600008;
  ErrorCode_ErrNoAiControlRights = 1600009;
  ErrorCode_ErrAiHateComponent = 1600010;
  ErrorCode_ErrSummonerPlayerControl = 1600011;
  ErrorCode_ErrConfDamageNotFound = 1600012;
  ErrorCode_ErrProcessDamageFailed = 1600013;
  ErrorCode_ErrInjuryFreeLandingTag = 1600014;
  ErrorCode_ErrNotFindActiveGameplayEffect = 1600015;
  ErrorCode_NotClientControlBuff = 1600016;
  ErrorCode_ErrBuffNoEffectConf = 1600017;
  ErrorCode_ErrBuffCannotCreateBullet = 1600018;
  ErrorCode_ErrBuffCannotCreateBuff = 1600019;
  ErrorCode_ErrNoBuffConf = 1600020;
  ErrorCode_ErrStoppedAi = 1600021;
  ErrorCode_ErrEntityIsNotAlive = 1600022;
  ErrorCode_ErrSummonCannotSwitchAiControl = 1600023;
  ErrorCode_ErrAiControlNotChange = 1600024;
  ErrorCode_ErrPlayerCannotControlEntity = 1600025;
  ErrorCode_ErrNotFoundBuffEffect = 1600026;
  ErrorCode_ErrBuffEffectAuthority = 1600027;
  ErrorCode_ErrConcomitantDestroy = 1600028;
  ErrorCode_ErrPlayerFollowersComponent = 1600029;
  ErrorCode_ErrEntityFsmMachineNotExist = 1700000;
  ErrorCode_ErrEntityFsmStateIncorrect = 1700001;
  ErrorCode_ErrIsNotAiControler = 1700002;
  ErrorCode_ErrIEntityFsmCantTransit = 1700003;
  ErrorCode_ErrIEntityFsmTransitCondition = 1700004;
  ErrorCode_ErrIEntityFsmTransitToState = 1700005;
  ErrorCode_ErrIEntityFsmConfirmNotExist = 1700006;
  ErrorCode_ErrIEntityFsmConfirmNotWait = 1700007;
  ErrorCode_ErrITest = 1700008;
  ErrorCode_ErrITest1 = 1700009;
  ErrorCode_ErrITest2 = 1700010;
  ErrorCode_ErrIEntityFsmCondCantPass = 1700011;
  ErrorCode_ErrIEntityFsmActionParamType = 1700012;
  ErrorCode_ErrIEntityFsmActionParam = 1700013;
  ErrorCode_ErrIEntityFsmActionExecuted = 1700014;
  ErrorCode_ErrIEntityFsmActionNotMatchState = 1700015;
  ErrorCode_ErrSkillNotExecuting = 1700016;
  ErrorCode_ErrExecuteSkillNotMatch = 1700017;
  ErrorCode_ErrBlueprintPinNotSupport = 1700018;
  ErrorCode_ErrBlueprintPinNotMontage = 1700019;
  ErrorCode_ErrBlueprintPinMontageIndex = 1700020;
  ErrorCode_ErrConfSkillNotExist = 1700021;
  ErrorCode_ErrSkillGANotExist = 1700022;
  ErrorCode_ErrSkillGAHaveNoBuff = 1700023;
  ErrorCode_ErrSkillGAHaveNoBuffId = 1700024;
  ErrorCode_ErrSkillGAHaveNoBullet = 1700025;
  ErrorCode_ErrSkillGAHaveNoBulletId = 1700026;
  ErrorCode_ErrMontageNotMatchSkill = 1700027;
  ErrorCode_ErrMontageIndexError = 1700028;
  ErrorCode_ErrVisiionSkillNotEquip = 1700029;
  ErrorCode_ErrSkillCD = 1700030;
  ErrorCode_ErrHaveNoBattleContext = 1700031;
  ErrorCode_ErrContextFsmActionOnce = 1700032;
  ErrorCode_ErrPlayMontageButNoSkill = 1700033;
  ErrorCode_ErrMontageNotExist = 1700034;
  ErrorCode_ErrMontageNotContainBuff = 1700035;
  ErrorCode_ErrMontageNotContainBullet = 1700036;
  ErrorCode_ErrMontageCantBring = 1700037;
  ErrorCode_ErrSkillInfoParamError = 1700038;
  ErrorCode_ErrNoWorldTeam = 1800000;
  ErrorCode_ErrWorldTeamNoMember = 1800001;
  ErrorCode_ErrNoHostIs = 1800002;
  ErrorCode_ErrNoInstId = 1800003;
  ErrorCode_ErrNoTeamInfo = 1800004;
  ErrorCode_ErrHostNoTeamInfo = 1800005;
  ErrorCode_ErrHasInMatchTeam = 1800006;
  ErrorCode_ErrNotInMatchTeam = 1800007;
  ErrorCode_ErrHostIsParam = 1800008;
  ErrorCode_ErrMatchModeIParam = 1800009;
  ErrorCode_ErrMatchTeamFull = 1800010;
  ErrorCode_ErrLocalTeamCanNotOpt = 1800011;
  ErrorCode_ErrHostInLocalTeam = 1800012;
  ErrorCode_ErrNoMatchNodeId = 1800013;
  ErrorCode_ErrPlayerSceneIsNull = 1800014;
  ErrorCode_ErrPlayerSceneRolesNull = 1800015;
  ErrorCode_ErrInvalidMatchState = 1800016;
  ErrorCode_ErrRepeatedMatchState = 1800017;
  ErrorCode_ErrApplyrPlayerInMatchNotEnterMatchTeam = 1800018;
  ErrorCode_ErrOtherVersionLowNoOperate = 1800019;
  ErrorCode_ErrPlayerVersionLowNeedUpdate = 1800020;
  ErrorCode_ErrMultiGameModeNoWorldLevelDown = 1800021;
  ErrorCode_ErrMultiGameModeNoWorldLevelRegain = 1800022;
  ErrorCode_ErrOtherHasOnline = 1800023;
  ErrorCode_SwitchRoleNotInCurrentFormation = 1800024;
  ErrorCode_ErrNoChangeRoles = 1800025;
  ErrorCode_ErrExploreSkillPullGiantMultiGame = 1800026;
  ErrorCode_ErrExploreSkillPullGiantNotExist = 1800027;
  ErrorCode_ErrHttpRpcParam = 1800028;
  ErrorCode_ErrPlayerNotInGameNode = 1800029;
  ErrorCode_ErrApplyJoinPlayerCurRoleIsDead = 1800030;
  ErrorCode_ErrPlayerCurRoleIsDeadNoJoin = 1800031;
  ErrorCode_ErrPlayerCurRoleIsDead = 1800032;
  ErrorCode_ErrSwitchMultiverse = 1800033;
  ErrorCode_ErrSwitchNode = 1800034;
  ErrorCode_ErrMatchConfirmPlayerDead = 1800035;
  ErrorCode_ErrCheckPublicResourceVersionLower = 1800036;
  ErrorCode_ErrCheckPublicResourceVersionHigher = 1800037;
  ErrorCode_ErrCheckPublicResourceClientVersionErr = 1800038;
  ErrorCode_ErrCheckPublicResourceServerVersionErr = 1800039;
  ErrorCode_ErrCheckPublicResourceClientVersionParamErr = 1800040;
  ErrorCode_ErrCheckClientVersionNeedUpdate = 1800041;
  ErrorCode_ErrBranchNameNotMatch = 1800042;
  ErrorCode_ErrMatchRpcAlready = 1800043;
  ErrorCode_ErrOtherPlayerEnterHost = 1800044;
  ErrorCode_ErrPlayerEnterHost = 1800045;
  ErrorCode_ErrLevelPlayChangeSprotModeInMutile = 1800046;
  ErrorCode_ErrMatchingNotInvite = 1800047;
  ErrorCode_ErrEnableFunctionFB = 1800048;
  ErrorCode_ErrMatchSelectTrialRole = 1800049;
  ErrorCode_ErrMatchInviteMemberDead = 1800050;
  ErrorCode_ErrCalabashLevelRequest = 1900000;
  ErrorCode_ErrCalabashLevelRewardDone = 1900001;
  ErrorCode_ErrCalabashLevelConfig = 1900002;
  ErrorCode_ErrSkillTreeActiveConsume = 1900003;
  ErrorCode_ErrLoadFriendData = 1900004;
  ErrorCode_ErrNoLoadPrivateChatData = 1900005;
  ErrorCode_ErrNotInWolrd = 1900006;
  ErrorCode_ErrNotInGround = 1900007;
  ErrorCode_ErrInFighting = 1900008;
  ErrorCode_ErrNotHaveCountryAccess = 1900009;
  ErrorCode_ErrSkillIsEffect = 1900010;
  ErrorCode_ErrNoSoundBox = 1900011;
  ErrorCode_ErrConsumeNotEnough = 1900012;
  ErrorCode_ErrExploreSkillCountLimit = 1900013;
  ErrorCode_ErrLegalAreaNoTreasureBox = 1900014;
  ErrorCode_ErrTreasureBoxAllActive = 1900015;
  ErrorCode_ExploreProgressNoCountry = 1900016;
  ErrorCode_ExploreProgressNoScoreCfg = 1900017;
  ErrorCode_ExploreProgressLackProgress = 1900018;
  ErrorCode_ExploreProgressRewardDone = 1900019;
  ErrorCode_ExploreProgressNoArea = 1900020;
  ErrorCode_ExploreToolNotConfirm = 1900021;
  ErrorCode_ExploreToolNotOpen = 1900022;
  ErrorCode_ErrTreasureBoxPlaceFail = 1900023;
  ErrorCode_ErrTreasureBoxData = 1900024;
  ErrorCode_ErrPayShopBuyCondition = 1900025;
  ErrorCode_ErrGatherActivityData = 1900026;
  ErrorCode_ErrGatherTaskNoFinish = 1900027;
  ErrorCode_ErrHadGatherReward = 1900028;
  ErrorCode_ErrHadGetSharedReward = 1900029;
  ErrorCode_ErrSharedPlat = 1900030;
  ErrorCode_ErrTowerTargetComplete = 1900031;
  ErrorCode_ErrTowerGuideRewardHad = 1900032;
  ErrorCode_ErrTowerGuideNoOpen = 1900033;
  ErrorCode_ErrTowerGuideConfig = 1900034;
  ErrorCode_ErrNewBieCourseConfig = 1900035;
  ErrorCode_ErrNewBieCourseRewardHad = 1900036;
  ErrorCode_ErrNewBieCourseLevel = 1900037;
  ErrorCode_ErrDetectionTargetSilence = 1900038;
  ErrorCode_ErrRoleTrialNotInit = 1900039;
  ErrorCode_ErrRoleTrialNoFinish = 1900040;
  ErrorCode_ErrRoleTrialReward = 1900041;
  ErrorCode_ErrRoleTrialRewardDone = 1900042;
  ErrorCode_ErrAdventureTaskReward = 1900043;
  ErrorCode_ErrChapterReward = 1900044;
  ErrorCode_ErrSilentFirstPassStatus = 1900045;
  ErrorCode_ErrSilentFirstPassReward = 1900046;
  ErrorCode_ErrPayShopEchoRole = 1900047;
  ErrorCode_ErrPayShopEchoItemOver = 1900048;
  ErrorCode_ErrDailyAdventureActivityInit = 1900049;
  ErrorCode_ErrDailyAdventureActivityPtEnough = 1900050;
  ErrorCode_ErrDailyAdventureActivityRewardDone = 1900051;
  ErrorCode_ErrDailyAdventureActivityRewardTake = 1900052;
  ErrorCode_ErrDailyAdventureActivityTaskDone = 1900053;
  ErrorCode_ErrRoleTrialTimeOut = 1900054;
  ErrorCode_ErrFriendRemarkNull = 1900055;
  ErrorCode_ErrTrackMoonRoleUnLock = 1900056;
  ErrorCode_ErrTrackMoonTrigger = 1900057;
  ErrorCode_ErrTrackMoonBuildingUnLock = 1900058;
  ErrorCode_ErrTrackMoonBuildingCurve = 1900059;
  ErrorCode_ErrTrackMoonBuildingLock = 1900060;
  ErrorCode_ErrMoonEntrustCfg = 1900061;
  ErrorCode_ErrMoonRoleCfg = 1900062;
  ErrorCode_ErrMoonRoleTrailCurve = 1900063;
  ErrorCode_ErrMoonBuildingCfg = 1900064;
  ErrorCode_ErrMoonItemConsume = 1900065;
  ErrorCode_ErrDirtyWordDeserialize = 1900066;
  ErrorCode_ErrMoonTargetNoFinish = 1900067;
  ErrorCode_ErrMoonActivityReward = 1900068;
  ErrorCode_ErrMoonActivityOpen = 1900069;
  ErrorCode_ErrCircumDoReward = 1900070;
  ErrorCode_ErrRetrunRewardCfg = 1900071;
  ErrorCode_ErrRetrunRewardLevel = 1900072;
  ErrorCode_ErrRetrunHaddone = 1900073;
  ErrorCode_ErrSignRewardCfg = 1900074;
  ErrorCode_ErrCircumSignHadRwd = 1900075;
  ErrorCode_ErrCircumNoSign = 1900076;
  ErrorCode_ErrScoreRewardCfg = 1900077;
  ErrorCode_ErrCircumScoreHadRwd = 1900078;
  ErrorCode_ErrCircumScoreLack = 1900079;
  ErrorCode_ErrCircumTaskNoFinish = 1900080;
  ErrorCode_LoginServiceInvalidToken = 1900081;
  ErrorCode_LoginFusing = 1900082;
  ErrorCode_LoginRateLimiterRejected = 1900083;
  ErrorCode_LoginTimeoutRejected = 1900084;
  ErrorCode_AccountInputErr = 1900085;
  ErrorCode_DevInvalidLoginType = 1900086;
  ErrorCode_GARInvalidLoginType = 1900087;
  ErrorCode_GARDevInvalidLoginType = 1900088;
  ErrorCode_SdkserverTimeOut = 1900089;
  ErrorCode_ReconnectInvalidOperation = 1900090;
  ErrorCode_PbMessageAppVersionNotMatch = 1900091;
  ErrorCode_ErrPluginReconnectIpWhiteList = 1900092;
  ErrorCode_NotInUserIdWhiteListWithChannel = 1900093;
  ErrorCode_ErrPluginReconnectChannelWhiteList = 1900094;
  ErrorCode_PluginPlayerLoggingIn = 1900095;
  ErrorCode_LoginFusing2 = 1900096;
  ErrorCode_SoundBoxExploreFull = 1900097;
  ErrorCode_ErrMoonEntrustNoData = 1900098;
  ErrorCode_ErrMoonMoneyNotEnough = 1900099;
  ErrorCode_ErrCircumFluenceTimeIn = 1900100;
  ErrorCode_DragonPoolRewardWayErr = 1900101;
  ErrorCode_DragonPoolNoHandIn = 1900102;
  ErrorCode_WeaponSkinNoEquiped = 1900103;
  ErrorCode_WeaponSkinDataErr = 1900104;
  ErrorCode_WeaponSkinUnLockErr = 1900105;
  ErrorCode_WeaponSkinEquipDone = 1900106;
  ErrorCode_WeaponSkinTypeErr = 1900107;
  ErrorCode_FriendOfflineMsgErr = 1900108;
  ErrorCode_ErrDoCommonRewardConfigError = 2000000;
  ErrorCode_InstPlayNotSettle = 2000001;
  ErrorCode_InstPlayNotFinishExecute = 2000002;
  ErrorCode_ErrResetItemEntityNotContain = 2000003;
  ErrorCode_InstPlayExchangeRewardNotExist = 2000004;
  ErrorCode_MapConfigNull = 2000005;
  ErrorCode_MapConfigError = 2000006;
  ErrorCode_InstPlayComponentNotExist = 2000007;
  ErrorCode_InstTeleportResetPlayerDead = 2000008;
  ErrorCode_DrownEndTeleportInBigWorld = 2000009;
  ErrorCode_ErrFightTrialRoleRoldIdsError = 2000010;
  ErrorCode_ErrFightTrialRoleFromationError = 2000011;
  ErrorCode_ErrInstSaveFail = 2000012;
  ErrorCode_ErrActiveFoundationControlPlayerError = 2000013;
  ErrorCode_ErrActiveFoundationOccupation = 2000014;
  ErrorCode_ErrSingleInstanceCanNotOnline = 2000015;
  ErrorCode_ErrInstanceRechallengeLimit = 2000016;
  ErrorCode_ErrTargetSame = 2000017;
  ErrorCode_ErrAttachTargetType = 2000018;
  ErrorCode_ErrAttachInfoNull = 2000019;
  ErrorCode_ErrLevelPlayChallengeFail = 2000020;
  ErrorCode_ErrGMTip = 2000021;
  ErrorCode_ErrPosSenderEntityNoExist = 2000022;
  ErrorCode_ErrPosSenderComponentNoExist = 2000023;
  ErrorCode_ErrPosSenderParamError = 2000024;
  ErrorCode_ErrPosSenderRemoveSenderNotSame = 2000025;
  ErrorCode_ErrConnectorEntityNoExist = 2000026;
  ErrorCode_ErrConnectorCompNoExist = 2000027;
  ErrorCode_ErrConnectorPreIdError = 2000028;
  ErrorCode_ErrConnectorCompleteState = 2000029;
  ErrorCode_ErrConnectorActiveStateError = 2000030;
  ErrorCode_ErrConnectorMatchErro = 2000031;
  ErrorCode_ErrActiveControlOccupation = 2000032;
  ErrorCode_ErrPortalCreatorActive = 2000033;
  ErrorCode_ErrComponentNull = 2000034;
  ErrorCode_ErrPortalCreatorConfigError = 2000035;
  ErrorCode_ErrPortalCreatorCreateFail = 2000036;
  ErrorCode_ErrTrialRoleEnterInst = 2000037;
  ErrorCode_ErrChangeFightState = 2100000;
  ErrorCode_ErrAddFragileFail = 2100001;
  ErrorCode_ErrStoreEnergyClose = 2100002;
  ErrorCode_ErrAttrOverMax = 2100003;
  ErrorCode_ErrGmkillEntityNotValid = 2200000;
  ErrorCode_ErrSplineConfigNotExist = 2200001;
  ErrorCode_BossRushActivityNotOpen = 2200002;
  ErrorCode_BossRushActivityScoreRewardNotExist = 2200003;
  ErrorCode_BossRushActivityLevelRewardNotExist = 2200004;
  ErrorCode_BossRushActivityScoreNotEnough = 2200005;
  ErrorCode_BossRushActivityLevelNotPass = 2200006;
  ErrorCode_BossRushActivityRewardClaimed = 2200007;
  ErrorCode_BossRushActivityBuffSelectionNotValid = 2200008;
  ErrorCode_BossRushActivityConfigNotExist = 2200009;
  ErrorCode_BossRushActivityCharacterSelectionNotValid = 2200010;
  ErrorCode_BossRushActivityComponentNotExist = 2200011;
  ErrorCode_BossRushActivityCharacterSelectionEmpty = 2200012;
  ErrorCode_BossRushActivityBuffSelectionEmpty = 2200013;
  ErrorCode_BossRushActivityLevelNotOpen = 2200014;
  ErrorCode_InRangeEntityDuplicate = 2200015;
  ErrorCode_InRangeEntityNotExist = 2200016;
  ErrorCode_NpcPerformComponentNotExist = 2200017;
  ErrorCode_NpcPerformStateNotInit = 2200018;
  ErrorCode_NpcPerformActionTargetEntityNotExist = 2200019;
  ErrorCode_ActionQueueTypeNotExist = 2200020;
  ErrorCode_ActionQueueCtxTypeNotExist = 2200021;
  ErrorCode_ExecuteQueueOwnerHasAction = 2200022;
  ErrorCode_ActionQueueExceedMaxCount = 2200023;
  ErrorCode_ActionQueueStartActionGroupFail = 2200024;
  ErrorCode_ActionQueueComponentNotExist = 2200025;
  ErrorCode_ActionQueueNotInit = 2200026;
  ErrorCode_ChangeBatchEntitiesStateError = 2200027;
  ErrorCode_EnableNearbyTrackingTargetEntityNotExist = 2200028;
  ErrorCode_EnableNearbyTrackingSelfNotEntity = 2200029;
  ErrorCode_EnableNearbyTrackingSelfComponentNotExist = 2200030;
  ErrorCode_SetTeleControlEntityNotExist = 2200031;
  ErrorCode_SetTeleControlTypeNotExist = 2200032;
  ErrorCode_SetTeleControlComponentNotExist = 2200033;
  ErrorCode_SetTeleControlCoordEntityNotExist = 2200034;
  ErrorCode_SceneItemAttributeIdNotInType = 2200035;
  ErrorCode_SceneItemAttributeIdNotExist = 2200036;
  ErrorCode_ModifySceneItemAttributeEntityNotExist = 2200037;
  ErrorCode_AddSceneItemAttributeTagDuplicate = 2200038;
  ErrorCode_RemoveSceneItemAttributeTagNotExist = 2200039;
  ErrorCode_AttributeEntityLock = 2200040;
  ErrorCode_AttributeEntitySilent = 2200041;
  ErrorCode_ModifySceneItemAttributeTagNotExist = 2200042;
  ErrorCode_ErrEnterInstCtx = 2200043;
  ErrorCode_ErrEnterInstBlackboardValueNotExist = 2200044;
  ErrorCode_TriggerLocked = 2200045;
  ErrorCode_TriggerIgnore = 2200046;
  ErrorCode_TriggerEntityNull = 2200047;
  ErrorCode_TriggerEntityNotMatch = 2200048;
  ErrorCode_TriggerMatchCountNotMet = 2200049;
  ErrorCode_TriggerActionEmpty = 2200050;
  ErrorCode_ExceedMaxTriggerCount = 2200051;
  ErrorCode_TriggerAlreadyLeaveWhenEnterCondFail = 2200052;
  ErrorCode_TriggerLeaveConfigEmpty = 2200053;
  ErrorCode_TriggerConditionNotMet = 2200054;
  ErrorCode_TriggerRangeRationalityFail = 2200055;
  ErrorCode_TrampleEntityNotMatch = 2200056;
  ErrorCode_TrampleConditionNotMet = 2200057;
  ErrorCode_TrampleMatchCountNotMet = 2200058;
  ErrorCode_NotQaAccountWithHIddenServer = 2300000;
  ErrorCode_DisabledFuncInHIddenServer = 2300001;
  ErrorCode_ErrActionExecutorFinishConditionNotSport = 2400000;
  ErrorCode_ErrAlreadyInSwitchNode = 2400001;
  ErrorCode_ErrCornActivityId = 2500000;
  ErrorCode_ErrCornActivityNoOpen = 2500001;
  ErrorCode_ErrCornNoActivityData = 2500002;
  ErrorCode_NoPlayIdCorniceReward = 2500003;
  ErrorCode_ActivityNoOpenCorniceReward = 2500004;
  ErrorCode_ScoreLimitCorniceReward = 2500005;
  ErrorCode_RewardedCorniceReward = 2500006;
  ErrorCode_NoUnlockCorniceReward = 2500007;
  ErrorCode_NoScoreCorniceReward = 2500008;
  ErrorCode_TrackMoonPhaseNoConfig = 2500009;
  ErrorCode_TrackMoonPhaseActivityNoOpen = 2500010;
  ErrorCode_TrackMoonPhaseNoPolulary = 2500011;
  ErrorCode_TrackMoonPhaseNoData = 2500012;
  ErrorCode_TrackMoonPhaseRewarded = 2500013;
  ErrorCode_TrackMoonPhaseDataNoConfig = 2500014;
  ErrorCode_TrackMoonPhaseDataNoOpen = 2500015;
  ErrorCode_TrackMoonPhaseDataNoData = 2500016;
  ErrorCode_BCTRewardNoTConfig = 2500017;
  ErrorCode_BCTRewardNoOpenActivity = 2500018;
  ErrorCode_BCTRewardNoData = 2500019;
  ErrorCode_BCTRewardNoUnlock = 2500020;
  ErrorCode_BCTRewardNoComplete = 2500021;
  ErrorCode_BCARewardNoRConfig = 2500022;
  ErrorCode_BCARewardNoOpenActivity = 2500023;
  ErrorCode_BCARewardNoData = 2500024;
  ErrorCode_BCARewardNoActive = 2500025;
  ErrorCode_BCARewarded = 2500026;
  ErrorCode_BCARewardNoActiveReward = 2500027;
  ErrorCode_CornTranNoPlayConfig = 2500028;
  ErrorCode_CornTranNoOpenPlay = 2500029;
  ErrorCode_CornTranNoOpenActivity = 2500030;
  ErrorCode_CornTranNoEntityConfig = 2500031;
  ErrorCode_BCARewardRepeatRewardId = 2500032;
  ErrorCode_BCARewardDifferActivityId = 2500033;
  ErrorCode_BCTRewardNoActivity = 2500034;
  ErrorCode_BCTRewardIllegalRewardNum = 2500035;
  ErrorCode_BCTRewardNoUnlockStage = 2500036;
  ErrorCode_PreheatSignNodeNoConfig = 2500037;
  ErrorCode_PreheatSignNodeNoData = 2500038;
  ErrorCode_PreheatSignActivityOnOpen = 2500039;
  ErrorCode_PreheatSignNodeNoUnlock = 2500040;
  ErrorCode_PreheatSignNodeNoRewardStatus = 2500041;
  ErrorCode_PreheatSignNodeNoAnswer = 2500042;
  ErrorCode_ScratchCardNoRoundConfig = 2500043;
  ErrorCode_ScratchCardNoActivityConfig = 2500044;
  ErrorCode_ScratchCardNoDbData = 2500045;
  ErrorCode_ScratchCardIllegalIndex = 2500046;
  ErrorCode_ScratchCardIndexRewarded = 2500047;
  ErrorCode_ScratchCardNoTime = 2500048;
  ErrorCode_ScratchCardNoRandomReward = 2500049;
  ErrorCode_ScratchCardRoundNoUnlock = 2500050;
  ErrorCode_BossRushPlayerNoSceneData = 2500051;
  ErrorCode_BossRushPlayerCanNoChooseBuff = 2500052;
  ErrorCode_BossRushPlayerIllegalIndex = 2500053;
  ErrorCode_BossRushHadSameBuffId = 2500054;
  ErrorCode_BossRushBuffCountLimit = 2500055;
  ErrorCode_BossRushBuffIllegal = 2500056;
  ErrorCode_BossRushBuffNoConfig = 2500057;
  ErrorCode_ScratchCardActivityNoOpen = 2500058;
  ErrorCode_MowToweNoLevelConfig = 2500059;
  ErrorCode_MowTowerActivityNoOpen = 2500060;
  ErrorCode_MowToweNoCacheData = 2500061;
  ErrorCode_MowTowerNoPassFirstInst = 2500062;
  ErrorCode_MowTowerLevelsIdError = 2500063;
  ErrorCode_MowTowerRoleIdError = 2500064;
  ErrorCode_MowTowerBuffIdError = 2500065;
  ErrorCode_MowTowerNoComponent = 2500066;
  ErrorCode_MowTowerHadSameRole = 2500067;
  ErrorCode_MowTowerBuffCountError = 2500068;
  ErrorCode_MowTowerNoFirstInst = 2500069;
  ErrorCode_MowTowerNoActivityData = 2500070;
  ErrorCode_MowTowerScoreLimit = 2500071;
  ErrorCode_MowTowerScoreRewarded = 2500072;
  ErrorCode_MowTowerScoreRewardConfig = 2500073;
  ErrorCode_MowTowerNoInScene = 2500074;
  ErrorCode_MowTowerNoRewardConfig = 2500075;
}

message DErrorResult {
  ErrorCode ErrorCode = 1;
  repeated string ErrorParams = 2;
}

message Vector {
  float X = 1;
  float Y = 2;
  float Z = 3;
}

message Rotator {
  float Pitch = 1;
  float Yaw = 2;
  float Roll = 3;
}

enum EEntityType {
  EEntityType_Player = 0;
  EEntityType_Npc = 1;
  EEntityType_Monster = 2;
  EEntityType_SceneItem = 5;
  EEntityType_Custom = 6;
  EEntityType_Vision = 7;
  EEntityType_Animal = 8;
  EEntityType_ClientOnly = 9;
  EEntityType_Vehicle = 10;
  EEntityType_PlayerEntity = 11;
  EEntityType_SceneEntity = 12;
}

enum EAddEntityType {
  EAddEntityType_SceneInit = 0;
  EAddEntityType_Normal = 1;
}

enum ERemoveEntityType {
  ERemoveEntityType_RemoveTypeForce = 0;
  ERemoveEntityType_HpIsZero = 1;
  ERemoveEntityType_Destructible = 2;
  ERemoveEntityType_RemoveTypeNormal = 3;
  ERemoveEntityType_RemoveTypeCapture = 4;
  ERemoveEntityType_RemoveTypeTreasureBox = 5;
  ERemoveEntityType_RemoveTypeDrop = 6;
  ERemoveEntityType_MonsterBoom = 7;
  ERemoveEntityType_RemoveTypeResetByModeChange = 8;
}

enum EAttributeType {
  EAttributeType_EAttributeType_None = 0;
  EAttributeType_Lv = 1;
  EAttributeType_LifeMax = 2;
  EAttributeType_Life = 3;
  EAttributeType_Sheild = 4;
  EAttributeType_SheildDamageChange = 5;
  EAttributeType_SheildDamageReduce = 6;
  EAttributeType_Atk = 7;
  EAttributeType_Crit = 8;
  EAttributeType_CritDamage = 9;
  EAttributeType_Def = 10;
  EAttributeType_EnergyEfficiency = 11;
  EAttributeType_CdReduse = 12;
  EAttributeType_ElementEfficiency = 13;
  EAttributeType_DamageChangeNormalSkill = 14;
  EAttributeType_DamageChange = 15;
  EAttributeType_DamageReduce = 16;
  EAttributeType_DamageChangeAuto = 17;
  EAttributeType_DamageChangeCast = 18;
  EAttributeType_DamageChangeUltra = 19;
  EAttributeType_DamageChangeQte = 20;
  EAttributeType_DamageChangePhys = 21;
  EAttributeType_DamageChangeElement1 = 22;
  EAttributeType_DamageChangeElement2 = 23;
  EAttributeType_DamageChangeElement3 = 24;
  EAttributeType_DamageChangeElement4 = 25;
  EAttributeType_DamageChangeElement5 = 26;
  EAttributeType_DamageChangeElement6 = 27;
  EAttributeType_DamageResistancePhys = 28;
  EAttributeType_DamageResistanceElement1 = 29;
  EAttributeType_DamageResistanceElement2 = 30;
  EAttributeType_DamageResistanceElement3 = 31;
  EAttributeType_DamageResistanceElement4 = 32;
  EAttributeType_DamageResistanceElement5 = 33;
  EAttributeType_DamageResistanceElement6 = 34;
  EAttributeType_HealChange = 35;
  EAttributeType_HealedChange = 36;
  EAttributeType_DamageReducePhys = 37;
  EAttributeType_DamageReduceElement1 = 38;
  EAttributeType_DamageReduceElement2 = 39;
  EAttributeType_DamageReduceElement3 = 40;
  EAttributeType_DamageReduceElement4 = 41;
  EAttributeType_DamageReduceElement5 = 42;
  EAttributeType_DamageReduceElement6 = 43;
  EAttributeType_ReactionChange1 = 44;
  EAttributeType_ReactionChange2 = 45;
  EAttributeType_ReactionChange3 = 46;
  EAttributeType_ReactionChange4 = 47;
  EAttributeType_ReactionChange5 = 48;
  EAttributeType_ReactionChange6 = 49;
  EAttributeType_ReactionChange7 = 50;
  EAttributeType_ReactionChange8 = 51;
  EAttributeType_ReactionChange9 = 52;
  EAttributeType_ReactionChange10 = 53;
  EAttributeType_ReactionChange11 = 54;
  EAttributeType_ReactionChange12 = 55;
  EAttributeType_ReactionChange13 = 56;
  EAttributeType_ReactionChange14 = 57;
  EAttributeType_ReactionChange15 = 58;
  EAttributeType_EnergyMax = 59;
  EAttributeType_Energy = 60;
  EAttributeType_SpecialEnergy1Max = 61;
  EAttributeType_SpecialEnergy1 = 62;
  EAttributeType_SpecialEnergy2Max = 63;
  EAttributeType_SpecialEnergy2 = 64;
  EAttributeType_SpecialEnergy3Max = 65;
  EAttributeType_SpecialEnergy3 = 66;
  EAttributeType_SpecialEnergy4Max = 67;
  EAttributeType_SpecialEnergy4 = 68;
  EAttributeType_StrengthMax = 69;
  EAttributeType_Strength = 70;
  EAttributeType_StrengthRecover = 71;
  EAttributeType_StrengthPunishTime = 72;
  EAttributeType_StrengthRun = 73;
  EAttributeType_StrengthSwim = 74;
  EAttributeType_StrengthFastSwim = 75;
  EAttributeType_ElementEnergyMax = 76;
  EAttributeType_ElementEnergy = 77;
  EAttributeType_HardnessMax = 78;
  EAttributeType_Hardness = 79;
  EAttributeType_HardnessRecover = 80;
  EAttributeType_HardnessPunishTime = 81;
  EAttributeType_HardnessChange = 82;
  EAttributeType_HardnessReduce = 83;
  EAttributeType_ToughMax = 84;
  EAttributeType_Tough = 85;
  EAttributeType_ToughRecover = 86;
  EAttributeType_ToughChange = 87;
  EAttributeType_ToughReduce = 88;
  EAttributeType_ElementPower1 = 89;
  EAttributeType_ElementPower2 = 90;
  EAttributeType_ElementPower3 = 91;
  EAttributeType_ElementPower4 = 92;
  EAttributeType_ElementPower5 = 93;
  EAttributeType_ElementPower6 = 94;
  EAttributeType_SpecialDamageChange = 95;
  EAttributeType_StrengthFastClimbCost = 96;
  EAttributeType_ElementPropertyType = 97;
  EAttributeType_WeakTime = 98;
  EAttributeType_IgnoreDefRate = 99;
  EAttributeType_IgnoreDamageResistancePhys = 100;
  EAttributeType_IgnoreDamageResistanceElement1 = 101;
  EAttributeType_IgnoreDamageResistanceElement2 = 102;
  EAttributeType_IgnoreDamageResistanceElement3 = 103;
  EAttributeType_IgnoreDamageResistanceElement4 = 104;
  EAttributeType_IgnoreDamageResistanceElement5 = 105;
  EAttributeType_IgnoreDamageResistanceElement6 = 106;
  EAttributeType_SkillToughRatio = 107;
  EAttributeType_StrengthClimbJump = 108;
  EAttributeType_StrengthGliding = 109;
  EAttributeType_Mass = 110;
  EAttributeType_BrakingFrictionFactor = 111;
  EAttributeType_GravityScale = 112;
  EAttributeType_SpeedRatio = 113;
  EAttributeType_DamageChangePhantom = 114;
  EAttributeType_AutoAttackSpeed = 115;
  EAttributeType_CastAttackSpeed = 116;
  EAttributeType_StatusBuildUp1Max = 117;
  EAttributeType_StatusBuildUp1 = 118;
  EAttributeType_StatusBuildUp2Max = 119;
  EAttributeType_StatusBuildUp2 = 120;
  EAttributeType_StatusBuildUp3Max = 121;
  EAttributeType_StatusBuildUp3 = 122;
  EAttributeType_StatusBuildUp4Max = 123;
  EAttributeType_StatusBuildUp4 = 124;
  EAttributeType_StatusBuildUp5Max = 125;
  EAttributeType_StatusBuildUp5 = 126;
  EAttributeType_RageMax = 127;
  EAttributeType_Rage = 128;
  EAttributeType_RageRecover = 129;
  EAttributeType_RagePunishTime = 130;
  EAttributeType_RageChange = 131;
  EAttributeType_RageReduce = 132;
  EAttributeType_ToughRecoverDelayTime = 133;
  EAttributeType_Jump = 134;
  EAttributeType_ParalysisTimeMax = 135;
  EAttributeType_ParalysisTime = 136;
  EAttributeType_ParalysisTimeRecover = 137;
  EAttributeType_EAttributeType_MAX = 138;
}

message GameplayAttributeData {
  EAttributeType AttributeType = 1;
  int32 BaseValue = 2;
  int32 Increment = 3;
}

message AttrData {
  EAttributeType AttributeType = 1;
  int32 BaseValue = 2;
  int32 Increment = 3;
}

message GameplayTagData {
  int32 Id = 1;
  int32 TagCount = 2;
}

message CommonTagData {
  int32 TagId = 1;
  bool RemoveTagIds = 2;
}

message MovementInformation {
  Vector LinearVelocity = 1;
  Vector AngularVelocity = 2;
  Vector Location = 3;
  Rotator Rotation = 4;
  bool bSimulatedPhysicSleep = 5;
  bool bRepPhysics = 6;
  int32 MovementMode = 7;
  float TimeStamp = 8;
  int32 InputDirection = 9;
  bool ResetMeshOffset = 10;
  bool IsJump = 11;
  float HorizontalJumpSpeed = 12;
}

message RelativeMoveReplaySample {
  int64 BaseMovementEntityId = 1;
  Vector RelativeLocation = 2;
  Rotator RelativeRotation = 3;
}

message MoveReplaySample {
  Vector LinearVelocity = 1;
  Vector Location = 2;
  Rotator Rotation = 3;
  int32 MovementMode = 4;
  float TimeStamp = 5;
  int32 InputDirection = 6;
  repeated GameplayTagData Tags = 7;
  RelativeMoveReplaySample RelativeMoveReplaySample = 8;
  float ControllerPitch = 9;
  float TimeScale = 10;
  int64 ServerTimeStamp = 11;
  int32 RTT = 12;
  Vector SlideForward = 13;
  int32 MoveState = 14;
  int32 SkillId = 15;
  int32 ElapsedLogicTickTime = 16;
}

message PrivateTag {
  int32 PlayerId = 1;
  repeated string Tags = 31;
}

message InstanceOwnerInfo {
  bool hSs = 1;
}

message Qks {
  int64 CreatureGenID = 1;
}

message AceAntiAttrData {
  EAttributeType AttributeType = 1;
  float CurrentValue = 2;
  bool _Ss = 3;
}

message CombatCommon {
  int64 PreMessageId = 1;
  int64 MessageId = 2;
  int64 Originator = 3;
  float TimeStamp = 4;
  int64 EntityId = 5;
  bool IsServerRequest = 6;
}

message EntityRemoveInfo {
  int64 EntityId = 1;
  int32 Type = 2;
}

message RoleShowEntry {
  int32 RoleId = 1;
  int32 Level = 2;
}

message PlayerDetails {
  int32 PlayerId = 1;
  string Name = 2;
  int32 Level = 3;
  int32 OriginWorldLevel = 4;
  int32 CurWorldLevel = 5;
  int32 HeadId = 6;
  int32 HeadFrameId = 7;
  string Signature = 8;
  bool IsOnline = 9;
  bool IsCanLobbyOnline = 10;
  int64 LastOfflineTime = 11;
  int32 TeamMemberCount = 12;
  int32 LevelGap = 13;
  int32 Birthday = 14;
  repeated RoleShowEntry RoleShowList = 15;
  repeated int32 CardShowList = 16;
  int32 CurCard = 17;
  bool DisplayBirthday = 18;
  int64 y0a = 19;
  string SdkUserId = 20;
  string SdkOnlineId = 21;
  string SdkAccountId = 22;
  bool CrossPlayEnabled = 23;
}

message EntitySimplyMoveInfo {
  int64 EntityId = 1;
  Vector Location = 2;
  Rotator Rotation = 3;
}

// MessageId: 28773 (Push)
message AceAntiDataPush {
  bytes AntiData = 79;
}

// MessageId: 22645 (Notify)
message AceAntiDataNotify {
  bytes AntiData = 241;
}

message AchievementProgress {
  int32 CurProgress = 1;
  int32 TotalProgress = 2;
}

message AchievementEntry {
  int32 Id = 1;
  uint32 FinishTime = 2;
  bool IsReceive = 3;
  AchievementProgress Progress = 4;
}

message AchievementGroupEntry {
  int32 Id = 1;
  uint32 FinishTime = 2;
  bool IsReceive = 3;
}

message AchievementGroupInfo {
  AchievementGroupEntry AchievementGroupEntry = 1;
  repeated AchievementEntry AchievementEntryList = 2;
}

// MessageId: 20305 (Request)
message AchievementInfoRequest {
}

// MessageId: 29581 (Response)
message AchievementInfoResponse {
  repeated AchievementGroupInfo AchievementGroupInfoList = 209;
  int32 AchievementFinishedStar = 34;
  int32 FinishedAchievementNum = 44;
}

// MessageId: 22651 (Request)
message AchievementReceiveRequest {
  bool IsGroupId = 29;
  int32 Id = 206;
}

// MessageId: 21657 (Response)
message AchievementReceiveResponse {
  ErrorCode ErrorCode = 174;
  repeated string ErrorParams = 200;
  map<int32, int32> ItemMap = 126;
}

// MessageId: 27506 (Notify)
message AchievementProgressNotify {
  AchievementEntry AchievementEntry = 166;
}

// MessageId: 22446 (Notify)
message AchievementListProgressNotify {
  repeated AchievementEntry AchievementEntryList = 78;
}

// MessageId: 19896 (Notify)
message AchievementGroupProgressNotify {
  AchievementGroupEntry AchievementGroupEntry = 205;
}

// MessageId: 23227 (Request)
message AchievementFinishRequest {
  int32 Id = 180;
}

// MessageId: 26522 (Response)
message AchievementFinishResponse {
  ErrorCode ErrorCode = 75;
}

// MessageId: 24455 (Notify)
message AchievementCountChangeNotify {
  int32 AchievementFinishedStar = 201;
  int32 FinishedAchievementNum = 252;
}

// MessageId: 29107 (Request)
message UpdateAchievementInfoRequest {
}

// MessageId: 22919 (Response)
message UpdateAchievementInfoResponse {
  ErrorCode ErrorCode = 20;
  repeated AchievementEntry AchievementEntryList = 205;
}

// MessageId: 18334 (Notify)
message LevelEventNotify {
  int32 PlayerId = 9;
  int32 IncId = 137;
  GameCtxPb GameCtx = 48;
  int32 TotalCount = 173;
  int32 StartIndex = 143;
  int32 EndIndex = 32;
  bool NeedFinishReq = 8;
}

// MessageId: 26053 (Notify)
message ActionErrorCodeNotify {
  int32 IncId = 59;
  GameCtxPb GameCtx = 194;
  int32 Index = 84;
  ErrorCode ErrorCode = 85;
}

// MessageId: 23494 (Request)
message ActionFinishRequest {
  int32 PlayerId = 53;
  int32 IncId = 202;
  int32 StartIndex = 185;
  string ErrorMsg = 240;
}

// MessageId: 25950 (Response)
message ActionFinishResponse {
  ErrorCode ErrorCode = 73;
}

// MessageId: 19474 (Request)
message GmLevelActionRequest {
  string JsonStr = 166;
}

// MessageId: 24606 (Response)
message GmLevelActionResponse {
  ErrorCode ErrorCode = 177;
}

// MessageId: 28327 (Notify)
message OperationRestrictionNotify {
  string Params = 176;
  bool IsNull = 98;
}

// MessageId: 17720 (Notify) TODO
message f0l1 {
  int32 PlayerId = 245;
  int32 ConfirmBoxDataConfigId = 83;
  int32 IncId = 147; //w5n
}

// MessageId: 20757 (Request) TODO
message p0l1 {
  int32 CurrentPlayerId = 123;
  int32 Result = 84;
  int32 IncId = 51;
}

// MessageId: 18028 (Response) TODO
message v0l1 {
  ErrorCode ErrorCode = 165;
}

// MessageId: 24393 (Notify)
message Rfl1 {
  int32 TeleportDungeonActionHostIdHandle = 238;
  int32 TeleportDungeonActionIncIdHandle = 28;
  int32 DungeonInstanceId = 13;
  bool IsFormTeleportAction = 174;
  bool InstType = 205;
}

// MessageId: 20484 (Request)
message TeleportDungeonRequest {
  int32 TeleportDungeonActionHostIdHandle = 30;
  int32 TeleportDungeonActionIncIdHandle = 155;
  repeated int32 RoleIds = 140;
  bool ybs1 = 210;
}

// MessageId: 20075 (Response)
message TeleportDungeonResponse {
  ErrorCode ErrorCode = 12;
}

enum GameCtxType {// TODO
  GameCtxType_vvs = 0;
  GameCtxType_pvs = 1;
  GameCtxType_Mvs = 2;
  GameCtxType_Svs = 3;
  GameCtxType_Evs = 4;
  GameCtxType_EntityStateChangeAction = 5;
  GameCtxType_Ivs = 6;
  GameCtxType_Tvs = 7;
  GameCtxType_EntityLeaveTrigger = 8;
  GameCtxType_Rvs = 9;
  GameCtxType_Dvs = 10;
  GameCtxType_Avs = 11;
  GameCtxType_Pvs2 = 12;
  GameCtxType_Uvs = 13;
  GameCtxType_wvs = 14;
  GameCtxType_xvs = 15;
  GameCtxType_bvs = 16;
  GameCtxType_Bvs2 = 17;
  GameCtxType_qvs = 18;
  GameCtxType_Gvs = 19;
  GameCtxType_Ovs = 20;
  GameCtxType_kvs = 21;
  GameCtxType_Nvs = 22;
  GameCtxType_Fvs = 23;
  GameCtxType_Vvs2 = 24;
  GameCtxType_DOLLARvs = 25;
  GameCtxType_Hvs = 26;
  GameCtxType_jvs = 27;
  GameCtxType_Wvs2 = 28;
  GameCtxType_GmPlayFlow = 29;
  GameCtxType_SceneItemLifeCycleComponentCreate = 30;
  GameCtxType_SceneItemLifeCycleComponentDetroy = 31;
  GameCtxType_GameCtxGm = 32;
  GameCtxType_FlowActionCtx = 33;
  GameCtxType_Yvs = 34;
  GameCtxType_ChildQuestNodeFixAction = 35;
  GameCtxType_ConditionNodeFixAction = 36;
  GameCtxType_EntityFixAction = 37;
  GameCtxType_ConditionNode = 38;
  GameCtxType_Jvs2 = 39;
  GameCtxType_zvs = 40;
  GameCtxType_ChildQuestNodeCondition = 41;
  GameCtxType_EntityStateChangeConditionAction = 42;
  GameCtxType_RequestPlayerGameCurrStateBt = 43;
  GameCtxType_RequestEntityCurrState = 44;
  GameCtxType_TriggerConditionListeningAction = 45;
  GameCtxType_F7s = 46;
  GameCtxType_EntityVisibleCondition = 47;
  GameCtxType_FailedNodeTeleport = 48;
  GameCtxType_LeaveInstEscActionCtx = 49;
  GameCtxType_TrampleActiveActionCtx = 50;
  GameCtxType_TrampleDeActiveActionCtx = 51;
  GameCtxType_DefaultGameCtx = 52;
  GameCtxType_LevelPlayExploratoryCtx = 53;
  GameCtxType_RenjuCompleteActionCtx = 54;
  GameCtxType_JigsawFoundationMatchedActionCtx = 55;
  GameCtxType_CompositionFixAction = 56;
  GameCtxType_yvl = 57;
}

message GameCtxPb {
  oneof LOs2 {
    BehaviorTreeCtxPb BehaviorTree = 2;
    EntityCtxPb Entity = 3;
    NormalInteractCtxPb NormalInteract = 4;
    DynamicInteractCtxPb DynamicInteract = 5;
    RandomInteractCtxPb RandomInteract = 6;
    StateChangeActionCtxPb StateChangeAction = 7;
    EntityGroupActionCtxPb EntityGroupAction = 8;
    EntityTriggerCtxPb EntityTrigger = 9;
    EntityLeaveTriggerCtxPb EntityLeaveTriggerCtx = 10;
    EntityDestructibleCtxPb EntityDestructible = 11;
    EntityTimelineTrackCtxPb EntityTimelineTrack = 12;
    LevelPlayOpenActionCtxPb LevelPlayOpenAction = 13;
    LevelPlayRewardActionCtxPb LevelPlayRewardAction = 14;
    QuestActiveActionCtxPb QuestActiveAction = 15;
    QuestAcceptActionCtxPb QuestAcceptAction = 16;
    QuestFinishActionCtxPb QuestFinishAction = 17;
    ChildQuestNodeEnterActionCtxPb ChildQuestNodeEnterAction = 18;
    ChildQuestNodeFinishActionCtxPb ChildQuestNodeFinishAction = 19;
    SuccessNodeActionCtxPb SuccessNodeAction = 20;
    FailedNodeActionCtxPb FailedNodeAction = 21;
    CompositionEnterActionCtxPb CompositionEnterAction = 22;
    EntityConditionListeningActionCtxPb EntityConditionListeningAction = 23;
    PlayFlowChildQuestNodeCtxPb PlayFlowChildQuestNode = 24;
    HandInItemChildQuestNodeCtxPb HandInItemChildQuestNode = 25;
    DoInteractChildQuestNodeCtxPb DoInteractChildQuestNode = 26;
    ActionGroupNodeActionCtxPb ActionGroupNodeAction = 27;
    ExploreSkillPullGiantCtxPb ExploreSkillPullGiantAction = 28;
    LevelPlayCtxPb LevelPlay = 29;
    GmLevelActionCtxPb GmLevelAction = 30;
    SceneItemLifeCycleComponentCreateCtxPb LifeCycleCreateAction = 31;
    SceneItemLifeCycleComponentDestroyCtxPb LifeCycleDestroyAction = 32;
    FlowActionCtxPb FlowAction = 33;
    DailyQuestTerminateActionCtxPb DailyQuestTerminateAction = 34;
    BeamReceiveAction EntityBeamReceiveAction = 35;
    aks zvs = 36;
    SceneItemStateChangeConditionAction EntityStateChangeConditionAction = 37;
    z7s1 F7s = 38;
    LeaveInstEscActionCtxPb LeaveInstEscActionCtx = 39;
    TrampleActivateAction TrampleActiveAction = 40;
    TrampleDeActiveAction TrampleDeActiveAction = 41;
    qyl2 Mvl = 42;
    Gyl Svl = 43;
    Oyl1 yvl = 44;
  }

  int32 CtxType = 1;
}

message EntityCtxPb {
  int32 ConfigId = 1;
  int64 IncId = 2;
}

message NormalInteractCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 OptionIndex = 2;
}

message DynamicInteractCtxPb {
  EntityCtxPb EntityCtx = 1;
  string OptionGuid = 2;
}

message RandomInteractCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 OptionIndex = 2;
}

message StateChangeActionCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 StateIndex = 2;
}

message SceneItemStateChangeConditionAction {
  EntityCtxPb EntityCtx = 1;
  int32 StateIndex = 2;
  int32 ConditionIndex = 3;
}

message EntityGroupActionCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 TriggerIndex = 2;
  bool IsMatch = 3;
}

message aks {
  EntityCtxPb EntityCtx = 1;
}

message EntityTriggerCtxPb {
  EntityCtxPb EntityCtx = 1;
  int64 TriggerEntityIncId = 2;
}

message EntityLeaveTriggerCtxPb {
  EntityCtxPb EntityCtx = 1;
  int64 TriggerEntityIncId = 2;
}

message EntityDestructibleCtxPb {
  EntityCtxPb EntityCtx = 1;
}

enum EntityTimelineEventType {
  EntityTimelineEventType_LeftIn = 0;
  EntityTimelineEventType_LeftOut = 1;
  EntityTimelineEventType_RightIn = 2;
  EntityTimelineEventType_RightOut = 3;
}

message EntityTimelineTrackCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 GroupIndex = 2;
  int32 ControlPoint = 3;
  int32 EventType = 4;
}

message EntityConditionListeningActionCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 EntityConditionListeningIndex = 2;
}

message ExploreSkillPullGiantCtxPb {
  EntityCtxPb EntityCtx = 1;
}

message GmLevelActionCtxPb {
  string JsonStr = 1;
}

message SceneItemLifeCycleComponentCreateCtxPb {
  EntityCtxPb EntityCtx = 1;
}

message SceneItemLifeCycleComponentDestroyCtxPb {
  EntityCtxPb EntityCtx = 1;
}

message TrampleActivateAction {
  EntityCtxPb EntityCtx = 1;
}

message TrampleDeActiveAction {
  EntityCtxPb EntityCtx = 1;
}

message qyl2 {
  EntityCtxPb EntityCtx = 1;
  int32 Evl2 = 2;
}

message Gyl {
  EntityCtxPb EntityCtx = 1;
  int32 Ivl2 = 2;
}

message Oyl1 {
  EntityCtxPb EntityCtx = 1;
  int32 Ivl2 = 2;
}

message BehaviorTreeCtxPb {
  int64 IncId = 1;
  int32 BtType = 2;
  int32 BtId = 3;
  int32 NodeId = 4;
}

message LevelPlayCtxPb {
  int32 LevelPlayId = 1;
}

message LevelPlayOpenActionCtxPb {
  int32 LevelPlayId = 1;
}

message LevelPlayRewardActionCtxPb {
  int32 LevelPlayId = 1;
}

message QuestActiveActionCtxPb {
  int32 QuestId = 1;
}

message QuestAcceptActionCtxPb {
  int32 QuestId = 1;
}

message QuestFinishActionCtxPb {
  int32 QuestId = 1;
}

message DailyQuestTerminateActionCtxPb {
  int32 QuestId = 1;
}

message LeaveInstEscActionCtxPb {
  int32 InstanceId = 1;
}

message ChildQuestNodeEnterActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message ChildQuestNodeFinishActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message SuccessNodeActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message FailedNodeActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message CompositionEnterActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message PlayFlowChildQuestNodeCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message HandInItemChildQuestNodeCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message DoInteractChildQuestNodeCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message ActionGroupNodeActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message FlowActionCtxPb {
  string FlowListName = 1;
  int32 FlowId = 2;
  int32 StateId = 3;
  int32 ActionId = 4;
}

enum BeamReceiveActionType {
  BeamReceiveActionType_BeginAction = 0;
  BeamReceiveActionType_CompleteAction = 1;
  BeamReceiveActionType_StopAction = 2;
}

message BeamReceiveAction {
  BeamReceiveActionType ReceiveType = 1;
  EntityCtxPb EntityCtx = 2;
}

message z7s1 {
  string FlowListName = 1;
  int32 FlowId = 2;
  int32 StateId = 3;
}

enum TaskState {
  TaskState_ActivityTaskRunning = 0;
  TaskState_ActivityTaskFinish = 1;
  TaskState_ActivityTaskTaken = 2;
}

enum TimeTypeState {
  TimeTypeState_TimeLimited = 0;
  TimeTypeState_Permanent = 1;
}

message SignReward {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  int32 Status = 4;
}

message ActivityMoonChasingData {
  repeated SignReward EDOLLARs = 1;
}

message Kca {
  repeated SignReward SignInReward = 1;
  repeated SignReward DOLLARca = 2;
  repeated int32 Hca = 3;
  bool NowOpen = 5;
  int64 EndTime = 6;
  int64 NextRefreshTime = 7;
}

enum ActivityType {
  ActivityType_Parkour = 0;
  ActivityType_GatherActivity = 1;
  ActivityType_Sign = 2;
  ActivityType_TowerGuide = 3;
  ActivityType_NewBieCourse = 4;
  ActivityType_WorldNewJourney = 5;
  ActivityType_RougeActivity = 6;
  ActivityType_DoubleInstanceRewardActivity = 7;
  ActivityType_RoleTrialActivity = 8;
  ActivityType_Harvest = 9;
  ActivityType_NewRoleGuideActivity = 10;
  ActivityType_PhantomCollect = 11;
  ActivityType_DailyAdventureActivity = 12;
  ActivityType_LongShanMainActivity = 13;
  ActivityType_BossRushActivity = 14;
  ActivityType_TurnTableActivity = 15;
  ActivityType_PhotoMemoryActivity = 16;
  ActivityType_TrackMoonActivity = 17;
  ActivityType_CircumFluence = 18;
  ActivityType_TowerDefenceActivity = 19;
  ActivityType_TimePointRewardActivity = 20;
  ActivityType_TowerGuideNew = 21;
  ActivityType_TrackMoonPhase = 22;
  ActivityType_RiskHarvest = 23;
  ActivityType_CorniceMeeting = 24;
  ActivityType_BlackCoastTheme = 25;
  ActivityType_RogueWhiteCat = 26;
  ActivityType_ScratchCard = 27;
  ActivityType_PreheatSign = 28;
  ActivityType_MowTower = 29;
  ActivityType_PureUIActivity = 200;
}

enum u0a {
  u0a_None = 0;
  u0a_WithActivity = 1;
  u0a_WithGuideQuest = 2;
}

message ParkourActivityChallenge {
  int32 ChallengeId = 1;
  int64 BeginTime = 2;
  int64 EndTime = 3;
}

message ParkourActivity {
  repeated ParkourActivityChallenge Challenges = 1;
}

message DoubleInstActivityReward {
  int32 GetDoubleInstRwdCount = 1;
}

enum GatherActivityTaskState {
  GatherActivityTaskState_GatherLock = 0;
  GatherActivityTaskState_GatherRunning = 1;
  GatherActivityTaskState_GatherInComplete = 2;
  GatherActivityTaskState_GatherDone = 3;
  GatherActivityTaskState_GatherTakeReward = 4;
}

message GatherTaskDoneInfo {
  int32 TaskId = 1;
  int32 State = 2;
}

message GatherActivityInfo {
  repeated GatherTaskDoneInfo GatherTaskDoneInfo = 1;
}

enum SignState {
  SignState_NeedSign = 0;
  SignState_CanGetReward = 1;
  SignState_Received = 2;
}

message SignActivity {
  repeated int32 SignStateList = 1;
}

message HarvestPointReward {
  int32 Id = 1;
  int32 State = 2;
}

message HarvestLevelReward {
  int32 Id = 1;
  int32 StartTime = 2;
  bool Challenges = 3;
  int32 Points = 4;
  int32 Diff = 5;
  int32 State = 6;
}

message HarvestActivity {
  repeated HarvestPointReward HarvestPointRewards = 1;
  repeated HarvestLevelReward HarvestLevelRewards = 2;
}

message NewBieCourseActivity {
  repeated int32 HadTakeReward = 1;
}

message RoleTrialTask {
  int32 RoleId = 1;
  int32 ChallengeState = 2;
}

message RoleTrialInfoActivity {
  repeated RoleTrialTask RoleTrialTask = 1;
}

enum PhantomCollectRewardType {
  PhantomCollectRewardType_PhantomsCollect = 0;
  PhantomCollectRewardType_DataDock = 1;
  PhantomCollectRewardType_PhantomSideQuest = 2;
  PhantomCollectRewardType_Max = 3;
}

message PhantomCollectReward {
  oneof Data {
    PhantomCollectProgress Progress = 3;
  }

  int32 Type = 1;
  int32 State = 2;
}

message PhantomCollectProgress {
  repeated int32 Phantoms = 1;
}

message PhantomCollectActivity {
  repeated PhantomCollectReward PhantomCollectRewards = 1;
}

message ActivityRogueData {
  int64 BeginOpenTime = 1;
  int64 EndOpenTime = 2;
  RoguelikeSeason RoguelikeSeason = 3;
}

message RoguelikeTokenList {
  int32 Id = 1;
  bool IsReceive = 2;
}

message RoguelikeMemoryRewardItemData {
  int32 Id = 1;
  bool IsReceive = 2;
}

message RoguelikeSeason {
  int32 SeasonId = 1;
  int64 StartTime = 2;
  int64 EndTime = 3;
  repeated RoguelikeTokenList RoguelikeTokenList = 4;
  repeated RoguelikeMemoryRewardItemData SeasonRewardList = 5;
  int32 TokenItemCount = 6;
  int32 Lvl2 = 7; // TODO: RogueBlackFlowerReward ..
  int32 Rvl2 = 8; // TODO: RogueBlackFlowerReward ..
}

message ActivityRoleGiveData {
  bool IsGetReward = 1;
}

message ActivityCorniceMeetingData {
  int64 UnlockTime = 1;
  map<int32, ActivityCorniceMeetingLevelEntryData> LevelEntryData = 2;
}

message ActivityData {
  int32 Id = 1;
  int32 Type = 2;
  int64 BeginShowTime = 3;
  int64 EndShowTime = 4;
  int64 BeginOpenTime = 5;
  int64 EndOpenTime = 6;
  bool IsUnlock = 7;
  repeated int32 CompletePreQuests = 8;
  bool IsFirstOpen = 9;
  repeated int32 Uvl1 = 30;
  int32 Pvl1 = 33;
  oneof Data {
    ParkourActivity ParkourActivity = 10;
    SignActivity SignActivity = 11;
    NewBieCourseActivity NewBieCourseActivity = 12;
    DoubleInstActivityReward DoubleInstActivityReward = 13;
    HarvestActivity HarvestActivity = 14;
    RoleTrialInfoActivity RoleTrialInfoActivity = 15;
    PhantomCollectActivity PhantomCollectActivity = 16;
    GatherActivityInfo GatherActivityInfo = 17;
    DailyAdventureActivityData DailyAdventureActivityData = 18;
    ActivityRogueData Wps = 19;
    vks Kps = 20;
    ActivityTurnTableData ActivityTurnTableData = 21;
    Xps Xps = 22;
    ActivityMoonChasingData ActivityMoonChasingData = 23;
    xYs2 xYs = 24;
    Lzs pzs = 25;
    Kca Qca = 26;
    ActivityRoleGiveData ActivityRoleGiveData = 27;
    ActivityCorniceMeetingData ActivityCorniceMeetingData = 28;
    Bvl1 Bvl2 = 29;
    ActivityBlackCoastData ActivityBlackCoastData = 31;
    qvl2 qvl = 32;
    Gvl1 Gvl = 34;
    Ovl1 Ovl = 35;
    Nvl2 Nvl = 36;
  }
}

// MessageId: 24295 (Request)
message ActivityRequest {
}

// MessageId: 16833 (Response)
message ActivityResponse {
  repeated ActivityData Activities = 238;
  ErrorCode ErrorCode = 243;
}

// MessageId: 18635 (Request)
message ActivityFirstReadRequest {
  int32 ActivityId = 135;
}

// MessageId: 28927 (Response)
message ActivityFirstReadResponse {
  ErrorCode ErrorCode = 168;
}

// MessageId: 17635 (Notify)
message ActivityUpdateNotify {
  repeated ActivityData Activities = 137;
}

// MessageId: 24318 (Notify)
message ActivityDisableNotify {
  repeated int32 ActivityId = 96;
}

// MessageId: 21022 (Request)
message SignActivityRequest {
  int32 ActivityId = 78;
  int32 Index = 254;
}

// MessageId: 25066 (Response)
message SignActivityResponse {
  ErrorCode ErrorCode = 121;
  map<int32, int32> ItemMap = 12;
}

// MessageId: 20018 (Notify)
message SignActivitySignStateNotify {
  int32 ActivityId = 163;
  int32 Index = 80;
  int32 SignState = 119;
}

// MessageId: 16706 (Notify)
message SignActivityKeepTimeNotify {
  int32 ActivityId = 205;
  int64 KeepTime = 164;
}

// MessageId: 15437 (Request)
message HarvestActivityPointRequest {
  int32 ActivityId = 59;
  int32 Id = 80;
}

// MessageId: 20920 (Response)
message HarvestActivityPointResponse {
  ErrorCode ErrorCode = 53;
  map<int32, int32> ItemMap = 85;
}

// MessageId: 21480 (Request)
message HarvestActivityLevelRequest {
  int32 ActivityId = 43;
  int32 InstId = 214;
}

// MessageId: 19808 (Response)
message HarvestActivityLevelResponse {
  ErrorCode ErrorCode = 164;
  map<int32, int32> ItemMap = 79;
}

// MessageId: 22096 (Request)
message HarvestActivityLevelDiffRequest {
  int32 ActivityId = 176;
  int32 InstId = 121;
  int32 Diff = 69;
}

// MessageId: 27618 (Response)
message HarvestActivityLevelDiffResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 26827 (Notify)
message HarvestActivityPointNotify {
  int32 ActivityId = 117;
  repeated HarvestPointReward HarvestPointReward = 254;
}

// MessageId: 27794 (Notify)
message HarvestActivityLevelNotify {
  int32 ActivityId = 95;
  repeated HarvestLevelReward HarvestLevelRewards = 172;
}

// MessageId: 22285 (Request)
message HarvestActivityResultRequest {
}

// MessageId: 29656 (Response)
message HarvestActivityResultResponse {
}

// MessageId: 18079 (Notify)
message HarvestActivityResultNotify {
  bool Succ = 219;
  int32 Record = 85;
  int32 MaxRecord = 63;
  ErrorCode ErrorCode = 4;
}

// MessageId: 17026 (Request)
message PhantomCollectReceiveRequest {
  int32 ActivityId = 136;
  int32 Type = 61;
}

// MessageId: 28651 (Response)
message PhantomCollectReceiveResponse {
  ErrorCode ErrorCode = 203;
  map<int32, int32> ItemMap = 179;
}

// MessageId: 16703 (Notify)
message PhantomCollectUpdateNotify {
  int32 ActivityId = 11;
  PhantomCollectReward PhantomCollectReward = 229;
}

// MessageId: 27335 (Request)
message TurntableRunRequest {
  int32 ActivityId = 137;
}

// MessageId: 24661 (Response)
message TurntableRunResponse {
  ErrorCode ErrorCode = 64;
  int32 N6n1 = 6;
  bool nMs1 = 79;
  map<int32, int32> ItemMap = 235;
}

message ActivityTurnTableData {
  bool sMs2 = 1;
  int32 GroupId = 2;
  repeated int32 Rewards = 3;
}

// MessageId: 29411 (Request)
message TrackMoonActivityRewardRequest {
  int32 ActivityId = 241;
}

// MessageId: 15298 (Response)
message TrackMoonActivityRewardResponse {
  ErrorCode ErrorCode = 249;
}

message ActivityCorniceMeetingLevelEntryData {
  int32 MaxScore = 1;
  int32 RemainTime = 2;
  int64 UnlockTime = 3;
  repeated int32 RewardedMap = 4;
}

// MessageId: 29741 (Request)
message CorniceMeetingRewardRequest {
  int32 LevelPlayId = 189;
  int32 ScoreIndex = 192;
}

// MessageId: 25886 (Response)
message CorniceMeetingRewardResponse {
  ErrorCode ErrorCode = 164;
}

/*
super(...arguments), this.vSn = e => {
    var t = ActivityCorniceMeetingController.GetCurrentActivityData();
    t && (t = t.GetLevelEntryData(e._ps)) && (e.Hvl && (t.MaxScore = e.SMs), t.CurrentScore = e.SMs,
        e.$vl && (t.RemainTime = e.Fvl), EventSystem_1.EventSystem.Emit(EventDefine_1.EEventName
            .RefreshCorniceMeetingRedDot, e._ps), UiManager_1.UiManager.OpenView(
            "CorniceMeetingSettleView", e))
}
*/
// MessageId: 18800 (Notify)
message CorniceMeetingActivityDataNotify {
  int32 LevelPlayId = 80;
  int32 Score = 238;
  int32 RemainTime = 68;
  bool Hvl = 30; // TODO: .SetUIActive(this.Data.$vl && !this.Data.Hvl)
  bool DOLLARvl = 213;
}

// MessageId: 29477 (Request)
message CorniceMeetingChallengeTransRequest {
  int32 LevelPlayId = 141;
}

// MessageId: 15484 (Response)
message CorniceMeetingChallengeTransResponse {
  ErrorCode ErrorCode = 162;
}

message DOLLARyl {// Stage Info???
  int32 Id = 1;
  repeated SignReward Tasks = 2;
}

message ActivityBlackCoastData {
  repeated DOLLARyl StageData = 1;
  repeated int32 RewardIds = 2;
}

// MessageId: 29629 (Notify)
message ActivityBlackCoastDataNotify {
  repeated DOLLARyl StageData = 251;
}

// MessageId: 21071 (Request)
message ActivityBlackCoastTaskRewardRequest {
  int32 TaskId = 191;
}

// MessageId: 19551 (Response)
message ActivityBlackCoastTaskRewardResponse {
  ErrorCode ErrorCode = 107;
}

// MessageId: 23933 (Request)
message ActivityBlackCoastDataProgressRewardRequest {
  repeated int32 AllAvailableProgressRewardIds = 35;
  int32 ActivityId = 241;
}

// MessageId: 28419 (Response)
message ActivityBlackCoastDataProgressRewardResponse {
  repeated int32 RewardIds = 179;
  ErrorCode ErrorCode = 46;
}

message qvl2 {
  int32 MaxEnergy = 1;
  repeated int32 EnergyRewardIds = 3;
  repeated Qvl1 RoleInstanceList = 5;
  repeated Kvl Kvl = 6;
  repeated int32 BossRewardIds = 7;
  repeated AllLimitTimeReward AllLimitTimeReward = 8;
  map<int32, int32> zvl2 = 9;
  int64 Jvl1 = 10;
  int64 Zvl1 = 11;
  repeated Wyl1 eMl = 12;
  int32 tMl1 = 13;
  repeated int32 iMl2 = 14;
}

message AllLimitTimeReward {
  SignState SignState = 1;
  int32 CurProgress = 2;
  int32 Target = 3;
  int32 ConfigId = 4;
}

message Qvl1 {
  int32 InstId = 1;
  bool IsUnlock = 2;
  bool oMl1 = 3;
}

message Wyl1 {
  int32 InstId = 1;
  bool IsUnlock = 2;
  bool oMl1 = 3;
  int64 yzs = 4;
}

message Kvl {
  int32 Index = 1;
  int32 LevelPlayId = 2;
  SignState SignState = 3;
  bool IsUnlock = 4;
  int64 UnlockTime = 5;
  int32 PlayTime = 6;
}

// MessageId: 23676 (Notify)
message DreamLinkActivityDataNotify {
  int32 ConfigId = 52;
  bool IsSuccess = 88;
  bool IsNewRecord = 247;
  int32 UseTime = 122;
}

// MessageId: 21640 (Notify)
message RoguelikeActivityDataNotify {
  int32 MapId = 253;
}

// MessageId: 15868 (Request)
message RoguelikeActivityDataRequest {
  int32 MapId = 209;
}

// MessageId: 21660 (Response)
message RoguelikeActivityDataResponse {
  ErrorCode ErrorCode = 217;
}

// MessageId: 21561 (Notify)
message Npl1 {
  bool nMl2 = 131;
  int32 Yma = 158;
  int32 sMl2 = 73;
  int32 aMl = 1;
  int32 lMl1 = 145;
  bool IsNewRecord = 55;
  int32 hMl1 = 138;
  int32 CostTime = 217;
}

// MessageId: 25690 (Request)
message RoguelikeSetDungeonProgressRequest {
  int32 ActivityId = 47;
  int32 Value = 239;
}

// MessageId: 22117 (Response)
message RoguelikeSetDungeonProgressResponse {
  ErrorCode ErrorCode = 94;
}

// MessageId: 17591 (Notify)
message DreamLinkActivityDataUpdateNotify {
  int32 ActivityId = 222;
  qvl2 qvl = 37;
}

// MessageId: 24222 (Notify)
message DreamLinkActivityDataLimitTimeUpdateNotify {
  repeated AllLimitTimeReward AllLimitTimeReward = 175;
}

// MessageId: 21635 (Request)
message DreamLinkLimitTimeRewardRequest {
  int32 Index = 162;
}

// MessageId: 18105 (Response)
message DreamLinkLimitTimeRewardResponse {
  ErrorCode ErrorCode = 113;
}

// MessageId: 16511 (Request)
message DreamLinkRoguelikeRoleInstStartRequest {
  int32 ActivityId = 88;
  int32 Index = 224;
}

// MessageId: 23792 (Response)
message DreamLinkRoguelikeRoleInstStartResponse {
  ErrorCode ErrorCode = 184;
}

// MessageId: 24632 (Request)
message DreamLinkEnergyRewardRequest {
  int32 ActivityId = 187;
  int32 Index = 60;
}

// MessageId: 20315 (Response)
message DreamLinkEnergyRewardResponse {
  ErrorCode ErrorCode = 203;
}

// MessageId: 26788 (Request)
message ofl2 {
  int32 ActivityId = 84;
  repeated int32 RoleList = 120;
}

// MessageId: 26477 (Response)
message nfl1 {
  ErrorCode ErrorCode = 166;
}

// MessageId: 27373 (Request)
message DreamLinkBossRewardRequest {
  int32 ActivityId = 171;
  int32 index = 68;
}

// MessageId: 19524 (Response)
message DreamLinkBossRewardResponse {
  ErrorCode ErrorCode = 133;
}

// MessageId: 26098 (Request)
message DreamLinkRunTaskRewardRequest {
  int32 ActivityId = 136;
  int32 Index = 53;
}

// MessageId: 19213 (Response)
message DreamLinkRunTaskRewardResponse {
  ErrorCode ErrorCode = 179;
}

message Qyl1 {
  int32 gol = 1;
  int64 yzs = 2;
  map<int32, Kyl1> _Ml = 3;
  map<int32, int32> uMl1 = 4;
}

message Kyl1 {
  int32 ItemId = 1;
  int32 Num = 2;
}

message ScratchTicketConditionData {
  int32 Id = 1;
  int32 Progress = 2;
  int32 MaxLimit = 3;
}

message Gvl1 {
  repeated Qyl1 cMl = 1;
  repeated ScratchTicketConditionData ConditionData = 2;
}

// MessageId: 20943 (Notify)
message ScratchCardCountInfoNotify {
  repeated ScratchTicketConditionData ConditionData = 156;
}

// MessageId: 18668 (Request)
message SendScratchCardRewardRequest {
  int32 gol = 149;
  int32 index = 182;
}

// MessageId: 25768 (Response)
message SendScratchCardRewardResponse {
  int32 OpenType = 168;
  map<int32, Kyl1> mMl2 = 171;
  map<int32, int32> ItemMap = 133;
  map<int32, int32> uMl1 = 9;
  int32 Error = 176;
}

// MessageId: 17530 (Request)
message SendScratchCardActivityInfoRequest {
  int32 ActivityId = 129;
}

// MessageId: 27888 (Response)
message SendScratchCardActivityInfoResponse {
  Gvl1 Info = 160;
  int32 Error = 149;
}

message Yyl {
  int32 a1l = 1;
  int64 yzs = 2;
  bool Rewarded = 3;
}

message Ovl1 {
  repeated Yyl CMl = 1;
}

message pMl2 {
  int64 gMl1 = 1;
  int64 fMl1 = 2;
  bool l1l = 3;
}

// MessageId: 28220 (Request)
message RequestPreheatSignRewardRequest {
  int32 a1l = 79;
  bool l1l = 28;
}

// MessageId: 29171 (Response)
message RequestPreheatSignRewardResponse {
  int32 Error = 149;
  pMl2 pMl = 174;
}

// MessageId: 22412 (Request)
message RequestPreheatSignSurveyInfoRequest {
  int32 a1l = 236;
}

// MessageId: 16718 (Response)
message RequestPreheatSignSurveyInfoResponse {
  pMl2 pMl = 89;
  int32 Error = 172;
}

enum zyl1 {
  zyl_CanNoReward = 0;
  zyl_CanReward = 1;
  zyl_mLs = 2;
}

message Jyl1 {
  int32 vMl = 1;
  int64 yzs = 2;
  bool IsUnlock = 3;
  int32 Score = 4;
  map<int32, int32> MMl1 = 5;
  repeated int32 Dks = 6;
  repeated int32 SMl1 = 7;
  repeated int32 yMl1 = 8;
}

message Nvl2 {
  repeated Jyl1 EMl = 1;
}

// MessageId: 19607 (Request)
message DOLLARpl {
}

// MessageId: 17970 (Response)
message jpl2 {
  ErrorCode ErrorCode = 229;
}

// MessageId: 23076 (Notify)
message Wpl1 {
  int32 vMl = 149;
  int32 IMl1 = 194;
  int32 TMl2 = 239;
}

// MessageId: 20464 (Notify)
message Qpl1 {
  int32 vMl = 152;
  int32 IMl1 = 98;
  int32 TMl2 = 159;
  int32 LMl2 = 238;
  int32 RMl2 = 34;
  int32 AMs2 = 214;
}

// MessageId: 18497 (Notify)
message zpl1 {
  repeated Jyl1 AMl = 135;
}

// MessageId: 22368 (Request)
message Kpl2 {
  int32 N6n1 = 75;
}

// MessageId: 24345 (Response)
message Xpl2 {
  ErrorCode ErrorCode = 92;
}

enum ChallengeState {
  ChallengeState_Running = 0;
  ChallengeState_WaitTakeReward = 1;
  ChallengeState_Finish = 2;
}

// MessageId: 29578 (Request)
message TrialRoleRewardRequest {
  int32 roleId = 180;
}

// MessageId: 28998 (Response)
message TrialRoleRewardResponse {
  ErrorCode ErrorCode = 233;
}

// MessageId: 17668 (Notify)
message RoleTrialSettleNotify {
  ErrorCode ErrorCode = 51;
}

enum DailyAdventureTaskState {
  DailyAdventureTaskState_DailyAdventureTaskRunning = 0;
  DailyAdventureTaskState_DailyAdventureTaskFinish = 1;
  DailyAdventureTaskState_DailyAdventureTaskTaken = 2;
}

message DailyAdventureActivityTask {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  int32 Status = 4;
}

message DailyAdventureActivityData {
  repeated DailyAdventureActivityTask DailyAdventureActivityTasks = 1;
  repeated int32 PtRewardTaken = 2;
}

// MessageId: 19444 (Notify)
message DailyAdventureTaskUpdateNotify {
  repeated DailyAdventureActivityTask DailyAdventureActivityTasks = 215;
  bool DMl = 57;
}

// MessageId: 21184 (Request)
message DailyAdventurePtRewardRequest {
  int32 Id = 134;
}

// MessageId: 20912 (Response)
message DailyAdventurePtRewardResponse {
  ErrorCode ErrorCode = 161;
}

// MessageId: 17944 (Request)
message DailyAdventureTaskRewardRequest {
  int32 Id = 153;
}

// MessageId: 20003 (Response)
message DailyAdventureTaskRewardResponse {
  ErrorCode ErrorCode = 73;
}

message Sks2 {
  int32 Id = 1;
  repeated Eks Tasks = 2;
}

message Eks {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  bool IsFinished = 4;
  bool IsTaken = 5;
  bool Unlock = 6;
}

message vks {
  repeated Sks2 gMs2 = 1;
}

// MessageId: 16360 (Notify)
message LongShanActivityDataNotify {
  repeated Sks2 gMs2 = 8;
}

// MessageId: 25395 (Request)
message LongShanTakeTaskRewardRequest {
  repeated int32 TaskIds = 26;
}

// MessageId: 27177 (Response)
message LongShanTakeTaskRewardResponse {
  int32 Error = 246;
}

enum yks {
  yks_Incomplete = 0;
  yks_Claimable = 1;
  yks_Claimed = 2;
}

enum Iks {
  Iks_BuffEmpty = 0;
  Iks_BuffSelected = 1;
  Iks_BuffLocked = 2;
  Iks_BuffInactive = 3;
}

enum Tks {
  Tks_F6n = 0;
  Tks_SMs = 1;
}

message Xps {
  repeated Lks vMs = 1;
  repeated Rks2 pMs = 2;
  repeated int32 MMs1 = 3;
}

message Lks {
  int32 InstId = 1;
  int32 StartTime = 2;
  bool Challenges = 3;
  int32 Score = 4;
  repeated int32 EMs2 = 5;
  repeated Dks yMs = 6;
  int32 IMs2 = 7;
  repeated int32 ial = 8;
  repeated int32 wMl = 9;
}

message Rks2 {
  int32 N6n1 = 1;
  int32 TMs2 = 2;
}

message Dks {
  int32 BuffId = 1;
  int32 q6n = 2;
  int32 G6n1 = 3;
}

// MessageId: 26582 (Request)
message BossRushGetRewardRequest {
  int32 ActivityId = 103;
  int32 N6n1 = 181;
  int32 k6n = 33;
}

// MessageId: 26723 (Response)
message BossRushGetRewardResponse {
  ErrorCode ErrorCode = 62;
}

// MessageId: 21541 (Request)
message BossRushRequestSettlementRequest {
}

// MessageId: 28779 (Response)
message BossRushRequestSettlementResponse {
  ErrorCode ErrorCode = 209;
}

// MessageId: 22965 (Notify)
message pfs2 {
  int32 ActivityId = 112;
  int32 InstId = 197;
  int32 LMs1 = 99;
  int32 RMs2 = 133;
  int32 DMs1 = 134;
  int32 AMs2 = 176;
  int32 UMl2 = 126;
}

// MessageId: 27072 (Notify)
message Mfs2 {
  int32 ActivityId = 217;
  repeated Lks vMs = 161;
  repeated Rks2 pMs = 13;
  repeated int32 MMs1 = 249;
}

// MessageId: 17602 (Notify)
message BossRushFailNotify {
}

// MessageId: 21231 (Request)
message RefreshBossRushBuffInGameRequest {
}

// MessageId: 27516 (Response)
message RefreshBossRushBuffInGameResponse {
  ErrorCode ErrorCode = 226;
  repeated int32 BuffIds = 187;
}

// MessageId: 28352 (Request)
message RequestBossRushChooseBuffInGameRequest {
  int32 Index = 25;
}

// MessageId: 20091 (Response)
message RequestBossRushChooseBuffInGameResponse {
  ErrorCode ErrorCode = 225;
}

// MessageId: 24594 (Request)
message BossRushGetLevelRewardRequest {
  int32 ral = 75;
  int32 index = 171;
}

// MessageId: 16897 (Response)
message BossRushGetLevelRewardResponse {
  int32 Error = 233;
}

message xYs2 {
  repeated OYs Rewards = 1;
}

message OYs {
  int32 Id = 1;
  int64 bYs1 = 2;
  bool Rewarded = 3;
  bool CanGetReward = 4;
}

// MessageId: 17770 (Request)
message TimePointGetRewardRequest {
  int32 Id = 140;
}

// MessageId: 15465 (Response)
message TimePointGetRewardResponse {
  ErrorCode ErrorCode = 250;
}

message Lzs {
  repeated Rzs Mzs = 1;
  repeated int32 Szs = 2;
  int32 Yma = 3;
}

message Rzs {
  int32 Id = 1;
  int32 Score = 2;
  bool Rewarded = 3;
  bool Ezs = 4;
  int64 yzs = 5;
  int32 tBs2 = 6;
  int32 PassTime = 7;
}

message Azs {
  int32 Id = 1;
  int32 Level = 2;
  int32 Exp = 3;
}

// MessageId: 23170 (Notify)
message TowerDefenseActivityInfoUpdateNotify {
  Lzs Izs = 201;
}

// MessageId: 26556 (Notify)
message TowerDefenseInstanceInfoUpdateNotify {
  repeated Rzs Mzs = 221;
}

// MessageId: 17146 (Notify)
message TowerDefensePhantomInfoUpdateNotify {
  repeated Azs Phantoms = 202;
}

// MessageId: 19386 (Request)
message TowerDefenseInstanceRewardRequest {
  repeated int32 Ids = 24;
}

// MessageId: 16070 (Response)
message TowerDefenseInstanceRewardResponse {
  ErrorCode ErrorCode = 94;
}

// MessageId: 17627 (Request)
message TowerDefenseScoreRewardRequest {
  repeated int32 Ids = 156;
}

// MessageId: 29506 (Response)
message TowerDefenseScoreRewardResponse {
  ErrorCode ErrorCode = 20;
}

// MessageId: 20087 (Notify)
message vzs {
  bool Success = 106;
  int32 Score = 142;
  int32 tBs2 = 203;
  int32 InstId = 18;
  int32 PassTime = 68;
  int32 PMl1 = 152;
}

message Mta2 {
  int32 roleId = 1;
  Azs Phantom = 2;
}

// MessageId: 22312 (Notify)
message _ta {
  repeated Mta2 RoleList = 162;
}

// MessageId: 22392 (Notify)
message jgl2 {
  int32 PlayerId = 142;
  int32 roleId = 135;
  int64 xMl = 102;
}

// MessageId: 15464 (Notify)
message Wgl2 {
  int32 PlayerId = 163;
  int64 xMl = 39;
}

message Zyl2 {
  int32 Id = 1;
  int64 yzs = 2;
  bool IsUnlock = 3;
  int32 Score = 4;
  bool Rewarded = 5;
  bool bMl = 6;
}

message eEl2 {
  int32 Id = 1;
  int32 Progress = 2;
  repeated tEl2 BMl = 3;
}

message tEl2 {
  int32 Id = 1;
  int32 count = 2;
}

message Bvl1 {
  repeated Zyl2 kMl = 1;
  repeated int32 qMl = 2;
  repeated int32 GMl2 = 3;
  repeated int32 OMl2 = 4;
  repeated int32 NMl1 = 5;
}

// MessageId: 24181 (Notify)
message SyncProtocolRiskHarvestEndNotify {
  int32 Id = 52;
  int32 Yma = 179;
  int32 sMl2 = 6;
  int32 FMl2 = 20;
  bool bMl = 62;
}

// MessageId: 27435 (Notify)
message SyncProtocolRiskHarvestInstUpdateNotify {
  repeated Zyl2 kMl = 118;
}

// MessageId: 17247 (Notify)
message SyncProtocolRiskHarvestArtifactNotify {
  eEl2 VMl = 20;
}

// MessageId: 16196 (Notify)
message SyncProtocolRiskHarvestBuffUpdateNotify {
  eEl2 VMl = 1;
  repeated int32 HMl2 = 81;
  repeated int32 DOLLARMl = 147;
}

// MessageId: 18995 (Notify)
message SyncProtocolRiskHarvestBuffUnlockNotify {
  repeated int32 jMl1 = 21;
}

// MessageId: 25625 (Notify)
message SyncProtocolRiskHarvestActivityUpdateNotify {
  Bvl1 Izs = 205;
}

// MessageId: 20821 (Request)
message MowingRiskHarvestInstRewardRequest {
  int32 Id = 44;
}

// MessageId: 15691 (Response)
message MowingRiskHarvestInstRewardResponse {
  ErrorCode ErrorCode = 155;
}

// MessageId: 28452 (Request)
message MowingRiskHarvestScoreRewardRequest {
  int32 Id = 191;
}

// MessageId: 21407 (Response)
message MowingRiskHarvestScoreRewardResponse {
  ErrorCode ErrorCode = 242;
}

// MessageId: 29331 (Request)
message Igl {
  int32 Id = 102;
}

// MessageId: 29308 (Response)
message Tgl {
  ErrorCode ErrorCode = 58;
}

// MessageId: 23314 (Request)
message Lgl {
  int32 Id = 178;
}

// MessageId: 27028 (Response)
message Rgl {
  ErrorCode ErrorCode = 45;
}

// MessageId: 16079 (Request)
message MowingRiskHarvestSettleRequest {
}

// MessageId: 21889 (Response)
message MowingRiskHarvestSettleResponse {
  ErrorCode ErrorCode = 24;
}

enum DetectionType {
  DetectionType_NormalMonster = 0;
  DetectionType_Dungeon = 1;
  DetectionType_SilentArea = 2;
}

message AdventreTask {
  int32 Id = 1;
  int32 State = 2;
  int32 AdventreProgress = 3;
}

enum AdventreTaskSate {
  AdventreTaskSate_UnFinish = 0;
  AdventreTaskSate_Finish = 1;
  AdventreTaskSate_Received = 2;
}

message AdventureManualData {
  repeated AdventreTask AdventreTask = 1;
  int32 NowChapter = 2;
  int32 ReceivedChapter = 3;
}

message AdventureItemData {
  int32 ItemId = 1;
  int32 ItemNum = 2;
}

message AdventureRewardData {
  int32 DropId = 1;
  repeated AdventureItemData Items = 2;
}

message DetectionTarget {
  int32 Id = 1;
  int32 Type = 2;
  bool UnlockState = 3;
  int64 RefresherTime = 4;
  int32 DetectionId = 5;
  int32 IsTrace = 6;
}

message DetectionUnlock {
  repeated int32 MonsterDetectionIds = 1;
  repeated int32 DungeonDetectionIds = 2;
  repeated int32 SilentAreaDetectionIds = 3;
}

message SelectDetectionTarget {
  int32 DetectionId = 1;
  int32 Type = 2;
  int32 Id = 3;
  int32 IsTrace = 4;
}

// MessageId: 19569 (Request)
message AdventureManualDataRequest {
  int32 PlayerId = 105;
}

// MessageId: 17339 (Response)
message AdventureManualDataResponse {
  ErrorCode ErrorCode = 67;
  AdventureManualData AdventureManualData = 224;
}

// MessageId: 26322 (Request)
message GetAdventureRewardRequest {
  int32 Id = 206;
}

// MessageId: 27346 (Response)
message GetChapterRewardResponse {
  ErrorCode ErrorCode = 65;
  int32 Id = 139;
}

// MessageId: 26380 (Request)
message ChapterRewardRequest {
  int32 Chapter = 173;
}

// MessageId: 24646 (Response)
message ChapterRewardResponse {
  ErrorCode ErrorCode = 1;
  int32 Chapter = 252;
}

// MessageId: 18507 (Request)
message DetectionRequest {
  int32 DetectionType = 218;
  repeated int32 DetectionId = 141;
  int32 DetectionConfId = 66;
}

// MessageId: 23412 (Response)
message DetectionResponse {
  ErrorCode ErrorCode = 144;
  repeated DetectionTarget DetectionTarget = 56;
  int32 DetectionConfId = 155;
}

// MessageId: 15456 (Notify)
message AdventureUpdateNotify {
  repeated AdventureManualData AdventureManualData = 116;
}

// MessageId: 28624 (Request)
message AdventureManualRequest {
  int32 PlayerId = 246;
}

enum SlientFirstAwardState {
  SlientFirstAwardState_NotUnlock = 0;
  SlientFirstAwardState_NotFinish = 1;
  SlientFirstAwardState_oMl = 2;
  SlientFirstAwardState_ovs = 3;
}

// MessageId: 18966 (Response)
message AdventureManualResponse {
  ErrorCode ErrorCode = 164;
  AdventureManualData AdventureManualData = 153;
  repeated DetectionTarget DetectionTarget = 204;
  repeated AdventureRewardData AdventureRewardData = 42;
  DetectionUnlock DetectionUnlocks = 95;
  SelectDetectionTarget NowSelectDetectionTarget = 72;
  map<int32, int32> SlientFirstAwardMap = 40;
}

// MessageId: 15240 (Request)
message ReceivedSilentFirstAwardRequest {
  int32 Id = 122;
}

// MessageId: 20143 (Response)
message ReceivedSilentFirstAwardResponse {
  ErrorCode ErrorCode = 87;
  repeated string ErrorParams = 18;
  map<int32, int32> ItemMap = 26;
}

// MessageId: 21696 (Notify)
message SilentFirstAwardNotify {
  int32 Id = 244;
}

// MessageId: 23737 (Notify)
message UpdateMonsterUnlockNotify {
  DetectionUnlock DetectionUnlocks = 3;
}

// MessageId: 21642 (Request)
message SelectDetectionTargetRequest {
  SelectDetectionTarget SelectDetectionTarget = 145;
  bool IsCancelSelect = 179;
}

// MessageId: 24316 (Response)
message SelectDetectionTargetResponse {
  ErrorCode ErrorCode = 209;
  SelectDetectionTarget SelectDetectionTarget = 201;
}

// MessageId: 16497 (Notify)
message FollowDetectionTargetUpdateNotify {
  repeated DetectionTarget DetectionTarget = 14;
}

// MessageId: 23240 (Request)
message MonsterDetectionInfoRequest {
  repeated DetectionTarget Params = 153;
}

// MessageId: 23536 (Response)
message MonsterDetectionInfoResponse {
  repeated DetectionTarget DetectionTarget = 152;
}

// MessageId: 18765 (Request)
message NormalMonsterManualInfoRequest {
  int32 DetectionId = 210;
}

// MessageId: 19974 (Response)
message NormalMonsterManualInfoResponse {
  ErrorCode ErrorCode = 133;
  repeated DetectionTarget DetectionTarget = 146;
}

message UnlockDetectionLabelInfo {
  repeated sint32 UnlockedGuideIds = 1;
  repeated sint32 UnlockedDetectionTextIds = 2;
}

// MessageId: 19007 (Request)
message GetDetectionLabelInfoRequest {
}

// MessageId: 16889 (Response)
message GetDetectionLabelInfoResponse {
  UnlockDetectionLabelInfo UnlockLabelInfo = 220;
}

// MessageId: 20751 (Notify)
message AddUnlockedGuideNotify {
  repeated sint32 UnlockedGuideIds = 188;
}

// MessageId: 19726 (Notify)
message AddUnlockedDetectionTextNotify {
  repeated sint32 UnlockedDetectionTextIds = 236;
}

// MessageId: 22697 (Notify)
message AdviceSettingNotify {
  bool IsShow = 232;
}

// MessageId: 27834 (Request)
message AdviceSetRequest {
  bool IsShow = 6;
}

// MessageId: 20077 (Response)
message AdviceSetResponse {
  bool IsShow = 11;
  ErrorCode ErrorCode = 101;
}

message PbAdvice {
  int64 Id = 1;
  int32 AreaId = 2;
  repeated PbAdviceContent Contents = 3;
  int32 UpVote = 4;
}

message AdviceComponentPb {
  PbAdvice Advice = 1;
  int32 PlayerId = 2;
  string PlayerName = 3;
}

// MessageId: 23112 (Notify)
message AdviceContentUpdateNotify {
  int64 Id = 73;
  repeated PbAdviceContent Contents = 217;
}

// MessageId: 24857 (Notify)
message AdviceVoteUpdateNotify {
  int64 Id = 165;
  int32 UpVote = 88;
}

enum PbAdviceContentType {
  PbAdviceContentType_Sentence = 0;
  PbAdviceContentType_Conjunction = 1;
  PbAdviceContentType_Expression = 2;
  PbAdviceContentType_c8n = 3;
}

message PbAdviceContent {
  int32 Type = 1;
  int32 Id = 2;
  int32 Word = 3;
}

// MessageId: 20501 (Request)
message AdviceRequest {
}

// MessageId: 25841 (Response)
message AdviceResponse {
  repeated PbAdvice Advices = 233;
  repeated int64 UpVoteIds = 151;
  ErrorCode ErrorCode = 226;
}

// MessageId: 27399 (Notify)
message AdviceUpdateNotify {
  repeated int64 UpVoteIds = 32;
}

// MessageId: 28218 (Request)
message AdviceCreateRequest {
  Vector Pos = 165;
  Rotator Rot = 221;
  repeated PbAdviceContent Contents = 124;
}

// MessageId: 16616 (Response)
message AdviceCreateResponse {
  PbAdvice Advice = 145;
  ErrorCode ErrorCode = 128;
}

// MessageId: 29992 (Request)
message AdviceModifyRequest {
  int64 Id = 45;
  repeated PbAdviceContent Contents = 207;
}

// MessageId: 26653 (Response)
message AdviceModifyResponse {
  ErrorCode ErrorCode = 29;
}

// MessageId: 27608 (Request)
message AdviceDeleteRequest {
  int64 Id = 97;
}

// MessageId: 23096 (Response)
message AdviceDeleteResponse {
  ErrorCode ErrorCode = 155;
}

enum PbAdviceVoteType {
  PbAdviceVoteType_Up = 0;
  PbAdviceVoteType_Cancel = 1;
}

// MessageId: 16211 (Request)
message AdviceVoteRequest {
  int64 Id = 155;
  int32 Type = 82;
}

// MessageId: 29682 (Response)
message AdviceVoteResponse {
  ErrorCode ErrorCode = 171;
}

message Ai {
  message AiHateEntity {
    int64 EntityId = 1;
    int32 HatredValue = 2;
  }


  message Int2Long {
    int32 First = 1;
    int64 Second = 2;
  }


  message iNs {
    int32 First = 1;
    bool Second = 2;
  }


  message rNs {
    repeated BlackboardParam AiBlackboards = 1;
    repeated Ai.AiHateEntity HateList = 2;
    repeated Ai.Int2Long AiBlackboardCd = 3;
  }


  message nNs1 {
    int64 EntityId = 1;
    Ai.rNs AiInfo = 2;
    int32 PlayerId = 3;
  }


  // MessageId: 25248 (Request)
  message AiInformationRequest {
    rNs AiInfo = 254;
  }


  // MessageId: 21888 (Response)
  message AiInformationResponse {
    ErrorCode ErrorCode = 194;
  }


  // MessageId: 18092 (Notify)
  message AiInformationNotify {
    repeated Int2Long AiBlackboardCd = 237;
  }


  // MessageId: 27310 (Request)
  message AiBlackboardsRequest {
    repeated BlackboardParam AiBlackboards = 16;
  }


  // MessageId: 26819 (Response)
  message AiBlackboardsResponse {
    ErrorCode ErrorCode = 86;
  }


  // MessageId: 26394 (Request)
  message AiBlackboardCdRequest {
    repeated Ai.Int2Long AiBlackboardCdModify = 223;
    repeated Ai.iNs AiBlackboardCdComplete = 138;
  }


  // MessageId: 29821 (Response)
  message AiBlackboardCdResponse {
    ErrorCode ErrorCode = 77;
  }


  // MessageId: 29303 (Notify)
  message AiBlackboardCdNotify {
    repeated int32 AiBlackboardCdDel = 185;
    repeated Ai.Int2Long AiBlackboardCdModify = 214;
    repeated Ai.iNs AiBlackboardCdComplete = 255;
  }


  // MessageId: 24583 (Request)
  message AiHateRequest {
    repeated AiHateEntity HateList = 254;
  }


  // MessageId: 15576 (Response)
  message AiHateResponse {
    ErrorCode ErrorCode = 129;
  }


  // MessageId: 27748 (Notify)
  message AiHateNotify {
    repeated AiHateEntity HateList = 88;
  }


  // MessageId: 16519 (Request)
  message AiControlSwitchRequest {
    int64 EntityId = 181;
  }


  // MessageId: 15845 (Response)
  message AiControlSwitchResponse {
    ErrorCode ErrorCode = 71;
  }


  // MessageId: 20495 (Notify)
  message AiControlSwitchNotify {
    repeated nNs1 AiControlSwitchInfos = 102;
  }


  // MessageId: 29304 (Notify)
  message PreAiControlSwitchNotify {
    repeated int64 EntityIds = 22;
  }


}

enum BlackboardParamType {
  BlackboardParamType_BlackboardParamType_None = 0;
  BlackboardParamType_BlackboardParamType_Int = 1;
  BlackboardParamType_BlackboardParamType_IntArray = 2;
  BlackboardParamType_BlackboardParamType_Long = 3;
  BlackboardParamType_BlackboardParamType_LongArray = 4;
  BlackboardParamType_BlackboardParamType_Boolean = 5;
  BlackboardParamType_BlackboardParamType_String = 6;
  BlackboardParamType_BlackboardParamType_StringArray = 7;
  BlackboardParamType_BlackboardParamType_Float = 8;
  BlackboardParamType_BlackboardParamType_FloatArray = 9;
  BlackboardParamType_BlackboardParamType_Vector = 10;
  BlackboardParamType_BlackboardParamType_VectorArray = 11;
  BlackboardParamType_BlackboardParamType_Rotator = 12;
  BlackboardParamType_BlackboardParamType_RotatorArray = 13;
  BlackboardParamType_BlackboardParamType_Entity = 14;
  BlackboardParamType_BlackboardParamType_EntityArray = 15;
}

message IntArrayBlackboard {
  repeated int32 Values = 1;
}

message LongArrayBlackboard {
  repeated int64 Values = 1;
}

message StringArrayBlackboard {
  repeated string Values = 1;
}

message FloatArrayBlackboard {
  repeated float Values = 1;
}

message VectorArrayBlackboard {
  repeated Vector Values = 1;
}

message RotatorArrayBlackboard {
  repeated Rotator Values = 1;
}

message BlackboardParam {
  string Key = 1;
  int32 Type = 2;
  oneof Value {
    int32 IntValue = 3;
    IntArrayBlackboard IntValues = 4;
    int64 LongValue = 5;
    LongArrayBlackboard LongValues = 6;
    bool BooleanValue = 7;
    string StringValue = 8;
    StringArrayBlackboard StringValues = 9;
    float FloatValue = 10;
    FloatArrayBlackboard FloatValues = 11;
    Vector VectorValue = 12;
    VectorArrayBlackboard VectorValues = 13;
    Rotator RotatorValue = 14;
    RotatorArrayBlackboard RotatorValues = 15;
  }
}

// MessageId: 25718 (Request)
message WorldBlackboardRequest {
  repeated BlackboardParam Params = 203;
}

// MessageId: 26563 (Response)
message WorldBlackboardResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 17879 (Notify)
message WorldBlackboardNotify {
  repeated BlackboardParam Params = 236;
}

// MessageId: 23666 (Request)
message EntityBlackboardRequest {
  int64 EntityId = 145;
  repeated BlackboardParam Params = 7;
}

// MessageId: 22349 (Response)
message EntityBlackboardResponse {
  ErrorCode ErrorCode = 229;
}

// MessageId: 22387 (Notify)
message EntityBlackboardNotify {
  int64 EntityId = 103;
  repeated BlackboardParam Params = 10;
}

// MessageId: 26168 (Notify)
message KuroSdkReviewNotify {
  int32 Id = 83;
  int32 Delay = 84;
  int32 Type = 210;
}

// MessageId: 27873 (Request)
message EnterAreaRequest {
  int32 Id = 175;
  int32 fKa = 30;
}

// MessageId: 29946 (Response)
message EnterAreaResponse {
  ErrorCode ErrorCode = 41;
  int32 Id = 9;
}

message AudioState {
  int32 TreeOwnerId = 1;
  int64 TreeIncId = 2;
  string USs2 = 3;
  string State = 4;
}

// MessageId: 19463 (Notify)
message GameAudioUpdateNotify {
  repeated AudioState AudioState = 85;
}

enum BanChatType {
  BanChatType_None = 0;
  BanChatType_All = 1;
  BanChatType_Friend = 2;
  BanChatType_Foreign = 3;
  BanChatType_Team = 4;
}

// MessageId: 22345 (Notify)
message BanChatNotify {
  int64 BanEndTime = 192;
  int32 BanChatType = 55;
}

message BanLogoutInfo {
  int32 Reason = 1;
  int64 BanEndTime = 2;
}

message ReportChatInfo {
  string ChatMessage = 1;
}

message ReportTargetInfo {
  string Name = 1;
  string Signature = 2;
}

// MessageId: 25821 (Request)
message ReportPlayerRequest {
  oneof vNs {
    ReportTargetInfo TargetInfo = 168;
  }

  int32 TargetPlayerId = 188;
  ReportChatInfo ChatInfo = 80;
  int32 ReportReason = 242;
  string ReportMessage = 210;
  int32 ReportSource = 186;
}

// MessageId: 22283 (Response)
message ReportPlayerResponse {
  ErrorCode ErrorCode = 83;
  int32 ReportCount = 60;
}

// MessageId: 27824 (Notify)
message PlayerRenameNotify {
  string Name = 18;
}

message CardShowEntry {
  int32 CardId = 1;
  bool IsRead = 2;
}

// MessageId: 29471 (Notify)
message BasicInfoNotify {
  int32 Id = 180;
  repeated PlayerAttr Attributes = 223;
  repeated MingSuGenInfo MingSuGenInfos = 47;
  repeated DragonPoolInfo DragonPoolInfos = 39;
  repeated RoleShowEntry RoleShowList = 151;
  int32 CurCardId = 143;
  int32 Birthday = 70;
  repeated CardShowEntry CardUnlockList = 93;
  int32 RandomSeed = 190;
  bool DisplayBirthDay = 154;
  int64 Zha1 = 236;
  string ela1 = 110;
}

// MessageId: 29566 (Request)
message ModifyNameRequest {
  string Name = 240;
}

// MessageId: 24530 (Response)
message ModifyNameResponse {
  string Name = 164;
  ErrorCode ErrorCode = 8;
  int64 Zha1 = 213;
  string ela1 = 154;
}

// MessageId: 20916 (Request)
message ModifySignatureRequest {
  string Signature = 186;
}

// MessageId: 18641 (Response)
message ModifySignatureResponse {
  string Signature = 133;
  ErrorCode ErrorCode = 190;
}

// MessageId: 20800 (Request)
message ChangeHeadPhotoRequest {
  int32 HeadPhotoId = 47;
}

// MessageId: 26123 (Response)
message ChangeHeadPhotoResponse {
  int32 HeadPhotoId = 98;
  ErrorCode ErrorCode = 9;
}

// MessageId: 17643 (Notify)
message UnlockHeadPhotoNotify {
  int32 HeadPhotoId = 148;
}

// MessageId: 25658 (Notify)
message UnlockHeadFrameNotify {
  int32 HeadFrameId = 175;
}

enum NetStatusType {
  NetStatusType_Wifi = 0;
  NetStatusType_Stream = 1;
  NetStatusType_Wired = 2;
  NetStatusType_Other = 3;
}

enum ClientDeviceLevel {
  ClientDeviceLevel_Low = 0;
  ClientDeviceLevel_Medium = 1;
  ClientDeviceLevel_High = 2;
}

message ClientBasicInfo {
  string Platform = 1;
  string DeviceId = 2;
  int32 NetStatus = 3;
  string Model = 4;
  string CPU = 5;
  int32 DeviceLevel = 6;
  int32 Language = 7;
  string DistinctId = 8;
  string MacAddress = 9;
  string lll = 10;
}

// MessageId: 20498 (Request)
message ClientBasicInfoRequest {
  ClientBasicInfo ClientBasicInfo = 186;
}

// MessageId: 27625 (Response)
message ClientBasicInfoResponse {
}

// MessageId: 28372 (Request)
message PlayerBasicInfoGetRequest {
  int32 Id = 44;
}

// MessageId: 15927 (Response)
message PlayerBasicInfoGetResponse {
  PlayerDetails Info = 219;
  ErrorCode ErrorCode = 228;
}

// MessageId: 24164 (Request)
message BirthdayInitRequest {
  int32 Birthday = 59;
}

// MessageId: 25784 (Response)
message BirthdayInitResponse {
  ErrorCode ErrorCode = 28;
}

// MessageId: 19426 (Request)
message RoleShowListUpdateRequest {
  repeated int32 RoleList = 166;
}

// MessageId: 16256 (Response)
message RoleShowListUpdateResponse {
  ErrorCode ErrorCode = 28;
}

// MessageId: 21549 (Notify)
message HeadIdUpdateNotify {
  int32 HeadId = 219;
}

// MessageId: 19256 (Notify)
message RoleShowListUpdateNotify {
  repeated RoleShowEntry RoleShowList = 240;
}

// MessageId: 18849 (Request)
message ChangeCardRequest {
  int32 CardId = 11;
}

// MessageId: 27362 (Response)
message ChangeCardResponse {
  ErrorCode ErrorCode = 120;
}

// MessageId: 26930 (Request)
message ReadCardRequest {
  int32 CardId = 104;
}

// MessageId: 22947 (Response)
message ReadCardResponse {
  ErrorCode ErrorCode = 206;
}

// MessageId: 23085 (Notify)
message UnlockCardNotify {
  int32 CardId = 234;
}

// MessageId: 26786 (Request)
message BirthdayShowSetRequest {
  bool DOLLAR7n = 165;
}

// MessageId: 21370 (Response)
message BirthdayShowSetResponse {
  ErrorCode ErrorCode = 200;
}

// MessageId: 27599 (Notify)
message SignatureUpdateNotify {
  string Signature = 44;
}

// MessageId: 27933 (Notify)
message ServerCommandNotify {
  string Command = 90;
}

// MessageId: 29035 (Notify)
message PlayerNameUpdateNotify {
  string Name = 204;
  int64 Zha1 = 81;
}

// MessageId: 24906 (Request)
message SearchPlayerBasicInfoBySdkIdRequest {
  string SdkId = 55;
}

// MessageId: 28933 (Response)
message SearchPlayerBasicInfoBySdkIdResponse {
  PlayerDetails Info = 54;
  ErrorCode ErrorCode = 59;
}

// MessageId: 26376 (Request)
message PlayerCreatePsnSessionRequest {
  string Session = 110;
}

// MessageId: 21400 (Response)
message PlayerCreatePsnSessionResponse {
}

// MessageId: 20958 (Notify)
message PlayerPsnSessionNotify {
  string Session = 212;
  int32 PlayerId = 213;
}

// MessageId: 23419 (Request)
message RequestUpdatePlayStationBlockAccount {
  repeated string BlockedIds = 177;
}

// MessageId: 24812 (Response)
message ResponseUpdatePlayStationBlockAccount {
}

enum PlayerAttrType {
  Int32 = 0;
  String = 1;
}

enum PlayerAttrKey {
  PlayerAttrKey_Level = 0;
  PlayerAttrKey_Exp = 1;
  PlayerAttrKey_Coin = 2;
  PlayerAttrKey_RareCoin = 3;
  PlayerAttrKey_HeadPhoto = 4;
  PlayerAttrKey_HeadFrame = 5;
  PlayerAttrKey_AreaId = 6;
  PlayerAttrKey_Name = 7;
  PlayerAttrKey_Sign = 8;
  PlayerAttrKey_Sex = 9;
  PlayerAttrKey_OriginWorldLevel = 10;
  PlayerAttrKey_CurWorldLevel = 11;
  PlayerAttrKey_WorldLevelTimeStamp = 12;
  PlayerAttrKey_CashCoin = 13;
  PlayerAttrKey_WorldPermission = 14;
}

message PlayerAttr {
  PlayerAttrKey Key = 1;
  PlayerAttrType ValueType = 2;
  oneof Value {
    int32 Int32Value = 3;
    string StringValue = 4;
  }
}

// MessageId: 24220 (Notify)
message PlayerAttrNotify {
  repeated PlayerAttr IsStopCharacter = 130;
}

// MessageId: 26504 (Request)
message HandInMingSuRequest {
  int32 DragonPoolId = 92;
  int64 InteractEntityId = 131;
}

// MessageId: 25918 (Response)
message HandInMingSuResponse {
  ErrorCode ErrorCode = 85;
  int32 DragonPoolId = 193;
  int32 Level = 54;
  int32 ActiveStatus = 204;
  int32 InjectedCoreItemCount = 242;
}

message MingSuGenInfo {
  int64 CreatureGenID = 1;
}

message DragonPoolInfo {
  int32 DragonPoolId = 1;
  int32 ActiveStatus = 2;
  int32 Level = 3;
  int32 InjectedCoreItemCount = 4;
}

// MessageId: 19610 (Request)
message ActiveDragonPoolRequest {
  int32 DragonPoolId = 211;
}

// MessageId: 25535 (Response)
message ActiveDragonPoolResponse {
  ErrorCode ErrorCode = 238;
  int32 DragonPoolId = 206;
  int32 ActiveStatus = 159;
}

// MessageId: 23708 (Request)
message DragonPoolConfRequest {
  int32 DragonPoolId = 150;
}

message ItemEntry {
  int32 ItemId = 1;
  int32 ItemCount = 2;
}

message ItemDict {
  repeated ItemEntry Items = 1;
}

message DragonPoolDropItems {
  int32 DragonPoolId = 1;
  repeated int32 QSs = 2;
  repeated ItemDict DropItems = 3;
}

// MessageId: 22575 (Response)
message ghs {
  ErrorCode ErrorCode = 175;
  DragonPoolDropItems DragonPoolDropItems = 149;
}

// MessageId: 27033 (Request)
message MingSuHandRewardRequest {
  int32 DragonPoolId = 117;
  int64 InteractEntityId = 200;
}

// MessageId: 18867 (Response)
message MingSuHandRewardResponse {
  ErrorCode ErrorCode = 199;
  int32 LevelGain = 148;
}

// MessageId: 28973 (Request)
message DarkCoastDeliveryRequest {
  int32 DragonPoolId = 203;
}

// MessageId: 25035 (Response)
message DarkCoastDeliveryResponse {
  ErrorCode ErrorCode = 64;
  DragonPoolDropItems DragonPoolDropItems = 34;
  repeated int32 DefeatedGuard = 230;
  repeated int32 ReceivedGuardReward = 120;
  int32 LevelGain = 152;
}

enum BattlePassType {
  BattlePassType_Free = 0;
  BattlePassType_Pay = 1;
}

enum BattlePassPayStatus {
  BattlePassPayStatus_NoPaid = 0;
  BattlePassPayStatus_Paid = 1;
  BattlePassPayStatus_Advanced = 2;
}

message PbBattlePassReward {
  int32 Level = 1;
  int32 ItemId = 2;
  int32 Type = 3;
}

message PbBattlePassRecurringReward {
  int32 Type = 1;
  int32 ItemId = 2;
  int32 count = 3;
}

message PbBattlePass {
  bool InTimeRange = 1;
  int32 Id = 2;
  int32 Level = 3;
  int32 Exp = 4;
  int32 WeeklyTotalExp = 5;
  int32 PayStatus = 6;
  repeated PbBattlePassReward TakenRewards = 7;
  int64 BeginTime = 8;
  int64 EndTime = 9;
  repeated PbBattlePassRecurringReward RecurringRewards = 10;
  bool HadEnter = 11;
}

// MessageId: 28256 (Request)
message BattlePassRequest {
}

// MessageId: 26125 (Response)
message BattlePassResponse {
  PbBattlePass BattlePass = 45;
  ErrorCode ErrorCode = 18;
}

// MessageId: 16582 (Notify)
message BattlePassPaidNotify {
  int32 PayStatus = 136;
}

// MessageId: 29979 (Request)
message BattlePassTakeRewardRequest {
  int32 Type = 166;
  int32 Level = 76;
  int32 ItemId = 104;
}

// MessageId: 23552 (Response)
message BattlePassTakeRewardResponse {
  ErrorCode ErrorCode = 90;
}

// MessageId: 28290 (Request)
message BattlePassRecurringTakeRequest {
  int32 Type = 147;
  int32 ItemId = 190;
}

// MessageId: 22516 (Response)
message BattlePassRecurringTakeResponse {
  ErrorCode ErrorCode = 40;
}

// MessageId: 28356 (Request)
message BattlePassTakeAllRewardRequest {
}

// MessageId: 22111 (Response)
message BattlePassTakeAllRewardResponse {
  repeated PbBattlePassReward TakenRewards = 234;
  repeated PbBattlePassRecurringReward RecurringRewards = 114;
  ErrorCode ErrorCode = 76;
}

// MessageId: 19187 (Notify)
message BattlePassExpUpdateNotify {
  int32 Level = 250;
  int32 Exp = 146;
  int32 WeeklyTotalExp = 172;
  repeated PbBattlePassRecurringReward RecurringRewards = 10;
}

message PbBattlePassTask {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  bool IsFinished = 4;
  bool IsTaken = 5;
}

// MessageId: 16333 (Request)
message BattlePassTaskRequest {
}

// MessageId: 19980 (Response)
message BattlePassTaskResponse {
  int64 DayEnd = 247;
  int64 WeekEnd = 156;
  repeated PbBattlePassTask Tasks = 136;
  ErrorCode ErrorCode = 16;
}

// MessageId: 21084 (Notify)
message BattlePassTaskUpdateNotify {
  repeated PbBattlePassTask Tasks = 249;
}

// MessageId: 22848 (Request)
message BattlePassTaskTakeRequest {
  repeated int32 Ids = 253;
}

// MessageId: 18935 (Response)
message BattlePassTaskTakeResponse {
  repeated int32 Ids = 130;
  ErrorCode ErrorCode = 251;
}

// MessageId: 27347 (Push)
message BattlePassEnterPush {
}

// MessageId: 20611 (Request)
message BattlePassLevelUpRequest {
  int32 Level = 91;
}

// MessageId: 19346 (Response)
message BattlePassLevelUpResponse {
  ErrorCode ErrorCode = 206;
}

enum BtType {
  BtType_BtTypeInvalid = 0;
  BtType_BtTypeQuest = 1;
  BtType_BtTypeLevelPlay = 2;
  BtType_BtTypeInst = 3;
}

enum NodeStatus {
  NodeStatus_NotActive = 0;
  NodeStatus_BeforeActivate = 1;
  NodeStatus__5n = 2;
  NodeStatus_Completing = 3;
  NodeStatus_CompletedSuccess = 4;
  NodeStatus_CompletedFailed = 5;
  NodeStatus_Suspend = 6;
  NodeStatus_Destroy = 7;
}

enum FailReason {
  FailReason_DefaultFail = 0;
  FailReason_AutoFail = 1;
  FailReason_EntityStateFail = 2;
  FailReason_TimeoutFail = 3;
  FailReason_LeaveInstFail = 4;
  FailReason_InstFail = 5;
  FailReason_CharacterDieFail = 6;
  FailReason_EntityDieFail = 7;
  FailReason_OutRangeFail = 8;
  FailReason_GiveUpFail = 9;
  FailReason_SneakTimeoutFail = 10;
  FailReason_TransferFail = 11;
  FailReason_PlayerMotionState = 12;
  FailReason_NpcTraceOutRange = 13;
  FailReason_NpcTraceAlertFull = 14;
  FailReason_DataLayerFail = 15;
  FailReason_PlayerLevelPlayMoveStateFail = 16;
}

message NodeInfo {
  oneof GNs {
    ChildQuestNodeInfo ChildQuestNodeInfo = 2;
  }

  int32 Status = 1;
}

message TreeInfo {
  int32 TreeOwnerId = 1;
  int64 TreeIncId = 2;
  int32 BtType = 3;
  int32 BlackboardId = 4;
  map<int32, NodeInfo> Nodes = 5;
  map<string, VarDefinePb> Vars = 6;
  repeated TimerInfoPb TimerInfos = 7;
  int32 SuspendType = 8;
  repeated OccupationPbInfo OccupationInfo = 9;
  map<string, string> wSs = 10;
  bool cDOLLARs = 11;
}

// MessageId: 28769 (Notify)
message BehaviorTreeInfoNotify {
  repeated TreeInfo TreeInfos = 246;
}

// MessageId: 18308 (Notify)
message BehaviorTreeDeleteNotify {
  repeated int64 TreeIncIds = 1;
}

enum ChildQuestNodeStatus {
  ChildQuestNodeStatus_CQNS_NotActive = 0;
  ChildQuestNodeStatus_CQNS_Enter = 1;
  ChildQuestNodeStatus_CQNS_EnterAction = 2;
  ChildQuestNodeStatus_CQNS_Progress = 3;
  ChildQuestNodeStatus_CQNS_Finished = 4;
  ChildQuestNodeStatus_CQNS_FinishAction = 5;
  ChildQuestNodeStatus_CQNS_Fail = 6;
}

message ChildQuestNodeProgress {
  oneof Progress {
    KillProgress Kill = 1;
    GetItemProgress GetItem = 2;
    MonsterCreatorProgress MonsterCreator = 3;
    UseItemProgress UseItem = 4;
    int32 levelPlayCount = 5;
    InteractProgress Interact = 6;
    CompleteInstProgress CompleteInst = 7;
    EntityStateProgress EntityStateList = 8;
  }

}

message EntityStateProgress {
  repeated int32 EntityId = 1;
}

message ChildQuestNodeInfo {
  int32 Status = 1;
  ChildQuestNodeProgress Progress = 2;
}

message KillProgress {
  repeated int32 MonId = 1;
  int32 PrefabNum = 2;
  int32 CurrNum = 3;
  int32 TotalNum = 4;
}

message InteractProgress {
  repeated int32 NpcId = 1;
}

message GetItemProgress {
  repeated GetItemCount Info = 1;
}

message GetItemCount {
  int32 ItemId = 1;
  int32 count = 2;
}

enum SpawnMonsterStepType {
  SpawnMonsterStepType_Prepare = 0;
  SpawnMonsterStepType_Active = 1;
  SpawnMonsterStepType_Refreshed = 2;
  SpawnMonsterStepType_End = 3;
}

message zNs {
  enum ENUMS {
    ENUMS_NotCreate = 0;
    ENUMS_Alive = 1;
    ENUMS_Death = 2;
  }
}

message SceneMonsterCreatedMonsterInfo {
  int32 PrefabId = 1;
  int32 MapId = 2;
  int64 BaseLife = 3;
  int32 State = 4;
}

message MonsterCreatorProgress {
  repeated MonsterCreatorProgressSlot Slots = 1;
  int32 TotalNum = 2;
}

message MonsterCreatorProgressSlot {
  int32 WaveId = 1;
  repeated int32 KillMonIds = 2;
  int32 CurrentWaveEndTime = 3;
  int32 SpawnStepType = 4;
  int32 CreatorEntityConfigId = 5;
  repeated SceneMonsterCreatedMonsterInfo MonsterInfo = 6;
}

message UseItemProgress {
  int32 ItemId = 1;
  int32 count = 2;
}

message CompleteInstProgress {
  int32 InstId = 1;
  int32 count = 2;
}

enum SuccessNodeStatus {
  SuccessNodeStatus_SNS_NotActive = 0;
  SuccessNodeStatus_SNS_Enter = 1;
  SuccessNodeStatus_SNS_Action = 2;
}

enum FailedNodeStatus {
  FailedNodeStatus_FNS_NotActive = 0;
  FailedNodeStatus_FNS_Enter = 1;
  FailedNodeStatus_FNS_Action = 2;
}

// MessageId: 18016 (Notify)
message UpdateNodeProgressNotify {
  int32 TreeOwnerId = 20;
  int64 TreeIncId = 74;
  int32 NodeId = 246;
  ChildQuestNodeProgress Progress = 132;
}

// MessageId: 19641 (Notify)
message UpdateChildQuestNodeStatusNotify {
  int32 TreeOwnerId = 114;
  int64 TreeIncId = 224;
  int32 NodeId = 129;
  int32 Status = 189;
}

// MessageId: 22534 (Notify)
message UpdateNodeStatusNotify {
  int32 TreeOwnerId = 161;
  int64 TreeIncId = 232;
  int32 NodeId = 155;
  int32 Status = 228;
}

// MessageId: 25741 (Request)
message SubmitNodeRequest {
  int32 TreeOwnerId = 148;
  int64 TreeIncId = 197;
  int32 NodeId = 140;
}

// MessageId: 18275 (Response)
message SubmitNodeResponse {
  int32 TreeOwnerId = 195;
  int64 TreeIncId = 49;
  int32 NodeId = 225;
  int32 ErrorId = 193;
}

enum PbHandInItemType {
  PbHandInItemType_ItemIds = 0;
  PbHandInItemType_H9n = 1;
}

message PbHandInItemInfo {
  int32 IncId = 1;
  int32 Num = 2;
  int32 ItemId = 3;
}

message PbHandInItem {
  repeated PbHandInItemInfo HandItemInfo = 1;
  int32 count = 2;
  int32 PbHandInItemType = 3;
}

// MessageId: 19800 (Request)
message HandInItemRequest {
  int32 TreeOwnerId = 234;
  int64 TreeIncId = 151;
  int32 NodeId = 108;
  repeated PbHandInItem HandInItem = 78;
}

// MessageId: 23690 (Response)
message HandInItemResponse {
  int32 ErrorId = 115;
}

enum n3s {
  n3s_CEs = 0;
  n3s_SendNpcMail = 1;
}

enum TimerSetType {
  TimerSetType_Add = 0;
  TimerSetType_Sub = 1;
  TimerSetType_Set = 2;
}

// MessageId: 29930 (Request)
message BtSetTimerInfoRequest {
  int32 TreeOwnerId = 62;
  int64 TreeIncId = 45;
  string TimerType = 102;
  int32 SetType = 203;
  int32 Second = 3;
  int32 NodeId = 36;
}

// MessageId: 17378 (Response)
message BtSetTimerInfoResponse {
  int32 ErrorId = 235;
}

message OccupationPbInfo {
  string ResourceName = 1;
  int32 NodeId = 2;
  int64 IncId = 3;
}

enum SuspendType {
  SuspendType_Occupation = 0;
  SuspendType_Online = 1;
  SuspendType_ScreenOccupation = 2;
}

// MessageId: 25215 (Notify)
message BtSuspendNotify {
  int32 TreeOwnerId = 5;
  int64 TreeIncId = 151;
  int32 NodeId = 228;
  repeated OccupationPbInfo OccupationInfo = 111;
  int32 SuspendType = 110;
  bool cDOLLARs = 181;
}

// MessageId: 29790 (Notify)
message OccupationInfoNotify {
  repeated OccupationPbInfo OccupationInfo = 196;
}

// MessageId: 21824 (Notify)
message AddOccupationInfoNotify {
  repeated OccupationPbInfo OccupationInfo = 251;
}

// MessageId: 21843 (Notify)
message RemoveOccupationInfoNotify {
  repeated string GEs = 66;
}

enum a3s {
  a3s_Z6n = 0;
  a3s_CMs = 1;
}

// MessageId: 25254 (Notify)
message TimeOccupationNotify {
  int32 OEs = 68;
}

// MessageId: 22454 (Request)
message BtForcedOccupationRequest {
  int64 TreeIncId = 231;
}

// MessageId: 28148 (Response)
message BtForcedOccupationResponse {
  int32 ErrorId = 153;
}

// MessageId: 29828 (Request)
message BtGiveUpRequest {
  int32 TreeOwnerId = 13;
  int64 TreeIncId = 227;
  int32 NodeId = 81;
}

// MessageId: 26224 (Response)
message BtGiveUpResponse {
  int32 ErrorId = 48;
}

// MessageId: 22354 (Notify)
message BtRollbackNotify {
  int32 TreeOwnerId = 18;
  int64 TreeIncId = 176;
  int32 kEs = 238;
  int32 NEs2 = 115;
}

// MessageId: 24768 (Request)
message BtRollbackRequest {
  int32 TreeOwnerId = 202;
  int64 TreeIncId = 118;
  int32 p9n = 233;
}

// MessageId: 27288 (Response)
message BtRollbackResponse {
  int32 ErrorId = 53;
}

// MessageId: 22652 (Notify)
message BtRollbackStartNotify {
  int32 TreeOwnerId = 8;
  int64 TreeIncId = 167;
  bool IsRollbackSubLevel = 84;
  bool IsRollbackPos = 109;
}

// MessageId: 17303 (Notify)
message RollbackInfoNotify {
  int32 TreeOwnerId = 108;
  int64 TreeIncId = 82;
  TreeInfo TreeInfo = 3;
}

// MessageId: 24859 (Notify)
message QuestRangeFailWarningTreeIdNotify {
  int64 TreeIncId = 243;
}

// MessageId: 22640 (Notify)
message HideCancelRangeFailWaringEffectNotify {
  int64 TreeIncId = 189;
}

// MessageId: 29521 (Request)
message SneakRequest {
  int32 TreeOwnerId = 141;
  int64 TreeIncId = 74;
  int32 NodeId = 216;
  bool IsStart = 7;
}

// MessageId: 19490 (Response)
message SneakResponse {
  int32 ErrorId = 239;
}

// MessageId: 19076 (Request)
message SneakTimeRequest {
  int32 TreeOwnerId = 180;
  int64 TreeIncId = 220;
}

// MessageId: 20853 (Response)
message SneakTimeResponse {
  int32 ErrorId = 152;
}

// MessageId: 26172 (Notify)
message SneakNotify {
  int32 TreeOwnerId = 240;
  int64 TreeIncId = 198;
  int32 NodeId = 53;
  int64 EndTime = 151;
}

message TimerInfoPb {
  string TimerType = 1;
  int32 NodeId = 2;
  int64 EndTime = 3;
}

// MessageId: 25077 (Notify)
message UpdateTimerInfoNotify {
  int32 TreeOwnerId = 214;
  int64 TreeIncId = 54;
  TimerInfoPb HEs2 = 210;
}

// MessageId: 21310 (Request)
message TimerEndRequest {
  int32 TreeOwnerId = 149;
  int64 TreeIncId = 13;
  string TimerType = 175;
}

// MessageId: 22343 (Response)
message TimerEndResponse {
  int32 ErrorId = 150;
}

enum UiGamePlayType {
  UiGamePlayType_Cipher = 0;
  UiGamePlayType_SignalBreak = 1;
  UiGamePlayType_SundialPuzzle = 2;
  UiGamePlayType_MorseCode = 3;
  UiGamePlayType_SignalDevice = 4;
}

// MessageId: 15414 (Request)
message UiGamePlayRequest {
  int32 Type = 178;
  string GamePlayKey = 65;
}

// MessageId: 15493 (Response)
message UiGamePlayResponse {
  int32 ErrorId = 224;
}

// MessageId: 26203 (Request)
message NpcTraceFailedRequest {
  int32 TreeOwnerId = 97;
  int64 TreeIncId = 12;
  int32 NodeId = 243;
}

// MessageId: 26132 (Response)
message NpcTraceFailedResponse {
  int32 ErrorId = 117;
}

// MessageId: 15721 (Notify)
message BtVarUpdateNotify {
  int32 TreeOwnerId = 252;
  int64 TreeIncId = 42;
  string VarName = 17;
  VarDefinePb VarDefine = 151;
}

message FuncInfo {
  int32 FuncId = 1;
  bool Unlocked = 2;
}

// MessageId: 24452 (Notify)
message UpdateFunctionOpenLockByBehaviorTreeNotify {
  repeated FuncInfo FuncInfo = 76;
}

// MessageId: 26422 (Request)
message SubmitAwakeAndLoadEntityNodeRequest {
  int32 TreeOwnerId = 125;
  int64 TreeIncId = 108;
  int32 NodeId = 123;
}

// MessageId: 19255 (Response)
message SubmitAwakeAndLoadEntityNodeResponse {
  ErrorCode ErrorCode = 88;
}

enum DungeonTeleportType {
  DungeonTeleportType_Invalid = 0;
  DungeonTeleportType_TeleportDungeon = 1;
}

message rEl1 {
  repeated int32 YMl2 = 1;
}

message oEl {
  oneof K4s {
    rEl1 zMl = 3;
  }

  DungeonTeleportType Type = 1;
  bool IsEnable = 2;
}

// MessageId: 23193 (Notify)
message UpdateForbidDungeonNotify {
  repeated oEl FuncInfo = 210;
}

// MessageId: 26057 (Notify)
message ServerEndQuestIdNotify {
  int32 QuestId = 144;
  int64 TreeIncId = 170;
  repeated int64 JMl2 = 248;
}

// MessageId: 24456 (Request)
message ServerEndQuestIdRequest {
  int32 QuestId = 231;
}

// MessageId: 20260 (Response)
message ServerEndQuestIdResponse {
  ErrorCode ErrorCode = 34;
}

enum SourceType {
  SourceType_UnDefine = 0;
  SourceType_SourceEntity = 3;
  SourceType_SourceQuest = 4;
}

enum EntityConfigType {
  EntityConfigType_OldEntity = 0;
  EntityConfigType_Level = 1;
  EntityConfigType_Global = 2;
  EntityConfigType_Character = 3;
  EntityConfigType_Template = 4;
  EntityConfigType_Prefab = 5;
}

message FightBuffInformation {
  int32 HandleId = 1;
  int64 BuffId = 2;
  int32 Level = 3;
  int32 StackCount = 4;
  int64 InstigatorId = 5;
  int64 EntityId = 6;
  int32 ApplyType = 7;
  float Duration = 8;
  float LeftDuration = 9;
  repeated FightBuffEffectContext Context = 10;
  bool IsActive = 11;
  int32 ServerId = 12;
  int64 MessageId = 13;
}

message EntityPb {
  oneof d3s {
    int32 Camp = 20;
  }

  int64 Id = 1;
  int32 ConfigId = 2;
  EntityConfigType ConfigType = 3;
  EEntityType EntityType = 4;
  Vector Pos = 5;
  Rotator Rot = 6;
  Vector InitPos = 7;
  LivingStatus LivingStatus = 8;
  bool IsVisible = 9;
  int32 PlayerId = 10;
  repeated EntityComponentPb ComponentPbs = 11;
  int32 DurabilityValue = 12;
  EntityState EntityState = 13;
  Vector InitLinearVelocity = 14;
  bool IsPosAbnormal = 15;
  int32 PrefabId = 17;
  int64 PrefabIncId = 18;
  int32 SubEntityType = 19;
  int64 OwnerIncId = 21;
}

message EntityComponentPb {
  oneof ComponentPb {
    AttributeComponentPb AttributeComponent = 1;
    TagComponentPb TagComponent = 2;
    TriggerComponentPb TriggerComponent = 3;
    Summon.SummonerComponentPb SummonerComponent = 4;
    PartComponentPb PartComponent = 5;
    VisionSkillComponentPb VisionSkillComponent = 6;
    AnimationStateComponentPb AnimationStateComponent = 7;
    BlackboardParamComponentPb BlackboardParamComponent = 8;
    SysBuffComponentPb SysBuffComponent = 10;
    ClientDataComponentPb ClientDataComponent = 11;
    MonsterWeaponComponentPb MonsterWeaponComponentPb = 12;
    MonsterAiComponentPb MonsterAiComponentPb = 13;
    FightBuffComponentPb FightBuffComponent = 15;
    NearbyTrackingComponentPb NearbyTrackingComponentPb = 16;
    DropComponentPb DropComponentPb = 17;
    MonsterCaptureComponentPb MonsterCaptureComponent = 18;
    LogicStateComponentPb LogicStateComponentPb = 19;
    AdviceComponentPb AdviceComponentPb = 20;
    LiftComponentPb LiftComponentPb = 21;
    InteractComponentPb InteractComponent = 22;
    EquipComponentPb EquipComponent = 23;
    BeControlledComponentPb BeControlledComponentPb = 24;
    ConcomitantsComponentPb ConcomitantsComponentPb = 25;
    TimelineTrackComponentPb TimelineTrackComponentPb = 26;
    Summon.SummonsComponentPb SummonsComponentPb = 27;
    EntityFsmComponentPb EntityFsmComponentPb = 28;
    BoardPb BoardPb = 29;
    PlacementItemPb PlacementItemPb = 30;
    StateTagComponentPb StateTagComponentPb = 31;
    MonsterGachaDataPb MonsterGachaDataPb = 32;
    FanComponentPb FanComponentPb = 33;
    NpcPb NpcPb = 34;
    BubbleComponentPb BubbleComponent = 35;
    PatrolComponentPb PatrolComponent = 36;
    RangeComponentPb RangeComponent = 37;
    PassiveSkillComponentPb PassiveSkillComponentPb = 38;
    PassiveGaSkillComponentPb PassiveGaSkillComponentPb = 39;
    DynAttachComponentPb DynAttachComponentPb = 40;
    EntityVarComponentPb EntityVarComponentPb = 41;
    Summon.FollowShooterComponentPb FollowShooterComponentPb = 42;
    StateComponentPb StateComponentPb = 43;
    BulletComponentPb BulletComponentPb = 44;
    BuffProducerComponentPb BuffProducerComponentPb = 45;
    BuffConsumerComponentPb BuffConsumerComponentPb = 46;
    AutonomousComponentPb AutonomousComponentPb = 47;
    ShieldComponentPb ShieldComponentPb = 48;
    NPCPerformGroupComponentPb NPCPerformGroupComponentPb = 49;
    tSl tSl = 50;
    JigsawBaseComponentPb JigsawBaseComponentPb = 51;
    RoleRecordComponentPb RoleRecordComponentPb = 52;
    Summon.FollowerComponentPb FollowerComponentPb = 53;
    AttributesIdsComponentPb AttributesIdsComponentPb = 54;
    WeaponSkinComponentPb WeaponSkinComponentPb = 55;
  }

}

message MonsterAiComponentPb {
  int32 WeaponId = 1;
  int64 HatredGroupId = 2;
  int32 AiTeamInitId = 3;
  int64 CombatMessageId = 4;
}

message MonsterWeaponComponentPb {
  int32 WeaponId = 1;
}

enum EntranceState {
  EntranceState_NotUnlock = 0;
  EntranceState_Unlockable = 1;
  EntranceState_Unlocked = 2;
  EntranceState_Closed = 3;
}

message RangeComponentPb {
  repeated int32 PlayerCount = 1;
  repeated int64 rIs = 2;
}

message w3s {
  int32 State = 1;
}

message ClientDataComponentPb {
  bool IsStaticInit = 1;
  int64 OwnerId = 2;
  int32 GroupId = 3;
}

message AttributeComponentPb {
  int32 HardnessModeId = 2;
  int32 RageModeId = 3;
  repeated AttrData AttrData = 4;
}

message TagComponentPb {
  repeated GameplayTagData GameplayTags = 1;
  repeated int32 EntityCommonTags = 2;
  bool InitGameplayTag = 3;
}

message TriggerComponentPb {
  int32 TriggerCount = 1;
  int32 ExitTriggerCount = 2;
}

message StateTagComponentPb {
  int32 StateTagId = 1;
}

message VisionSkillComponentPb {
  repeated VisionSkillInformation VisionSkillInfos = 1;
}

message EntityVarComponentPb {
  map<string, VarDefinePb> Vars = 1;
}

message BoneVisibleData {
  string sWn = 1;
  bool HideBone = 2;
}

message AnimationStateComponentPb {
  repeated int32 AnimationStates = 1;
  repeated int32 SpecialStates = 2;
  repeated BoneVisibleData BoneVisibleDatas = 3;
  repeated int32 AnimationTags = 4;
}

message LogicStateComponentPb {
  int32 PositionState = 1;
  int32 MoveState = 2;
  int32 DirectionState = 3;
  int32 PositionSubState = 4;
}

message LiftComponentPb {
  int32 Location = 1;
}

message BlackboardParamComponentPb {
  repeated BlackboardParam BlackboardParams = 1;
}

message SysBuffComponentPb {
  repeated SysBuffInformation SysBuffInfos = 1;
}

message SysBuffInformation {
  int32 ServerId = 1;
  int64 BuffId = 2;
  int32 Level = 3;
  int64 MessageId = 4;
  int64 InstigatorId = 5;
  float Duration = 6;
  int32 StackCount = 7;
  int32 ApplyType = 8;
  bool IsIterable = 9;
}

message FightBuffComponentPb {
  repeated FightBuffInformation FightBuffInfos = 1;
  repeated BuffEffectCd ListBuffEffectCd = 2;
}

message NearbyTrackingComponentPb {
  bool IsEnable = 1;
}

message DropComponentPb {
  int32 ItemId = 1;
  int32 ShowPlanId = 2;
  int32 ItemCount = 3;
  int32 MapId = 4;
}

message MonsterCaptureComponentPb {
  int32 TemplateId = 1;
  int32 EntityId = 2;
  int32 MonsterId = 3;
}

message BubbleInfo {
  string ActionGuid = 1;
  GameCtxPb GameCtx = 2;
}

message BubbleComponentPb {
  repeated BubbleInfo BubbleInfos = 1;
}

message RoleRecordComponentPb {
  bool IsAutoRole = 1;
  int64 ConstateId = 2;
}

message DynamicInteractInfo {
  string OptionGuid = 1;
  GameCtxPb GameCtx = 2;
  string Text = 3;
  bool XCa2 = 4;
}

message InteractComponentPb {
  repeated DynamicInteractInfo DynamicInteractInfos = 1;
  repeated int32 RandomInteractIndex = 2;
  bool Interacting = 3;
}

message AutonomousComponentPb {
  int32 AutonomousId = 1;
}

message BeControlledComponentPb {
  int64 PlayerEntityId = 1;
  int32 RelationId = 2;
  bool IsShow = 3;
  int32 BIs = 4;
  int64 ConstateId = 5;
}

message DynAttachComponentPb {
  int32 PbDynAttachEntityConfigId = 1;
  string PbDynAttachEntityActorKey = 2;
  Vector Pos = 3;
  Rotator Rot = 4;
  string PbDynAttachRefActorKey = 5;
}

message ConcomitantsComponentPb {
  int64 VisionEntityId = 1;
  repeated int64 CustomEntityIds = 2;
  int64 PhantomRoleId = 3;
}

message TimelineTrackControlDataPb {
  int32 ControlPoint = 1;
}

message TimelineTrackComponentPb {
  int32 index = 1;
  repeated TimelineTrackControlDataPb ControlDatas = 2;
}

message BoardPb {
  repeated OccupiedBoardGridInfo OccupiedGridList = 1;
  repeated BoardGridDynamicConfig DynamicGridConfigs = 2;
}

message CrystalMonsterSlotInfo {
  repeated int32 EntityIds = 1;
  int32 MonsterType = 2;
}

message CrystalMonsterInfoPb {
  repeated CrystalMonsterSlotInfo SlotInfoList = 1;
}

message MonsterGachaDataPb {
  repeated CrystalMonsterInfoPb MonsterCrystalInfoList = 1;
}

message FanComponentPb {
  int32 NumOfTurns = 1;
}

message PassiveSkillItemPb {
  CombatCommon CombatCommon = 1;
  int64 SkillId = 2;
}

message PassiveSkillComponentPb {
  repeated PassiveSkillItemPb PassiveSkillItemPbList = 1;
}

message CharacterSkillComponentPb {
  UseSkillInformation UseSkillInfo = 1;
  int32 MontageIndex = 2;
  int32 QIs1 = 3; // Montage Duration??
  string XIs = 4; // Montage Reference??
  float SpeedRatio = 5;
  int64 MessageId = 6;
  int64 MontageContext = 7;
}

message SkillComponentPb {
  int32 SkillId = 1;
  int64 ConstateId = 2;
}

message PassiveGaSkillComponentPb {
  repeated CharacterSkillComponentPb YIs = 1;
  repeated SkillComponentPb SkillComponentPb = 2;
}

message UseSkillInformation {
  CombatCommon CombatCommon = 1;
  int64 Id = 2;
  int32 SkillId = 3;
  MovementInformation MovementInformation = 4;
  Vector Location = 5;
  int64 TargetId = 6;
  float TimeStamp = 7;
  bool IsSpecialSkill = 8;
  int32 Duration = 9;
  int32 SkillInterruptLevel = 10;
  int32 FightState = 11;
}

message StateComponentPb {
  int64 ConstateId = 1;
}

message BuffProducerComponentPb {
  int64 ConstateId = 1;
}

message BuffConsumerComponentPb {
  int64 ConstateId = 1;
}

message BulletComponentPb {
  int64 ConstateId = 1;
}

// MessageId: 22737 (Notify)
message EntityAddNotify {
  repeated EntityPb EntityPbs = 176;
  bool IsAdd = 25;
}

// MessageId: 28914 (Notify)
message EntityRemoveNotify {
  repeated EntityRemoveInfo RemoveInfos = 171;
  bool IsRemove = 178;
}

// MessageId: 26894 (Notify)
message AddPreloadEntitiesNotify {
  repeated int64 EntityIds = 98;
}

message K3s {
  int32 Type = 1;
  int32 tTs = 2;
  string Name = 3;
}

enum Q3s {
  Q3s_NotDelay = 0;
  Q3s_qKn = 1;
}

message VarDefinePb {
  oneof Value {
    bool Boolean = 2;
    int64 Int = 3;
    string String = 4;
    float Float = 5;
    int32 Entity = 6;
    int32 Quest = 7;
    int32 QuestState = 8;
    Vector Pos = 9;
    int64 Prefab = 10;
  }

  int32 VarType = 1;
}

message X3s2 {
  VarDefinePb Value = 1;
}

message Y3s {
  string Name = 1;
}

message J3s1 {
  string Name = 1;
}

message z3s2 {
  oneof Z3s1 {
    X3s2 _Ts = 2;
    Y3s uTs = 3;
    J3s1 cTs = 4;
  }

  int32 SourceType = 1;
}

message NpcPb {
  int32 SplineEntityId = 2;
  int32 SpawnEntityId = 3;
}

// MessageId: 21092 (Notify)
message nes1 {
  int32 Id = 168;
  int32 mTs = 195;
}

// MessageId: 29768 (Push)
message TestSpawnTemplateEntityPush {
  int64 Id = 178;
  int32 ConfigId = 47;
  Vector Pos = 17;
  Rotator Rot = 14;
  int32 Level = 232;
  int32 mKn = 214;
}

enum LivingStatus {
  LivingStatus_Alive = 0;
  LivingStatus_Dead = 1;
  LivingStatus_Init = 2;
}

enum EntityState {
  EntityState_Default = 0;
  EntityState_Sleep = 1;
  EntityState_Born = 2;
  EntityState_Other = 3;
}

// MessageId: 20439 (Notify)
message EntranceStateNotify {
  int64 Id = 229;
  int32 State = 63;
}

// MessageId: 18450 (Request)
message EntityBuffProducerRequest {
  int64 BuffConsumerId = 146;
}

// MessageId: 16719 (Response)
message EntityBuffProducerResponse {
  ErrorCode ErrorCode = 163;
}

enum BuffOperateType {
  BuffOperateType_AddBuff = 0;
  BuffOperateType_RemoveBuff = 1;
  BuffOperateType_UndoBuff = 2;
}

// MessageId: 16626 (Request)
message EntityBuffProducerOperateRequest {
  int32 OpType = 174;
  int64 OpEntityId = 238;
}

// MessageId: 29621 (Response)
message EntityBuffProducerOperateResponse {
  ErrorCode ErrorCode = 177;
  int32 OpType = 195;
  int64 OpEntityId = 225;
}

// MessageId: 21477 (Request)
message LogicStateInitRequest {
  CombatCommon CombatCommon = 80;
  int64 EntityId = 27;
  LogicStateComponentPb InitData = 7;
}

// MessageId: 24266 (Response)
message LogicStateInitResponse {
}

// MessageId: 18817 (Notify)
message LogicStateInitNotify {
  CombatCommon CombatCommon = 185;
  int64 EntityId = 70;
  LogicStateComponentPb InitData = 54;
}

// MessageId: 20244 (Request)
message SwitchLogicStateRequest {
  LogicStateComponentPb States = 50;
}

// MessageId: 28503 (Response)
message SwitchLogicStateResponse {
  ErrorCode ErrorCode = 155;
}

// MessageId: 23296 (Notify)
message SwitchLogicStateNotify {
  LogicStateComponentPb States = 143;
}

// MessageId: 27138 (Request)
message EntityActiveRequest {
  int64 EntityId = 152;
}

// MessageId: 27764 (Response)
message EntityActiveResponse {
  ErrorCode ErrorCode = 190;
  repeated EntityComponentPb ComponentPbs = 56;
  bool IsVisible = 110;
  Vector Pos = 60;
  Rotator Rot = 41;
}

// MessageId: 20851 (Request)
message AnimationGameplayTagRequest {
  int32 AddTagIds = 188;
  bool RemoveTagIds = 176;
}

// MessageId: 22396 (Response)
message AnimationGameplayTagResponse {
  ErrorCode ErrorCode = 227;
}

// MessageId: 25422 (Notify)
message AnimationGameplayTagNotify {
  int32 AddTagIds = 121;
  bool RemoveTagIds = 39;
}

// MessageId: 22493 (Request)
message AnimalDieRequest {
  int64 EntityId = 246;
  Vector Pos = 138;
}

// MessageId: 26688 (Response)
message AnimalDieResponse {
  ErrorCode ErrorCode = 150;
}

// MessageId: 25214 (Notify)
message AnimalDieNotify {
  int64 EntityId = 194;
  int32 PlayerId = 121;
}

// MessageId: 29130 (Request)
message AnimalDestroyRequest {
  int64 EntityId = 206;
}

// MessageId: 19675 (Response)
message AnimalDestroyResponse {
  ErrorCode ErrorCode = 19;
}

// MessageId: 26474 (Request)
message AnimalDropRequest {
  int64 EntityId = 29;
}

// MessageId: 19811 (Response)
message AnimalDropResponse {
  ErrorCode ErrorCode = 90;
}

// MessageId: 22626 (Notify)
message EntityStateReadyNotify {
  int64 EntityId = 169;
  int32 TagId = 212;
  bool Ready = 154;
}

// MessageId: 19842 (Request)
message EntityInteractRequest {
  int64 EntityId = 117;
  int32 OptionIndex = 90;
  int64 VisionEntityId = 91;
}

// MessageId: 29609 (Response)
message EntityInteractResponse {
  ErrorCode ErrorCode = 124;
  bool Interacting = 70;
}

// MessageId: 16065 (Request)
message EntityRandomInteractRequest {
  int64 EntityId = 18;
  int32 OptionIndex = 231;
}

// MessageId: 24837 (Response)
message EntityRandomInteractResponse {
  ErrorCode ErrorCode = 117;
  bool Interacting = 11;
}

// MessageId: 19549 (Request)
message EntityDynamicInteractRequest {
  int64 EntityId = 127;
  string OptionGuid = 206;
}

// MessageId: 20065 (Response)
message EntityDynamicInteractResponse {
  ErrorCode ErrorCode = 202;
  bool Interacting = 18;
}

// MessageId: 26450 (Notify)
message EntityAddDynamicInteractNotify {
  int64 EntityId = 13;
  string OptionGuid = 1;
  GameCtxPb GameCtx = 42;
  string Text = 83;
  bool XCa2 = 240;
}

// MessageId: 21188 (Notify)
message EntityChangeDynamicInteractTextNotify {
  int64 EntityId = 223;
  string OptionGuid = 15;
  string Text = 210;
}

// MessageId: 28212 (Notify)
message EntityRemoveDynamicInteractNotify {
  int64 EntityId = 62;
  string OptionGuid = 65;
}

// MessageId: 17072 (Notify)
message EntityInteractingNotify {
  int64 EntityId = 146;
  bool IsInteracting = 205;
}

// MessageId: 27753 (Notify)
message EntityAddBubbleNotify {
  int64 EntityId = 196;
  string ActionGuid = 54;
}

// MessageId: 19752 (Notify)
message EntityRemoveBubbleNotify {
  int64 EntityId = 203;
  string ActionGuid = 59;
}

// MessageId: 20554 (Request)
message EntityPosAbnormalRequest {
  int64 EntityId = 138;
  bool IsAbnormal = 149;
}

// MessageId: 26012 (Response)
message EntityPosAbnormalResponse {
  ErrorCode ErrorCode = 148;
}

// MessageId: 23148 (Request)
message EntityAdsorbRequest {
  int32 EntityId = 181;
}

// MessageId: 21702 (Response)
message EntityAdsorbResponse {
  ErrorCode ErrorCode = 150;
}

// MessageId: 17253 (Request)
message BoneVisibleChangeRequest {
  BoneVisibleData BoneVisibleData = 21;
}

// MessageId: 22422 (Response)
message BoneVisibleChangeResponse {
  ErrorCode ErrorCode = 222;
}

// MessageId: 18036 (Notify)
message BoneVisibleChangeNotify {
  BoneVisibleData BoneVisibleData = 48;
}

message EquipComponentPb {
  int32 WeaponId = 1;
  int32 WeaponBreachLevel = 2;
}

message WeaponSkinComponentPb {
  int32 WeaponSkinId = 1;
}

// MessageId: 28619 (Notify)
message EntityEquipChangeNotify {
  int64 EntityId = 42;
  EquipComponentPb EquipComponent = 144;
}

// MessageId: 26591 (Notify)
message EntityEquipSkinChangeNotify {
  int64 EntityId = 143;
  WeaponSkinComponentPb WeaponSkin = 124;
}

// MessageId: 21616 (Request)
message EntityStaticHookMoveRequest {
  int64 EntityId = 192;
  Vector Pos = 231;
}

// MessageId: 20194 (Response)
message EntityStaticHookMoveResponse {
  ErrorCode ErrorCode = 227;
}

// MessageId: 29651 (Notify)
message EntityStaticHookMoveNotify {
  int64 EntityId = 204;
  Vector Pos = 17;
}

// MessageId: 21220 (Notify)
message SilenceNpcNotify {
}

enum ELogicStateType {
  ELogicStateType_CharPositionState = 0;
  ELogicStateType_CharMoveState = 1;
  ELogicStateType_CharDirectionState = 2;
  ELogicStateType_CharPositionSubState = 3;
}

enum ECharPositionState {
  ECharPositionState_Ground = 0;
  ECharPositionState_Climb = 1;
  ECharPositionState_Air = 2;
  ECharPositionState_Water = 3;
  ECharPositionState_Ski = 4;
}

enum ECharPositionSubState {
  ECharPositionSubState_None = 0;
  ECharPositionSubState_WaterSurface = 1;
}

enum ECharMoveState {
  ECharMoveState_MoveStateOther = 0;
  ECharMoveState_MoveStateStand = 1;
  ECharMoveState_MoveStateWalk = 2;
  ECharMoveState_MoveStateWalkStop = 3;
  ECharMoveState_MoveStateRun = 4;
  ECharMoveState_MoveStateRunStop = 5;
  ECharMoveState_MoveStateSprint = 6;
  ECharMoveState_MoveStateSprintStop = 7;
  ECharMoveState_MoveStateDodge = 8;
  ECharMoveState_MoveStateLandRoll = 9;
  ECharMoveState_MoveStateKnockDown = 10;
  ECharMoveState_MoveStateParry = 11;
  ECharMoveState_MoveStateSoftKnock = 12;
  ECharMoveState_MoveStateHeavyKnock = 13;
  ECharMoveState_MoveStateNormalClimb = 14;
  ECharMoveState_MoveStateFastClimb = 15;
  ECharMoveState_MoveStateGlide = 16;
  ECharMoveState_MoveStateKnockUp = 17;
  ECharMoveState_MoveStateFastSwim = 18;
  ECharMoveState_MoveStateNormalSwim = 19;
  ECharMoveState_MoveStateSwing = 20;
  ECharMoveState_MoveStateCaptured = 21;
  ECharMoveState_MoveStateSlide = 22;
  ECharMoveState_MoveStateFlying = 23;
  ECharMoveState_MoveStateEnterClimb = 24;
  ECharMoveState_MoveStateExitClimb = 25;
  ECharMoveState_MoveStateNormalSki = 26;
  ECharMoveState_MoveStateStandUp = 27;
  ECharMoveState_MoveStateSoar = 28;
}

// MessageId: 17226 (Request)
message EntityPatrolStartRequest {
  int64 EntityId = 229;
  bool Dir = 186;
}

// MessageId: 17652 (Response)
message EntityPatrolStartResponse {
  ErrorCode ErrorCode = 46;
}

// MessageId: 26614 (Request)
message EntityPatrolStopRequest {
  int64 EntityId = 39;
}

// MessageId: 21097 (Response)
message EntityPatrolStopResponse {
  ErrorCode ErrorCode = 19;
}

// MessageId: 28805 (Request)
message EntityPatrolChangeDirRequest {
  int64 EntityId = 3;
  bool Dir = 242;
}

// MessageId: 21940 (Response)
message EntityPatrolChangeDirResponse {
  ErrorCode ErrorCode = 111;
}

message PatrolComponentPb {
  bool Dir = 1;
}

// MessageId: 16549 (Request)
message VfxNpcPatrolFinishRequest {
  int64 EntityId = 88;
}

// MessageId: 21815 (Response)
message VfxNpcPatrolFinishResponse {
  ErrorCode ErrorCode = 129;
}

// MessageId: 19288 (Request)
message EntitySendEventRequest {
  int64 EntityId = 123;
  string EventKey = 11;
}

// MessageId: 26963 (Response)
message EntitySendEventResponse {
  ErrorCode ErrorCode = 203;
}

// MessageId: 20214 (Request)
message EntityBeamReceiveRequest {
  int64 EntityId = 24;
  BeamReceiveActionType ReceiveType = 156;
}

// MessageId: 16496 (Response)
message EntityBeamReceiveResponse {
  ErrorCode ErrorCode = 109;
  int64 EntityId = 165;
  BeamReceiveActionType ReceiveType = 86;
}

// MessageId: 27166 (Request)
message GenerateNPCRequest {
  int64 EntityId = 142;
  int32 PbDataId = 92;
  bool InRange = 128;
}

// MessageId: 29112 (Response)
message GenerateNPCResponse {
  ErrorCode ErrorCode = 26;
}

enum AttachTarget {
  AttachTarget_AttachTargetNone = 0;
  AttachTarget_AttachTargetEntity = 1;
  AttachTarget_AttachTargetActorPath = 2;
}

message AttachEntity {
  int32 TargetPbDataId = 1;
  string ActorRefKey = 2;
}

// MessageId: 23879 (Request)
message EntityAttachRequest {
  oneof Target {
    AttachEntity AttachEntity = 106;
    string AttachRefActor = 187;
  }

  int64 EntityId = 52;
  Vector Pos = 30;
  Rotator Rot = 220;
  AttachTarget AttachTarget = 233;
}

// MessageId: 22212 (Response)
message EntityAttachResponse {
  ErrorCode ErrorCode = 79;
}

// MessageId: 28400 (Notify)
message EntityAttachChangeNotify {
  oneof Target {
    AttachEntity h6n = 147;
    string AttachRefActor = 213;
  }

  int64 EntityId = 221;
  Vector Pos = 144;
  Rotator Rot = 68;
  AttachTarget AttachTarget = 184;
}

// MessageId: 26985 (Request)
message MonsterStandByTagsRequest {
  int64 EntityId = 17;
  int32 SplineId = 185;
  int32 Index = 37;
  int32 Tag = 144;
}

// MessageId: 20146 (Response)
message MonsterStandByTagsResponse {
  ErrorCode ErrorCode = 133;
}

// MessageId: 15487 (Notify)
message EntityUpdateVarNotify {
  int64 EntityId = 75;
  string VarName = 81;
  VarDefinePb VarDefine = 243;
}

// MessageId: 26418 (Request)
message EntityPositionRequest {
  int32 ConfigId = 32;
  int32 MapId = 71;
}

// MessageId: 25880 (Response)
message EntityPositionResponse {
  ErrorCode ErrorCode = 123;
  Vector Pos = 56;
}

message ShieldInfoPb {
  int32 Handle = 1;
  int32 ConfigId = 2;
  int32 ShieldValue = 3;
  int32 Priority = 4;
  int32 BuffHandle = 5;
  bool IsValid = 6;
}

message ShieldComponentPb {
  repeated ShieldInfoPb ShieldInfoPbList = 1;
  int32 ShieldValueTotal = 2;
}

message NPCPerformGroupComponentPb {
  string Type = 1;
  string State = 2;
}

// MessageId: 27944 (Notify)
message SetPerformStateNotify {
  int64 EntityId = 178;
  string Type = 144;
  string State = 145;
}

message tSl {
  repeated int64 uSl1 = 1;
}

// MessageId: 29767 (Notify)
message AttributeTagsChangedNotify {
  int64 EntityId = 32;
  int32 AttributeId = 57;
  bool IsAdd = 214;
}

message AttributesIdsComponentPb {
  repeated int32 PbSceneItemAttributeIds = 1;
}

message VisionSkillInformation {
  int32 SkillId = 1;
  int32 Level = 2;
  repeated int32 StoneIds = 3;
  int32 Quality = 4;
}

// MessageId: 18358 (Notify)
message VisionSkillChangeNotify {
  int64 EntityId = 211;
  repeated VisionSkillInformation VisionSkillInfos = 216;
  int64 VisionEntityId = 22;
}

message PartComponentPb {
  repeated PartInformation PartLifeInfos = 1;
}

// MessageId: 19309 (Request)
message PartComponentInitRequest {
  int64 EntityId = 232;
  PartComponentPb PartComponent = 254;
}

// MessageId: 15270 (Response)
message PartComponentInitResponse {
}

// MessageId: 22754 (Notify)
message PartComponentInitNotify {
  int64 EntityId = 207;
  PartComponentPb PartComponent = 13;
}

message PartInformation {
  int32 PartId = 1;
  float LifeValue = 2;
  float LifeMax = 3;
  bool Activated = 4;
  int32 PartTag = 5;
}

message PartUpdateInfo {
  int32 PartId = 1;
  bool Activated = 2;
  bool Reset = 3;
}

// MessageId: 15774 (Request)
message PartUpdateRequest {
  int64 EntityId = 121;
  repeated PartUpdateInfo PartUpdateInfos = 52;
}

// MessageId: 21298 (Response)
message PartUpdateResponse {
  ErrorCode ErrorCode = 153;
}

// MessageId: 16922 (Notify)
message PartUpdateNotify {
  int64 EntityId = 190;
  repeated PartInformation PartInfos = 31;
}

enum ApplyGEType {
  ApplyGEType_Common = 0;
  ApplyGEType_UseExtraTime = 1;
}

// MessageId: 21364 (Request)
message ApplyGameplayEffectRequest {
  oneof Time {
    float Duration = 234;
  }

  int32 Handle = 186;
  int64 Id = 33;
  int32 Level = 188;
  int64 InstigatorId = 142;
  int32 ApplyType = 150;
  int32 ServerId = 56;
  int32 StackCount = 108;
  bool IsActive = 77;
}

// MessageId: 16366 (Response)
message ApplyGameplayEffectResponse {
  ErrorCode ErrorCode = 63;
}

// MessageId: 21745 (Notify)
message ApplyGameplayEffectNotify {
  oneof Time {
    float Duration = 232;
  }

  int32 Handle = 125;
  int64 Id = 70;
  int32 Level = 75;
  int64 EntityId = 182;
  int64 InstigatorId = 54;
  int32 ApplyType = 218;
  bool IsActive = 207;
  int32 ServerId = 59;
  int32 StackCount = 254;
}

// MessageId: 15204 (Request)
message RemoveGameplayEffectRequest {
  int32 Handle = 170;
  int64 EntityId = 213;
  bool IsPrematureRemoval = 24;
}

// MessageId: 17762 (Response)
message RemoveGameplayEffectResponse {
  ErrorCode ErrorCode = 37;
  int32 Handle = 163;
}

// MessageId: 26470 (Notify)
message RemoveGameplayEffectNotify {
  int32 Handle = 249;
  int64 EntityId = 2;
}

// MessageId: 15771 (Request)
message OrderApplyBuffRequest {
  oneof Time {
    float Duration = 185;
  }

  int64 Id = 79;
  int32 Level = 6;
  int64 InstigatorId = 70;
  int32 ApplyType = 160;
  int32 ServerId = 158;
  int32 StackCount = 9;
  bool IsIterable = 166;
}

// MessageId: 16383 (Response)
message OrderApplyBuffResponse {
  ErrorCode ErrorCode = 88;
}

// MessageId: 20530 (Request)
message OrderRemoveBuffRequest {
  int64 Id = 127;
  int32 StackCount = 193;
}

// MessageId: 24079 (Response)
message OrderRemoveBuffResponse {
  ErrorCode ErrorCode = 87;
}

// MessageId: 25849 (Notify)
message OrderApplyBuffNotify {
  oneof Time {
    float Duration = 209;
  }

  int64 Id = 191;
  int32 Level = 156;
  int64 InstigatorId = 236;
  int32 ApplyType = 167;
  int32 ServerId = 249;
  int32 StackCount = 119;
  bool IsIterable = 41;
}

// MessageId: 15242 (Notify)
message OrderRemoveBuffNotify {
  int64 Id = 184;
  int32 StackCount = 188;
}

// MessageId: 16486 (Notify)
message ApplyBuffS2cRequestNotify {
  oneof Time {
    float Duration = 30;
  }

  int64 Id = 180;
  int32 Level = 173;
  int64 InstigatorId = 160;
  int32 ApplyType = 168;
  int32 ServerId = 167;
  int32 StackCount = 48;
  bool IsIterable = 93;
  int32 Reason = 70;
}

// MessageId: 16690 (Push)
message ApplyBuffS2cResponsePush {
  ErrorCode ErrorCode = 44;
  int32 Handle = 215;
  bool IsActive = 26;
}

// MessageId: 21996 (Notify)
message RemoveBuffS2cRequestNotify {
  int32 Handle = 98;
  int32 StackCount = 143;
  int32 Reason = 91;
}

// MessageId: 17559 (Push)
message RemoveBuffS2cResponsePush {
  ErrorCode ErrorCode = 207;
}

// MessageId: 24849 (Notify)
message RemoveBuffByIdS2cRequestNotify {
  int64 BuffId = 159;
  int32 StackCount = 76;
  int32 Reason = 21;
}

// MessageId: 20394 (Push)
message RemoveBuffByIdS2cResponsePush {
  ErrorCode ErrorCode = 41;
}

// MessageId: 24470 (Request)
message ActivateBuffRequest {
  int32 Handle = 10;
  bool On = 73;
}

// MessageId: 29529 (Response)
message ActivateBuffResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 17528 (Notify)
message ActivateBuffNotify {
  int32 Handle = 192;
  bool On = 210;
}

// MessageId: 28362 (Request)
message OrderRemoveBuffByTagsRequest {
  repeated int32 TagIds = 7;
}

// MessageId: 27135 (Response)
message OrderRemoveBuffByTagsResponse {
  ErrorCode ErrorCode = 167;
}

// MessageId: 19129 (Notify)
message OrderRemoveBuffByTagsNotify {
  repeated int32 TagIds = 169;
}

message AttributeEventEffectData {
  repeated int32 TriggeredActiveHandles = 1;
}

message FightBuffEffectContext {
  oneof Effect {
    AttributeEventEffectData AttributeEventEffectData = 6;
  }

  float LeftCooldown = 1;
}

// MessageId: 20560 (Request)
message BuffEffectExecuteRequest {
  int32 Index = 166;
  FightBuffEffectContext Context = 234;
}

// MessageId: 21552 (Response)
message BuffEffectExecuteResponse {
  ErrorCode ErrorCode = 254;
}

// MessageId: 16114 (Request)
message BuffStackCountRequest {
  int32 HandleId = 57;
  int32 NewStackCount = 55;
  bool IsPrematureRemoval = 45;
  int64 InstigatorId = 41;
}

// MessageId: 17019 (Response)
message BuffStackCountResponse {
  ErrorCode ErrorCode = 19;
}

// MessageId: 15318 (Notify)
message BuffStackCountNotify {
  int32 HandleId = 49;
  int32 NewStackCount = 199;
}

message BuffEffectCd {
  int64 BuffId = 1;
  repeated int32 ListCdRemaining = 2;
}

// MessageId: 27018 (Request)
message BuffEffectRequest {
  int32 HandleId = 229;
  int32 Index = 188;
}

// MessageId: 29259 (Response)
message BuffEffectResponse {
  ErrorCode ErrorCode = 121;
}

// MessageId: 28232 (Request)
message ChangeStateRequest {
  int32 FsmId = 228;
  int32 FromState = 5;
  int32 ToState = 31;
}

// MessageId: 18500 (Response)
message ChangeStateResponse {
  int32 FsmId = 228;
  DErrorResult Error = 121;
}

// MessageId: 19059 (Notify)
message ChangeStateNotify {
  int32 FsmId = 201;
  int32 FromState = 173;
  int32 ToState = 70;
}

// MessageId: 24403 (Request)
message ChangeStateConfirmRequest {
  int32 FsmId = 116;
  int32 State = 194;
}

// MessageId: 20318 (Response)
message ChangeStateConfirmResponse {
  int32 FsmId = 80;
  int32 State = 219;
  DErrorResult Error = 251;
}

// MessageId: 18491 (Notify)
message ChangeStateConfirmNotify {
  int32 FsmId = 15;
  int32 State = 53;
}

message DFsm {
  int32 FsmId = 1;
  int32 CurrentState = 2;
  int32 Flag = 3;
  int32 kTs = 6;
}

message EntityFsmComponentPb {
  repeated DFsm Fsms = 1;
  int32 HashCode = 2;
  int32 CommonHashCode = 3;
  repeated DFsmBlackBoard BlackBoard = 4;
  FsmCustomBlackboardDatas FsmCustomBlackboardDatas = 5;
}

enum EFsmStateFlag {
  EFsmStateFlag_Changed = 0;
  EFsmStateFlag_Confirmed = 1;
}

// MessageId: 18362 (Request)
message FsmConditionPassRequest {
  int32 FsmId = 147;
  int32 FromState = 125;
  int32 ToState = 137;
  int32 ConditionIndex = 69;
  bool Value = 247;
}

// MessageId: 29452 (Response)
message FsmConditionPassResponse {
  int32 FsmId = 204;
  DErrorResult Error = 146;
}

// MessageId: 26181 (Notify)
message FsmResetNotify {
  EntityFsmComponentPb EntityFsmComponentPb = 20;
}

// MessageId: 16912 (Notify)
message FsmBlackboardNotify {
  repeated DFsmBlackBoard FsmBlackBoards = 63;
}

message FsmCustomBlackboardDatas {
  repeated DFsmBlackboardCustom BlackboardIntValues = 1;
}

// MessageId: 24131 (Notify)
message FsmCustomBlackboardNotify {
  FsmCustomBlackboardDatas FsmCustomBlackboardDatas = 149;
}

message DFsmBlackBoard {
  int32 Key = 1;
  int32 Value = 2;
}

message DFsmBlackboardCustom {
  string Key = 1;
  int32 Value = 2;
}

// MessageId: 28686 (Request)
message GmEntityFsmGroupInfoRequest {
  int64 EntityId = 81;
}

// MessageId: 28184 (Response)
message GmEntityFsmGroupInfoResponse {
  int64 EntityId = 55;
  repeated GmEntityFsmMachineInfo GmEntityFsmMachineInfos = 110;
}

message GmEntityFsmMachineInfo {
  int32 StateIndex = 1;
  repeated GmEntityFsmStateInfo GmEntityFsmStateInfos = 2;
}

message GmEntityFsmStateInfo {
  int32 StateIndex = 1;
  repeated GmEntityFsmTransitionInfo GmEntityFsmTransitionInfos = 2;
}

message GmEntityFsmTransitionInfo {
  int32 ToStateIndex = 1;
  repeated bool GmEntityFsmConditions = 2;
}

enum IFs1 {
  IFs_BT_Enter = 0;
  IFs_BT_Exit = 1;
  IFs_BT_BindStart = 2;
  IFs_BT_BindEnd = 3;
  IFs_BT_Task = 4;
}

// MessageId: 21327 (Request)
message FsmStateBehaviorRequest {
  int32 RootUuid = 115;
  int32 Uuid = 136;
  int32 Index = 5;
  IFs1 Type = 90;
}

// MessageId: 19843 (Response)
message FsmStateBehaviorResponse {
  int32 RootUuid = 21;
  int32 Uuid = 7;
  ErrorCode ErrorCode = 134;
}

// MessageId: 24480 (Request)
message PlayMontageTaskAndRequest {
  string MontageName = 17;
  int32 MontagePathHash = 32;
  float SpeedRatio = 172;
  string StartSection = 22;
  float StartTimeSeconds = 168;
}

// MessageId: 21822 (Response)
message PlayMontageTaskAndResponse {
  ErrorCode ErrorCode = 238;
}

message BoardGridDynamicConfig {
  sint32 RowIndex = 1;
  sint32 ColumnIndex = 2;
  sint64 Flags = 3;
}

message PlacementItemPb {
  int32 LocatedBoardEntityConfigId = 1;
}

message BoardGridPositionInfo {
  int32 Row = 1;
  int32 Column = 2;
  int32 RotAngle = 3;
}

message OccupiedBoardGridInfo {
  BoardGridPositionInfo Pos = 1;
  int32 OccupyingEntityConfigId = 2;
  int32 EntityConfigType = 3;
}

message PositionAndRotate {
  Vector Pos = 1;
  Rotator Rot = 2;
}

// MessageId: 20665 (Notify)
message RemovePlacementFromBoardNotify {
  int32 EntityConfigType = 111;
  OccupiedBoardGridInfo GridInfo = 194;
}

// MessageId: 27646 (Notify)
message AddPlacementNotify {
  OccupiedBoardGridInfo GridInfo = 239;
  int32 EntityConfigType = 121;
}

message PlacementInfoChangeInfo {
  PlacementItemPb PlacementItemPb = 1;
  int64 PlacementEntityId = 2;
}

// MessageId: 26727 (Notify)
message PlacementInfoChangeNotify {
  repeated PlacementInfoChangeInfo ChangedList = 197;
}

// MessageId: 17383 (Request)
message PlaceItemOnBoardRequest {
  oneof DFs1 {
    PositionAndRotate PosRot = 241;
  }

  int64 TargetBoardEntityId = 225;
  int64 PlacementEntityId = 161;
  int32 ToPlace = 94;
  BoardGridPositionInfo PosOnBoard = 22;
}

// MessageId: 15989 (Response)
message PlaceItemOnBoardResponse {
  ErrorCode ErrorCode = 77;
  int32 ToPlace = 193;
}

// MessageId: 29573 (Notify)
message PlaceItemOnBoardNotify {
  int64 TargetBoardEntityId = 225;
  int64 PlacementEntityId = 155;
  int32 ToPlace = 195;
  BoardGridPositionInfo PosOnBoard = 109;
}

// MessageId: 17835 (Request)
message CommitBoardRequest {
  int64 BoardEntityId = 99;
}

// MessageId: 25260 (Response)
message CommitBoardResponse {
  ErrorCode ErrorCode = 70;
}

// MessageId: 20215 (Notify)
message CommitBoardSuccessNotify {
  int64 BoardEntityId = 153;
}

// MessageId: 27468 (Request)
message MovePlacementRequest {
  oneof DFs1 {
    PositionAndRotate PosRot = 16;
  }

  int64 TargetBoardEntityId = 153;
  int64 PlacementEntityId = 138;
  BoardGridPositionInfo PosOnBoard = 33;
}

// MessageId: 17672 (Response)
message MovePlacementResponse {
  ErrorCode ErrorCode = 202;
}

// MessageId: 21586 (Notify)
message MovePlacementNotify {
  oneof DFs1 {
    PositionAndRotate PosRot = 53;
  }

  int64 TargetBoardEntityId = 236;
  int64 PlacementEntityId = 147;
  BoardGridPositionInfo PosOnBoard = 199;
}

// MessageId: 28355 (Notify)
message BoardGridDynamicConfigChangeNotify {
  int64 BoardEntityId = 222;
  repeated BoardGridDynamicConfig ChangedConfigs = 150;
}

// MessageId: 21455 (Request)
message ResetTicTacToeGameRequest {
  int64 EntityId = 35;
}

// MessageId: 22970 (Response)
message ResetTicTacToeGameResponse {
  ErrorCode ErrorCode = 53;
}

message JigsawBaseComponentPb {
  int32 Round = 1;
  int32 EntityId = 2;
  int32 fSl = 3;
}

message Summon {
  enum ESummonType {
    ESummonType_ESummonTypeDefault = 0;
    ESummonType_ESummonTypeConcomitantVision = 1;
    ESummonType_ESummonTypeConcomitantCustom = 2;
    ESummonType_ESummonTypeConcomitantPhantomRole = 3;
  }

  message SummonerComponentPb {
    int64 SummonerId = 1;
    int32 SummonCfgId = 2;
    int32 SummonSkillId = 3;
    int32 PlayerId = 4;
    ESummonType Type = 5;
  }

  message SummonsComponentPb {
    int32 Version = 1;
  }

  enum FollowerType {
    FollowerType_EPlayerFollowerDefault = 0;
    FollowerType_EPlayerFollowerExploreSkill = 1;
    FollowerType_EPlayerFollowerAuxiliary = 2;
    FollowerType_EPlayerFollowerMax = 3;
  }

  message FollowerList {
    FollowerType FollowerType = 1;
    int64 EntityId = 2;
  }

  message FollowerComponentPb {
    repeated FollowerList FollowerList = 1;
  }

  message FollowShooterComponentPb {
    int64 PlayerEntityId = 1;
  }

  // MessageId: 25104 (Notify)
  message FollowerUpdateNotify {
    int32 PlayerId = 7;
    repeated Summon.FollowerList FollowerList = 6;
  }
}

// MessageId: 22743 (Notify)
message TeleportUpdateNotify {
  repeated int32 Ids = 110;
}

// MessageId: 15028 (Request)
message TeleportDataRequest {
}

// MessageId: 21693 (Response)
message TeleportDataResponse {
  ErrorCode ErrorCode = 151;
  repeated int32 Ids = 24;
}

// MessageId: 19846 (Request)
message TeleportTransferRequest {
  int32 Id = 245;
}

// MessageId: 23856 (Response)
message TeleportTransferResponse {
  ErrorCode ErrorCode = 86;
  int32 MapId = 108;
  float PosX = 81;
  float PosY = 144;
  float PosZ = 35;
  float Pitch = 192;
  float Yaw = 77;
  float Roll = 20;
}

// MessageId: 28410 (Request)
message UnlockTeleportRequest {
  int32 Id = 217;
}

// MessageId: 25457 (Response)
message UnlockTeleportResponse {
  ErrorCode ErrorCode = 28;
}

enum TeleportReason {
  TeleportReason_Transfer = 0;
  TeleportReason_ApiTeleport = 1;
  TeleportReason_BtRollbackFailed = 2;
  TeleportReason_ParkourTrans = 3;
  TeleportReason_Gm = 4;
  TeleportReason_Rouge = 5;
  TeleportReason_Fall = 6;
  TeleportReason_Lyl = 7;
  TeleportReason_UnOpenedAreaPullback = 8;
  TeleportReason_TemporaryTransfer = 9;
  TeleportReason_Xvs = 10;
  TeleportReason_Drown = 11;
  TeleportReason_FlowStart = 12;
  TeleportReason_CorniceTrans = 13;
}

// MessageId: 23844 (Notify)
message TeleportNotify {
  int32 MapId = 72;
  float PosX = 185;
  float PosY = 204;
  float PosZ = 226;
  float PosA = 11;
  TeleportReason Reason = 97;
  GameCtxPb GameCtx = 138;
  TransitionOptionPb TransitionOption = 254;
}

enum TransitionType {
  TransitionType_Empty = 0;
  TransitionType_PlayEffect = 1;
  TransitionType_PlayMp4 = 2;
  TransitionType_CenterText = 3;
  TransitionType_FadeInScreen = 4;
  TransitionType_Seamless = 5;
}

message TransitionOptionPb {
  oneof p4s {
    string ResourcePath = 2;
    TransitionFlowPb TransitionFlow = 3;
    SeamlessTravelContext SeamlessTravelContext = 4;
    int32 FadeInScreenAsBlack = 5;
  }

  TransitionType TransitionType = 1;
}

message TransitionFlowPb {
  string FlowListName = 1;
  int32 FlowId = 2;
  int32 StateId = 3;
}

message SeamlessTravelContext {
  string EffectPath = 1;
  float LeastTime = 2;
  float EffectExpandTime = 3;
  float EffectCollapseTime = 4;
  bool HasFloorParams = 5;
  FloorParams FloorParams = 6;
}

message FloorParams {
  string FloorMeshPath = 1;
  string FloorMaterialPath = 2;
  float PosX = 3;
  float PosY = 4;
  float FloorAppearTime = 5;
  float FloorDisappearTime = 6;
}

// MessageId: 16447 (Request)
message TeleportFinishRequest {
}

// MessageId: 21285 (Response)
message TeleportFinishResponse {
  ErrorCode ErrorCode = 170;
}

// MessageId: 27478 (Notify)
message FallFinishNotify {
}

// MessageId: 28714 (Request)
message UnOpenedAreaPullbackRequest {
}

// MessageId: 18669 (Response)
message UnOpenedAreaPullbackResponse {
  ErrorCode ErrorCode = 46;
}

// MessageId: 16732 (Request)
message BlockListRequest {
}

// MessageId: 16629 (Response)
message BlockListResponse {
  repeated PlayerDetails BlockList = 60;
  ErrorCode ErrorCode = 30;
}

// MessageId: 17612 (Request)
message BlockPlayerRequest {
  int32 Id = 132;
}

// MessageId: 22262 (Response)
message BlockPlayerResponse {
  PlayerDetails Info = 254;
  ErrorCode ErrorCode = 24;
}

// MessageId: 22598 (Request)
message UnblockPlayerRequest {
  int32 Id = 92;
}

// MessageId: 25606 (Response)
message UnblockPlayerResponse {
  ErrorCode ErrorCode = 228;
}

message BuffItem {
  int32 ItemId = 1;
  int64 CdTime = 3;
}

// MessageId: 28119 (Request)
message BuffItemRequest {
  int32 ItemId = 203;
  int32 Num = 88;
  int32 roleId = 83;
}

// MessageId: 27821 (Response)
message BuffItemResponse {
  ErrorCode ErrorCode = 8;
  BuffItem BuffItemInfo = 229;
  int32 roleId = 105;
}

// MessageId: 25706 (Notify)
message BuffItemNotify {
  repeated BuffItem ItemBuffList = 233;
}

// MessageId: 22663 (Notify)
message BuffItemUpdateNotify {
  BuffItem BuffItem = 156;
}

message CalabashDevelopConditionState {
  int32 ConditionId = 1;
  bool Rewarded = 2;
}

message CalabashDevelopInfo {
  int32 MonsterId = 1;
  repeated CalabashDevelopConditionState UnlockConditions = 2;
}

message CalabashMsg {
  int32 Level = 1;
  int32 Exp = 2;
  repeated int32 UnlockedLevels = 3;
  repeated CalabashDevelopInfo UnlockedDevelopRewards = 4;
  int32 IdentifyGuaranteeCount = 5;
}

message CalabashCfg {
  int32 LevelUpExp = 1;
  int32 LevelUpCondition = 3;
  map<int32, int32> CatchGain = 4;
}

// MessageId: 28895 (Notify)
message CalabashMsgNotify {
  CalabashMsg CalabashMsg = 225;
  CalabashCfg CalabashCfg = 107;
}

// MessageId: 23427 (Request)
message CalabashMsgRequest {
}

// MessageId: 26221 (Response)
message CalabashMsgResponse {
  ErrorCode ErrorCode = 100;
  CalabashMsg CalabashMsg = 94;
  CalabashCfg CalabashCfg = 155;
}

// MessageId: 18747 (Notify)
message CalabashExpAddNotify {
  int32 CurExp = 255;
  int32 AddExp = 131;
  int32 CurLevel = 83;
  CalabashCfg CalabashCfg = 211;
}

// MessageId: 15177 (Notify)
message UznCalabashDevelopRewardUnlockNotify{
  CalabashDevelopInfo UnlockedDevelopReward = 90;
  int32 ItemId = 177;
  int32 IncrId = 84;
}

// MessageId: 15500 (Notify)
message CalabashLevelsRewardNotify {
  repeated int32 RewardedLevels = 139;
}

// MessageId: 21398 (Request)
message CalabashLevelRewardRequest {
  int32 Level = 248;
}

// MessageId: 17739 (Response)
message CalabashLevelRewardResponse {
  ErrorCode ErrorCode = 19;
}

// MessageId: 29300 (Request)
message CdKeyVerifyRequest {
  string CdKey = 100;
}

// MessageId: 23566 (Response)
message CdKeyVerifyResponse {
  ErrorCode ErrorCode = 192;
}

// MessageId: 28832 (Request)
message ChatRequest {
  int32 ChannelId = 64;
  string Content = 133;
  repeated string ChatParams = 202;
}

// MessageId: 29555 (Response)
message ChatResponse {
  ErrorCode ErrorCode = 95;
  repeated string ErrorParams = 207;
  map<int32, string> Data = 119;
}

// MessageId: 20842 (Notify)
message ChatNotify {
  string Content = 87;
}

// MessageId: 16295 (Notify)
message SysInfoNotify {
  ErrorCode ErrorCode = 26;
  repeated string ErrorParams = 27;
}

// MessageId: 22438 (Notify)
message SysErrorNotify {
  ErrorCode ErrorCode = 221;
  repeated string ErrorParams = 152;
}

// MessageId: 26975 (Notify)
message ConsoleNotify {
  string Type = 174;
  string Content = 23;
}

enum ChatContentType {
  ChatContentType_DIs = 0;
  ChatContentType_Emoji = 1;
}

// MessageId: 22959 (Request)
message PrivateChatRequest {
  int32 TargetUID = 115;
  ChatContentType ChatContentType = 203;
  string Content = 180;
}

// MessageId: 18458 (Response)
message PrivateChatResponse {
  int32 TargetUID = 254;
  ErrorCode ErrorCode = 243;
  string MsgId = 235;
  string FilterMsg = 169;
}

message ChatContentProto {
  int32 SenderUid = 1;
  ChatContentType ChatContentType = 2;
  string Content = 3;
  bool OfflineMsg = 4;
  int64 UtcTime = 5;
  string MsgId = 6;
  string MSl = 7;
}

// MessageId: 29445 (Notify)
message PrivateMessageNotify {
  ChatContentProto ChatContent = 48;
}

// MessageId: 25145 (Request)
message PrivateChatHistoryRequest {
  int32 TargetUid = 72;
  int32 StartIndex = 167;
}

// MessageId: 20159 (Response)
message PrivateChatHistoryResponse {
  ErrorCode ErrorCode = 22;
  PrivateChatHistoryContentProto Data = 7;
}

message PrivateChatHistoryContentProto {
  int32 TargetUid = 1;
  repeated ChatContentProto Chats = 2;
  bool HistoryIsEnd = 3;
  int32 TotalNums = 4;
}

// MessageId: 15476 (Notify)
message PrivateChatHistoryNotify {
  repeated PrivateChatHistoryContentProto AllChats = 99;
}

// MessageId: 18955 (Request)
message PrivateChatDataRequest {
}

// MessageId: 23444 (Response)
message PrivateChatDataResponse {
  bool SSl = 147;
}

// MessageId: 25243 (Request)
message ChatMutePlayerRequest {
  int32 TargetUid = 10;
  bool Mute = 177;
}

// MessageId: 26008 (Response)
message ChatMutePlayerResponse {
  ErrorCode ErrorCode = 123;
  repeated int32 RemoveMutePlayerId = 102;
}

enum PrivateChatOperateType {
  PrivateChatOperateType_CloseChat = 0;
  PrivateChatOperateType_OpenChat = 1;
  PrivateChatOperateType_ReadMsg = 2;
}

// MessageId: 15253 (Request)
message PrivateChatOperateRequest {
  int32 OperateType = 103;
  int32 TarPlayerId = 153;
}

// MessageId: 22173 (Response)
message PrivateChatOperateResponse {
  ErrorCode ErrorCode = 87;
}

// MessageId: 27107 (Notify)
message ChatMutePlayerListNotify {
  repeated int32 PlayerId = 33;
}

// MessageId: 17951 (Notify)
message DeletePrivateChatNotify {
  repeated int32 PlayerId = 219;
}

enum ChatChannelType {
  ChatChannelType_Default = 0;
  ChatChannelType_Private = 1;
  ChatChannelType_Team = 2;
}

enum SubChatChannelType {
  SubChatChannelType_WorldTeam = 0;
  SubChatChannelType_MatchTeam = 1;
}

// MessageId: 17840 (Request)
message ChannelChatRequest {
  int32 ChannelType = 46;
  int32 SubChannelType = 1;
  int32 ChatContentType = 196;
  string Content = 140;
}

// MessageId: 23042 (Response)
message ChannelChatResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 29958 (Notify)
message ChannelChatMessageNotify {
  int32 ChannelType = 145;
  int32 SubChannelType = 131;
  ChannelChatMessageInfo MessageInfo = 127;
}

enum ChatChannelNoticeType {
  ChatChannelNoticeType_None = 0;
  ChatChannelNoticeType_EnterTeam = 1;
  ChatChannelNoticeType_ExitTeam = 2;
  ChatChannelNoticeType_ClearMessages = 3;
}

message ChannelChatMessageInfo {
  int32 SenderId = 1;
  int32 SenderIcon = 2;
  string SenderName = 3;
  int32 ChatContentType = 4;
  string Content = 5;
  int32 NoticeType = 6;
  int64 SendTime = 7;
  string PsOnlineId = 8;
  string PsAccountId = 9;
}

// MessageId: 20308 (Notify)
message ChannelChatHistoryNotify {
  int32 ChannelType = 226;
  int32 SubChannelType = 134;
  repeated ChannelChatMessageInfo MessageInfos = 69;
}

enum RewardType {
  RewardType_TaskReward = 0;
  RewardType_SignReward = 2;
  RewardType_ScoreReward = 3;
}

// MessageId: 27702 (Request)
message ClaimRewardRequest {
  RewardType RewardType = 212;
  repeated int32 Ids = 67;
  int32 ActivityId = 134;
}

// MessageId: 20967 (Response)
message ClaimRewardResponse {
  ErrorCode ErrorCode = 76;
}

message CombatMessage {
  message CombatPushData {
    oneof Message {
      ApplyBuffS2cResponsePush ApplyBuffS2cResponsePush = 4;
      RemoveBuffS2cResponsePush RemoveBuffS2cResponsePush = 5;
      RemoveBuffByIdS2cResponsePush RemoveBuffByIdS2cResponsePush = 6;
    }

    CombatCommon CombatCommon = 1;
  }

  message CombatNotifyData {
    oneof Message {
      CreateBulletNotify CreateBulletNotify = 2;
      DestroyBulletNotify DestroyBulletNotify = 3;
      DamageExecuteNotify DamageExecuteNotify = 4;
      ApplyGameplayEffectNotify ApplyGameplayEffectNotify = 5;
      RemoveGameplayEffectNotify RemoveGameplayEffectNotify = 6;
      HitNotify HitNotify = 7;
      SkillNotify SkillNotify = 8;
      UseSkillNotify UseSkillNotify = 9;
      EndSkillNotify EndSkillNotify = 10;
      EntityLoadCompleteNotify EntityLoadCompleteNotify = 11;
      PartUpdateNotify PartUpdateNotify = 12;
      PartComponentInitNotify PartComponentInitNotify = 14;
      MaterialNotify MaterialNotify = 15;
      GameplayCueNotify GameplayCueNotify = 16;
      EntityIsVisibleNotify EntityIsVisibleNotify = 17;
      SwitchCharacterStateNotify SwitchCharacterStateNotify = 18;
      PlayerRebackSceneNotify PlayerRebackSceneNotify = 19;
      LogicStateInitNotify LogicStateInitNotify = 20;
      SwitchLogicStateNotify SwitchLogicStateNotify = 21;
      AttributeChangedNotify AttributeChangedNotify = 22;
      AnimationStateChangedNotify AnimationStateChangedNotify = 23;
      AnimationStateInitNotify AnimationStateInitNotify = 24;
      ModifyBulletParamsNotify ModifyBulletParamsNotify = 25;
      DrownNotify DrownNotify = 26;
      OrderApplyBuffNotify OrderApplyBuffNotify = 27;
      OrderRemoveBuffNotify OrderRemoveBuffNotify = 28;
      ActivateBuffNotify ActivateBuffNotify = 29;
      OrderRemoveBuffByTagsNotify OrderRemoveBuffByTagsNotify = 30;
      Ai.AiInformationNotify AiInformationNotify = 31;
      BattleStateChangeNotify BattleStateChangeNotify = 32;
      AnimationGameplayTagNotify AnimationGameplayTagNotify = 33;
      BoneVisibleChangeNotify BoneVisibleChangeNotify = 34;
      Ai.AiBlackboardCdNotify AiBlackboardCdNotify = 35;
      CaughtNotify CaughtNotify = 36;
      EntityStaticHookMoveNotify EntityStaticHookMoveNotify = 37;
      ChangeStateNotify ChangeStateNotify = 38;
      ChangeStateConfirmNotify ChangeStateConfirmNotify = 40;
      BuffStackCountNotify BuffStackCountNotify = 41;
      MontagePlayNotify MontagePlayNotify = 42;
      ANStartNotify ANStartNotify = 43;
      FsmResetNotify FsmResetNotify = 44;
      Debug.DamageRecordNotify DamageRecordNotify = 45;
      Ai.AiHateNotify AiHateNotify = 46;
      FsmBlackboardNotify FsmBlackboardNotify = 47;
      CharacterBattleStateChangeNotify CharacterBattleStateChangeNotify = 48;
      ApplyBuffS2cRequestNotify ApplyBuffS2cRequestNotify = 53;
      RemoveBuffS2cRequestNotify RemoveBuffS2cRequestNotify = 54;
      ActorVisibleNotify ActorVisibleNotify = 57;
      RTimeStopRequest RTimeStopRequest = 58;
      RemoveBuffByIdS2cRequestNotify RemoveBuffByIdS2cRequestNotify = 59;
      ShieldUpdateNotify ShieldUpdateNotify = 61;
      PlayerBattleStateChangeNotify PlayerBattleStateChangeNotify = 62;
      FsmCustomBlackboardNotify FsmCustomBlackboardNotify = 63;
      PassiveSkillAddNotify PassiveSkillAddNotify = 64;
      PassiveSkillRemoveNotify PassiveSkillRemoveNotify = 65;
      HandleLinkingStateNotify HandleLinkingStateNotify = 66;
      HandleLinkExitNotify HandleLinkExitNotify = 67;
      ExecuteQteNotify ExecuteQteNotify = 68;
      Debug.MCl MCl = 69;
    }
    CombatCommon CombatCommon = 1;
  }

  message CombatContext {
    oneof Message {
      FsmStateChangeContext FsmStateChangeContext = 1;
      SkillContext SkillContext = 2;
      MontageContext MontageContext = 3;
      AddBuffContext AddBuffContext = 4;
      BulletContext BulletContext = 5;
    }
  }

  message CombatRequestData {
    oneof Message {
      CreateBulletRequest CreateBulletRequest = 3;
      DestroyBulletRequest DestroyBulletRequest = 4;
      DamageExecuteRequest DamageExecuteRequest = 5;
      ApplyGameplayEffectRequest ApplyGameplayEffectRequest = 6;
      RemoveGameplayEffectRequest RemoveGameplayEffectRequest = 7;
      HitRequest HitRequest = 8;
      HitEndRequest HitEndRequest = 9;
      SkillRequest SkillRequest = 10;
      UseSkillRequest UseSkillRequest = 11;
      EndSkillRequest EndSkillRequest = 12;
      PartUpdateRequest PartUpdateRequest = 13;
      MaterialRequest MaterialRequest = 14;
      GameplayCueRequest GameplayCueRequest = 15;
      EntityIsVisibleRequest EntityIsVisibleRequest = 16;
      SwitchCharacterStateRequest SwitchCharacterStateRequest = 17;
      LogicStateInitRequest LogicStateInitRequest = 18;
      SwitchLogicStateRequest SwitchLogicStateRequest = 19;
      AnimationStateChangedRequest AnimationStateChangedRequest = 20;
      AnimationStateInitRequest AnimationStateInitRequest = 21;
      ModifyBulletParamsRequest ModifyBulletParamsRequest = 22;
      DrownRequest DrownRequest = 23;
      OrderApplyBuffRequest OrderApplyBuffRequest = 24;
      OrderRemoveBuffRequest OrderRemoveBuffRequest = 25;
      ActivateBuffRequest ActivateBuffRequest = 26;
      OrderRemoveBuffByTagsRequest OrderRemoveBuffByTagsRequest = 27;
      Ai.AiInformationRequest AiInformationRequest = 28;
      ToughCalcExtraRatioChangeRequest ToughCalcExtraRatioChangeRequest = 29;
      BattleStateChangeRequest BattleStateChangeRequest = 30;
      AnimationGameplayTagRequest AnimationGameplayTagRequest = 31;
      BoneVisibleChangeRequest BoneVisibleChangeRequest = 32;
      Ai.AiBlackboardsRequest AiBlackboardsRequest = 33;
      Ai.AiBlackboardCdRequest AiBlackboardCdRequest = 34;
      Ai.AiHateRequest AiHateRequest = 35;
      MonsterBoomRequest MonsterBoomRequest = 36;
      CaughtRequest CaughtRequest = 37;
      EntityStaticHookMoveRequest EntityStaticHookMoveRequest = 38;
      ChangeStateRequest ChangeStateRequest = 39;
      ChangeStateConfirmRequest ChangeStateConfirmRequest = 40;
      FsmConditionPassRequest FsmConditionPassRequest = 41;
      BuffStackCountRequest BuffStackCountRequest = 42;
      ANStartRequest ANStartRequest = 43;
      UseSkillFailRequest UseSkillFailRequest = 44;
      EnterViewDirectionRequest EnterViewDirectionRequest = 45;
      ExitViewDirectionRequest ExitViewDirectionRequest = 46;
      PassiveSkillAddRequest PassiveSkillAddRequest = 47;
      InterruptSkillInDelayRequest InterruptSkillInDelayRequest = 49;
      TriggerExitSkillRequest TriggerExitSkillRequest = 50;
      ActorVisibleRequest ActorVisibleRequest = 55;
      BuffEffectRequest BuffEffectRequest = 56;
      FragileChangeRequest FragileChangeRequest = 57;
      RTimeStopRequest RTimeStopRequest = 58;
      DrownEndTeleportRequest DrownEndTeleportRequest = 59;
      MonsterDrownRequest MonsterDrownRequest = 60;
      PassiveSkillRemoveRequest PassiveSkillRemoveRequest = 61;
      R4n R4n = 62;
      FsmStateBehaviorRequest FsmStateBehaviorRequest = 63;
      PlayMontageTaskAndRequest PlayMontageTaskAndRequest = 64;
      TsAnimNotifyStateAbsoluteTimeStopRequest TsAnimNotifyStateAbsoluteTimeStop = 65;
      SwitchRoleRequest SwitchRoleRequest = 66;
      RoleTagChangeRequest RoleTagChangeRequest = 67;
      ExecuteQteRequest ExecuteQteRequest = 68;
      CombatMessage.CombatMaxCaseMessageRequest CombatMaxCaseMessageRequest = 99;
    }

    CombatCommon CombatCommon = 1;
    int32 RequestId = 2;
  }

  message CombatResponseData {
    oneof Message {
      CreateBulletResponse CreateBulletResponse = 3;
      DestroyBulletResponse DestroyBulletResponse = 4;
      DamageExecuteResponse DamageExecuteResponse = 5;
      ApplyGameplayEffectResponse ApplyGameplayEffectResponse = 6;
      RemoveGameplayEffectResponse RemoveGameplayEffectResponse = 7;
      HitResponse HitResponse = 8;
      HitEndResponse HitEndResponse = 9;
      SkillResponse SkillResponse = 10;
      UseSkillResponse UseSkillResponse = 11;
      EndSkillResponse EndSkillResponse = 12;
      PartUpdateResponse PartUpdateResponse = 13;
      MaterialResponse MaterialResponse = 14;
      GameplayCueResponse GameplayCueResponse = 15;
      EntityIsVisibleResponse EntityIsVisibleResponse = 16;
      SwitchCharacterStateResponse SwitchCharacterStateResponse = 17;
      LogicStateInitResponse LogicStateInitResponse = 18;
      SwitchLogicStateResponse SwitchLogicStateResponse = 19;
      AnimationStateChangedResponse AnimationStateChangedResponse = 20;
      AnimationStateInitResponse AnimationStateInitResponse = 21;
      ModifyBulletParamsResponse ModifyBulletParamsResponse = 22;
      DrownResponse DrownResponse = 23;
      OrderApplyBuffResponse OrderApplyBuffResponse = 24;
      OrderRemoveBuffResponse OrderRemoveBuffResponse = 25;
      ActivateBuffResponse ActivateBuffResponse = 26;
      OrderRemoveBuffByTagsResponse OrderRemoveBuffByTagsResponse = 27;
      Ai.AiInformationResponse AiInformationResponse = 28;
      ToughCalcExtraRatioChangeResponse ToughCalcExtraRatioChangeResponse = 29;
      BattleStateChangeResponse BattleStateChangeResponse = 30;
      AnimationGameplayTagResponse AnimationGameplayTagResponse = 31;
      BoneVisibleChangeResponse BoneVisibleChangeResponse = 32;
      Ai.AiBlackboardsResponse AiBlackboardsResponse = 33;
      Ai.AiBlackboardCdResponse AiBlackboardCdResponse = 34;
      Ai.AiHateResponse AiHateResponse = 35;
      MonsterBoomResponse MonsterBoomResponse = 36;
      CaughtResponse CaughtResponse = 37;
      EntityStaticHookMoveResponse EntityStaticHookMoveResponse = 38;
      ChangeStateResponse ChangeStateResponse = 39;
      ChangeStateConfirmResponse ChangeStateConfirmResponse = 40;
      FsmConditionPassResponse FsmConditionPassResponse = 41;
      BuffStackCountResponse BuffStackCountResponse = 42;
      ANStartResponse ANStartResponse = 43;
      UseSkillFailResponse UseSkillFailResponse = 44;
      EnterViewDirectionResponse EnterViewDirectionResponse = 45;
      ExitViewDirectionResponse ExitViewDirectionResponse = 46;
      PassiveSkillAddResponse PassiveSkillAddResponse = 47;
      InterruptSkillInDelayResponse InterruptSkillInDelayResponse = 49;
      TriggerExitSkillResponse TriggerExitSkillResponse = 50;
      ActorVisibleResponse ActorVisibleResponse = 55;
      BuffEffectResponse BuffEffectResponse = 56;
      FragileChangeResponse FragileChangeResponse = 57;
      RTimeStopResponse RTimeStopResponse = 58;
      DrownEndTeleportResponse DrownEndTeleportResponse = 59;
      MonsterDrownResponse MonsterDrownResponse = 60;
      PassiveSkillRemoveResponse PassiveSkillRemoveResponse = 61;
      kCs1 kCs = 62;
      FsmStateBehaviorResponse FsmStateBehaviorResponse = 63;
      PlayMontageTaskAndResponse PlayMontageTaskAndResponse = 64;
      TsAnimNotifyStateAbsoluteTimeStopResponse TsAnimNotifyStateAbsoluteTimeStopResponse = 65;
      SwitchRoleResponse SwitchRoleResponse = 66;
      RoleTagChangeResponse RoleTagChangeResponse = 67;
      ExecuteQteResponse ExecuteQteResponse = 68;
    }
    CombatCommon CombatCommon = 1;
    int32 RequestId = 2;
  }

  message CombatSendData {
    oneof Message {
      CombatMessage.CombatPushData Push = 2;
      CombatMessage.CombatRequestData Request = 3;
    }

  }

  message CombatReceiveData {
    oneof Message {
      CombatMessage.CombatNotifyData CombatNotifyData = 2;
      CombatMessage.CombatResponseData CombatResponseData = 3;
    }
  }

  // MessageId: 25173 (Request)
  message CombatSendPackRequest {
    repeated CombatMessage.CombatSendData Data = 100;
    int32 HostPlayerId = 119;
  }

  // MessageId: 23252 (Response)
  message CombatSendPackResponse {
    ErrorCode ErrorCode = 71;
    CombatMessage.CombatReceivePackNotify ReceivePackNotify = 119;
  }

  // MessageId: 19963 (Notify)
  message CombatReceivePackNotify {
    repeated CombatReceiveData Data = 6;
  }

  // MessageId: 18947 (Request)
  message CombatMaxCaseMessageRequest {
  }

  // MessageId: 25819 (Response)
  message CombatMaxCaseMessageResponse {
  }

  // MessageId: 21684 (Request)
  message CombatMessagePrefixInfoRequest {
    string Id = 68;
  }

  // MessageId: 24806 (Response)
  message CombatMessagePrefixInfoResponse {
    bytes PrefixInfo = 34;
  }

  // MessageId: 24406 (Request)
  message CombatMessagePostInfoRequest {
    bytes PostId = 18;
  }

  // MessageId: 16855 (Response)
  message CombatMessagePostInfoResponse {
    string PostInfo = 227;
  }
}

// MessageId: 19292 (Request)
message SceneItemStateRequest {
  int64 EntityId = 191;
  int32 OperateType = 108;
}

// MessageId: 29929 (Response)
message SceneItemStateResponse {
  ErrorCode ErrorCode = 176;
}

// MessageId: 27048 (Request)
message EntityLoadCompleteRequest {
  repeated int64 EntityIds = 135;
}

// MessageId: 17034 (Response)
message EntityLoadCompleteResponse {
}

// MessageId: 24108 (Notify)
message EntityLoadCompleteNotify {
  int32 PlayerId = 14;
  repeated int64 EntityIds = 64;
  repeated int64 EntityIdsUnload = 66;
}

// MessageId: 23342 (Request)
message MaterialRequest {
  MaterialInfo MaterialInfo = 123;
  CombatCommon CombatCommon = 26;
}

message MaterialInfo {
  int64 EntityId = 1;
  string AssetName = 2;
  bool IsGroup = 3;
}

// MessageId: 23212 (Response)
message MaterialResponse {
  ErrorCode ErrorCode = 146;
}

// MessageId: 21853 (Notify)
message MaterialNotify {
  MaterialInfo MaterialInfo = 236;
  CombatCommon CombatCommon = 97;
}

// MessageId: 25548 (Request)
message CommonOrganResetTimeRequest {
  int64 EntityId = 253;
}

// MessageId: 27813 (Response)
message CommonOrganResetTimeResponse {
  ErrorCode ErrorCode = 32;
  int64 EntityId = 222;
  int32 ResetTime = 190;
}

message ItemMove {
  int64 EntityId = 1;
  Vector Location = 2;
}

// MessageId: 15969 (Request)
message StopSceneItemMoveRequest {
  repeated ItemMove ItemMove = 80;
  int32 qsh = 251;
}

// MessageId: 26087 (Response)
message StopSceneItemMoveResponse {
  ErrorCode ErrorCode = 123;
}

message MoveToTarget {
  int64 EntityId = 1;
  Vector Location = 2;
  float MoveTime = 3;
  float StayTime = 4;
  float MaxSpeed = 5;
  float Acceleration = 6;
}

// MessageId: 20400 (Request)
message MoveToTargetRequest {
  MoveToTarget MoveToTarget = 85;
  int32 qsh = 8;
}

// MessageId: 22227 (Notify)
message MoveToTargetNotify {
  MoveToTarget M0a = 39;
}

// MessageId: 15380 (Response)
message MoveToTargetResponse {
  ErrorCode ErrorCode = 212;
}

message DynamicEntityInformation {
  int64 Id = 1;
  int32 EntityType = 2;
  int32 ConfigId = 3;
  int32 PlayerId = 4;
  int64 OwnerId = 5;
  MovementInformation MovementInformation = 6;
  repeated GameplayAttributeData GameAttributes = 7;
  bool InitAttribute = 8;
  bool IsVisible = 9;
  repeated int32 AnimationStates = 10;
  bool InitGameplayTag = 11;
  repeated GameplayTagData GameplayTags = 12;
  int32 Level = 13;
  repeated BlackboardParam BlackboardParams = 14;
  repeated string Tags = 15;
  repeated PrivateTag PrivateTags = 16;
  bool DeathStatus = 17;
  int32 HardnessModeId = 19;
  repeated PartInformation PartLifeInfos = 20;
  repeated VisionSkillInformation VisionSkillInfos = 21;
  repeated FightBuffInformation FightBuffInfos = 22;
  int32 CreatureGroup = 23;
  ListenInformation ListenInformation = 24;
  repeated SysBuffInformation SysBuffInfos = 25;
  LivingStatus LivingStatus = 26;
  repeated int32 EntityCommonTags = 27;
  int32 WeaponConfId = 28;
  int32 DurabilityValue = 29;
  Vector InitLocation = 30;
  SummonInfo SummonInfo = 31;
  repeated EntityComponentPb ComponentPbs = 32;
}

// MessageId: 22896 (Notify)
message EntityLivingStatusNotify {
  int64 Id = 153;
  LivingStatus LivingStatus = 119;
  repeated DropVisionItemResult DropVisionItem = 101;
}

message DropVisionItemResult {
  int32 PlayerId = 1;
  bool Drop = 2;
}

message ListenInformation {
  repeated int32 Id = 1;
  float Range = 2;
}

message ScenePlayerInformation {
  int32 PlayerId = 1;
  string PlayerName = 2;
  int32 PlayerIcon = 3;
  int32 Level = 4;
  string GuildName = 5;
  string GuildIntro = 6;
  Vector Location = 7;
  bool IsOffline = 8;
  int32 PlayerPrefix = 9;
  int32 PlayerGEIncHandle = 10;
  repeated FightRoleInfos FightRoleInfos = 11;
  Rotator Rotation = 13;
  int32 GroupType = 14;
  int32 CurRole = 15;
}

message FightRoleInformation {
  int32 roleId = 1;
  int64 EntityId = 2;
  bool IsControl = 5;
}

// MessageId: 17116 (Notify)
message UpdatePlayerAllFightRoleNotify {
  int32 PlayerId = 39;
  repeated FightRoleInformation FightRoleInfos = 59;
}

message PlayerFightRolesInfo {
  int32 PlayerId = 1;
  repeated FightRoleInformation vRs = 2;
  bool IsPhantom = 3;
  bool IsRetain = 4;
}

// MessageId: 21886 (Notify)
message Ous {
  repeated PlayerFightRolesInfo SRs = 64;
}

// MessageId: 16128 (Notify)
message SwitchGroupNotify {
  int32 PlayerId = 206;
  int32 GroupType = 193;
}

message GroupFormation {
  int32 PlayerId = 1;
  repeated FightRoleInfos FightRoleInfos = 2;
  int32 CurrentGroupType = 3;
}

message FightRoleInfo {
  int32 RoleId = 1;
  int64 EntityId = 2;
}

message FightRoleInfos {
  int32 GroupType = 1;
  repeated FightRoleInfo FightRoleInfos = 2;
  int32 CurRole = 3;
  bool IsRetain = 4;
  LivingStatus LivingStatus = 5;
  bool IsFixedLocation = 6;
}

enum Z7s2 {
  Z7s_GroupNone = 0;
  Z7s_Battle = 1;
  Z7s_hxs = 2;
  Z7s_Plot = 3;
}

// MessageId: 27607 (Notify)
message UpdateGroupFormationNotify {
  repeated GroupFormation GroupFormation = 98;
}

// MessageId: 22351 (Notify)
message UpdatePlayerSingleFightRoleNotify {
  int32 PlayerId = 223;
  FightRoleInformation FightRoleInfo = 168;
}

// MessageId: 16142 (Notify)
message ChangePlayerFightRoleNotify {
  int32 PlayerId = 198;
  repeated FightRoleInformation FightRoleInfos = 178;
  bool IsPhantom = 47;
}

message SceneInformation {
  string SceneId = 1;
  int32 InstanceId = 2;
  int32 OwnerId = 3;
  repeated ScenePlayerInformation PlayerInfos = 4;
  repeated DynamicEntityInformation DynamicEntityList = 5;
  repeated BlackboardParam BlackboardParams = 6;
  int64 EndTime = 8;
  PlayerSceneAoiData AoiData = 11;
  repeated int64 OwnerFinishMingSuGens = 12;
  int32 Mode = 13;
  SceneTimeInfo TimeInfo = 14;
  repeated int32 HostFogIds = 15;
  repeated string LoadedSubLevels = 16;
  repeated SceneAreaState AreaStates = 17;
  int32 ResetPointEntityId = 18;
  repeated int32 DataLayers = 19;
  map<int32, int32> AreaMpc = 20;
  int64 CurContextId = 21;
  repeated AudioState AudioState = 23;
  int64 SceneBulletOwnerId = 24;
  int64 SceneTraceId = 25;
}

message SceneAreaState {
  int32 AreaId = 1;
  bool State = 2;
}

// MessageId: 28431 (Notify)
message SceneAreaStateNotify {
  SceneAreaState AreaState = 104;
}

// MessageId: 23998 (Notify)
message HostTeleportUnlockNotify {
  int32 HostPlayerId = 196;
  int32 HostTeleportId = 184;
}

// MessageId: 18690 (Notify)
message HostFogIdUnlockNotify {
  int32 HostPlayerId = 159;
  int32 HostFogId = 209;
}

message SceneTimeInfo {
  int32 Hour = 1;
  int32 Minute = 2;
  int64 OwnerTimeClock_TimeSpan = 3;
}

// MessageId: 27777 (Notify)
message SyncSceneTimeNotify {
  SceneTimeInfo TimeInfo = 136;
}

enum SceneMode {
  SceneMode_Single = 0;
  SceneMode_Multi = 1;
}

// MessageId: 21293 (Notify)
message ChangeSceneModeNotify {
  string SceneId = 136;
  int32 Mode = 192;
}

// MessageId: 19431 (Notify)
message ChangeSceneModeEndNotify {
}

// MessageId: 24586 (Request)
message ChangeSceneModeFinishRequest {
}

// MessageId: 15744 (Response)
message ChangeSceneModeFinishResponse {
  ErrorCode ErrorCode = 130;
}

// MessageId: 27800 (Notify)
message ScenePlayerOfflineNotify {
  int32 PlayerId = 61;
  bool IsOffline = 92;
  bool IsReLogin = 156;
}

// MessageId: 29483 (Notify)
message JoinSceneNotify {
  SceneInformation SceneInfo = 107;
  int64 MaxEntityId = 219;
  TransitionOptionPb TransitionOption = 8;
}

// MessageId: 19594 (Request)
message SceneTraceRequest {
  int64 SceneTraceId = 227;
}

// MessageId: 19140 (Response)
message SceneTraceResponse {
}

// MessageId: 29020 (Notify)
message AfterJoinSceneNotify {
}

// MessageId: 21573 (Notify)
message OtherJoinSceneNotify {
  ScenePlayerInformation PlayerInfo = 51;
}

enum InstanceType {
  InstanceType_NoneInstance = 0;
  InstanceType_BigWorldInstance = 1;
  InstanceType_NormalInstance = 2;
  InstanceType_MirrorInstance = 3;
  InstanceType_TowerChallengeInstance = 4;
  InstanceType_CycleTowerChallenge = 5;
}

enum LeaveReason {
  LeaveReason_Initiative = 0;
  LeaveReason_BeKick = 1;
  LeaveReason_Dissolve = 2;
}

// MessageId: 17218 (Notify)
message LeaveSceneNotify {
  int32 PlayerId = 151;
  string SceneId = 181;
  TransitionOptionPb TransitionOption = 3;
}

message MovingEntityData {
  int64 EntityId = 1;
  int64 Originator = 2;
  repeated MoveReplaySample MoveInfos = 3;
}

// MessageId: 29926 (Push)
message MovePackagePush {
  repeated MovingEntityData MovingEntities = 59;
  int32 qsh = 193;
}

// MessageId: 23970 (Notify)
message MovePackageNotify {
  repeated MovingEntityData MovingEntities = 56;
}

// MessageId: 19106 (Push)
message PendingMoveInfoPush {
  repeated MovingEntityData MovingEntities = 196;
  int32 IsMulti = 167;
}

// MessageId: 23937 (Notify)
message MoveInfosHandleNotify {
  repeated MovingEntityData MovingEntities = 79;
}

// MessageId: 26358 (Push)
message EntitySimplyMoveInfoPackagePush {
  repeated EntitySimplyMoveInfo MoveInfos = 224;
  int32 IsMulti = 251;
}

message PawnMovement {
  Vector LinearVelocity = 1;
  Vector Location = 2;
  Rotator Rotation = 3;
  float TimeStamp = 4;
}

// MessageId: 23026 (Push)
message PawnAbsorbMovementPush {
  CombatCommon CombatCommon = 220;
  repeated PawnMovement MoveInfos = 243;
}

// MessageId: 29989 (Notify)
message PawnAbsorbMovementNotify {
  CombatCommon CombatCommon = 85;
  repeated PawnMovement MoveInfos = 237;
}

// MessageId: 19967 (Notify)
message ChangeEntityRoleNotify {
  int64 Id = 75;
  int32 PlayerId = 167;
}

// MessageId: 27217 (Request)
message CaptureEntityRequest {
  int64 Id = 53;
}

// MessageId: 18676 (Response)
message CaptureEntityResponse {
  ErrorCode ErrorCode = 204;
  int64 Id = 73;
}

// MessageId: 25710 (Request)
message RemoveSummonEntityRequest {
  int64 SummonerId = 220;
  int32 SkillId = 70;
  int32 RemoveType = 253;
  repeated int64 RemoveEntityIds = 254;
}

// MessageId: 21433 (Response)
message RemoveSummonEntityResponse {
  ErrorCode ErrorCode = 39;
}

// MessageId: 18167 (Request)
message ChangeEntityRoleRequest {
  int64 Id = 87;
  int32 PlayerId = 248;
}

// MessageId: 16039 (Response)
message ChangeEntityRoleResponse {
  bool Success = 6;
  int64 Id = 218;
  int32 PlayerId = 67;
}

// MessageId: 24612 (Request)
message EntityOnLandedRequest {
  int64 EntityId = 35;
}

// MessageId: 27001 (Response)
message EntityOnLandedResponse {
}

// MessageId: 23299 (Notify)
message EntityOnLandedNotify {
  int64 Id = 178;
}

// MessageId: 29574 (Request)
message AttributeInitRequest {
  int64 Id = 101;
  repeated GameplayAttributeData IsStopCharacter = 20;
}

// MessageId: 19770 (Response)
message AttributeInitResponse {
  bool Success = 53;
  int64 Id = 188;
}

// MessageId: 26656 (Notify)
message AttributeInitNotify {
  int64 Id = 146;
  repeated GameplayAttributeData IsStopCharacter = 206;
}

// MessageId: 18419 (Request)
message AttributeChangedRequest {
  int64 Id = 239;
  repeated GameplayAttributeData IsStopCharacter = 47;
}

// MessageId: 29150 (Response)
message AttributeChangedResponse {
  ErrorCode ErrorCode = 83;
}

// MessageId: 19300 (Notify)
message AttributeChangedNotify {
  int64 Id = 99;
  repeated GameplayAttributeData IsStopCharacter = 237;
}

// MessageId: 15120 (Notify)
message MonsterLevelNotify {
  int64 Id = 251;
  int32 Level = 199;
}

// MessageId: 22914 (Notify)
message MonsterLevelArrayNotify {
  repeated MonsterLevelNotify Monsters = 174;
}

// MessageId: 17748 (Notify)
message MonsterAttributeNotify {
  int64 Id = 245;
  map<int32, int32> IsStopCharacter = 114;
}

// MessageId: 20372 (Notify)
message MonsterAttributeArrayNotify {
  repeated MonsterAttributeNotify Monsters = 105;
}

// MessageId: 25621 (Request)
message AnimationStateInitRequest {
  CombatCommon CombatCommon = 220;
  int64 Id = 204;
  repeated int32 States = 155;
  repeated int32 SpecialStates = 184;
}

// MessageId: 28758 (Response)
message AnimationStateInitResponse {
  ErrorCode ErrorCode = 126;
}

// MessageId: 23910 (Notify)
message AnimationStateInitNotify {
  CombatCommon CombatCommon = 31;
  int64 Id = 94;
  repeated int32 States = 54;
  float TimeStamp = 100;
  repeated int32 SpecialStates = 45;
}

// MessageId: 15165 (Request)
message AnimationStateChangedRequest {
  CombatCommon CombatCommon = 144;
  int64 Id = 69;
  repeated int32 States = 176;
  repeated int32 SpecialStates = 72;
}

// MessageId: 24735 (Response)
message AnimationStateChangedResponse {
  ErrorCode ErrorCode = 137;
}

// MessageId: 29202 (Notify)
message AnimationStateChangedNotify {
  CombatCommon CombatCommon = 25;
  int64 Id = 67;
  repeated int32 States = 84;
  float TimeStamp = 217;
  repeated int32 SpecialStates = 70;
}

// MessageId: 22131 (Notify)
message GameplayTagInitNotify {
  int64 Id = 245;
  repeated GameplayTagData Tags = 78;
}

// MessageId: 21361 (Notify)
message GameplayTagChangedNotify {
  int64 Id = 43;
  repeated GameplayTagData Tags = 94;
}

// MessageId: 20072 (Notify)
message EntityCommonTagNotify {
  int64 Id = 57;
  repeated CommonTagData Tags = 88;
}

// MessageId: 22531 (Notify)
message ChangeControlRoleNotify {
  int64 upId = 247;
  int64 downId = 75;
  int32 PlayerId = 78;
  bool NeedSetLocation = 33;
  Vector Location = 53;
}

message n4s1 {
  int64 EntityId = 1;
  bool Status = 2;
}

// MessageId: 22824 (Request)
message HardnessModeChangedRequest {
  int64 EntityId = 90;
  int32 HardnessModeId = 209;
}

// MessageId: 15508 (Response)
message HardnessModeChangedResponse {
  ErrorCode ErrorCode = 250;
}

// MessageId: 18262 (Notify)
message HardnessModeChangedNotify {
  int64 EntityId = 254;
  int32 HardnessModeId = 4;
}

message SummonRequestInfo {
  int64 SummonEntityId = 1;
  int32 SkillId = 2;
  int32 SummonConfigId = 3;
  Vector Pos = 4;
  Rotator Rot = 5;
  bool IsVisible = 6;
}

// MessageId: 23108 (Request)
message SummonRequest {
  int64 SummonerEntityId = 67;
  SummonRequestInfo SummonInfo = 132;
}

// MessageId: 29811 (Response)
message SummonResponse {
  ErrorCode ErrorCode = 52;
}

// MessageId: 22439 (Request)
message Summon2Request {
  int64 SummonerEntityId = 156;
  SummonRequestInfo SummonInfo = 29;
  int32 Version = 77;
}

// MessageId: 16731 (Response)
message Summon2Response {
  ErrorCode ErrorCode = 237;
  int32 Version = 57;
}

// MessageId: 17184 (Notify)
message SummonEntityNotify {
  int64 SummonerId = 115;
  repeated int64 zRs = 217;
}

// MessageId: 27840 (Notify)
message VisionSkillCallNotify {
  int32 PlayerId = 214;
  DynamicEntityInformation EntityInfo = 82;
}

message InstanceTimer {
  int32 Status = 1;
  int32 RemainTick = 2;
}

// MessageId: 20618 (Notify)
message InstanceTimerNotify {
  map<int32, InstanceTimer> InstanceTimers = 161;
}

// MessageId: 29667 (Notify)
message UpdateInstanceTimerNotify {
  map<int32, InstanceTimer> InstanceTimers = 3;
}

// MessageId: 16249 (Notify)
message RemoveInstanceTimerNotify {
  int32 TimerId = 45;
}

// MessageId: 18890 (Request)
message RemoveInstanceTimerRequest {
  int32 TimerId = 241;
}

// MessageId: 28179 (Response)
message RemoveInstanceTimerResponse {
  ErrorCode ErrorCode = 192;
  int32 TimerId = 96;
}

message l4s {
  int32 Status = 1;
  int32 RemainTick = 2;
}

message _4s {
  map<int32, l4s> rDs = 1;
}

message u4s1 {
  map<int32, l4s> rDs = 1;
}

message c4s {
  int32 TimerId = 1;
}

message d4s1 {
  int32 TimerId = 1;
}

message m4s {
  ErrorCode ErrorCode = 1;
  int32 TimerId = 2;
}

// MessageId: 17597 (Notify)
message UpdateInstanceOwnerInfoNotify {
  int64 Id = 91;
  InstanceOwnerInfo InstanceOwnerInfo = 148;
}

// MessageId: 25134 (Notify)
message UpdateOwnerMingSuGenNotify {
  int64 Id = 57;
}

// MessageId: 20648 (Notify)
message AddSysBuffNotify {
  int64 EntityId = 26;
  repeated SysBuffInformation BuffInfos = 236;
}

// MessageId: 19003 (Notify)
message UpdateSysBuffNotify {
  int64 EntityId = 237;
  repeated SysBuffInformation BuffInfos = 250;
}

// MessageId: 25142 (Notify)
message RemoveSysBuffNotify {
  int64 EntityId = 105;
  repeated int32 Ids = 250;
}

// MessageId: 24319 (Push)
message ChangeSceneClockPush {
  int32 Hour = 139;
  int32 Minute = 254;
  bool sDs = 31;
}

enum SceneDateUpdateReason {
  SceneDateUpdateReason_TimeFlowAuto = 0;
  SceneDateUpdateReason_LevelPlayAuto = 1;
  SceneDateUpdateReason_PlayerOperate = 2;
}

// MessageId: 22935 (Request)
message UpdateSceneDateRequest {
  uint32 AddDays = 249;
  int32 Hour = 72;
  int32 Minute = 55;
  int32 Reason = 22;
}

// MessageId: 20684 (Response)
message UpdateSceneDateResponse {
  ErrorCode ErrorCode = 70;
  uint32 CurrDate = 246;
}

// MessageId: 17757 (Notify)
message SceneDateNotify {
  uint32 CurrDate = 164;
}

// MessageId: 15758 (Push)
message HoldWeaponPush {
  int64 EntityId = 137;
  int64 WeaponEntityId = 80;
}

// MessageId: 29476 (Push)
message DiscardWeaponPush {
  int64 EntityId = 132;
  MovementInformation MovementInformation = 117;
}

// MessageId: 19051 (Request)
message DiscardWeaponRequest {
  int64 EntityId = 229;
  MovementInformation MovementInformation = 75;
}

// MessageId: 20387 (Response)
message DiscardWeaponResponse {
  bool DiscardSucc = 88;
}

// MessageId: 27384 (Notify)
message HoldWeaponNotify {
  int64 EntityId = 55;
  int32 WeaponConfId = 6;
}

// MessageId: 24492 (Request)
message CreatStoryCharacterRequest {
}

// MessageId: 24229 (Response)
message CreatStoryCharacterResponse {
  ErrorCode ErrorCode = 246;
  int64 EntityId = 181;
}

// MessageId: 17987 (Request)
message DeleteStoryCharacterRequest {
}

// MessageId: 26492 (Response)
message DeleteStoryCharacterResponse {
  ErrorCode ErrorCode = 215;
  int32 FightRoleId = 5;
}

// MessageId: 21503 (Notify)
message EnterAoiNotify {
  repeated DynamicEntityInformation EntityInfos = 54;
}

// MessageId: 22259 (Notify)
message AddEntityAoiNotify {
  repeated DynamicEntityInformation EntityInfos = 222;
}

// MessageId: 21378 (Notify)
message LeaveAoiNotify {
  repeated int64 EntityIds = 238;
}

// MessageId: 17488 (Notify)
message RemoveEntityAoiNotify {
  repeated EntityRemoveInfo RemoveInfos = 12;
}

// MessageId: 27102 (Notify)
message PlayerAoiRangeNotify {
  int32 MinX = 109;
  int32 MaxX = 212;
  int32 MinY = 77;
  int32 MaxY = 66;
}

message PlayerSceneAoiData {
  repeated DynamicEntityInformation DynamicEntityList = 1;
  repeated int64 GenIds = 2;
  repeated EntityPb Entities = 3;
}

message SceneGamePlayInfo {
  int32 GamePlayId = 1;
  bool IsFirst = 2;
  int32 Status = 3;
  uint32 OpenTime = 4;
}

// MessageId: 28013 (Notify)
message SceneGamePlayInfoNotify {
  repeated SceneGamePlayInfo GamePlayInfo = 90;
}

// MessageId: 29094 (Notify)
message SceneGamePlayFirstNotify {
  int32 GamePlayId = 162;
}

// MessageId: 15816 (Notify)
message SceneGamePlayStatusNotify {
  int32 GamePlayId = 27;
  int32 Status = 142;
}

// MessageId: 19992 (Notify)
message SceneGamePlayScopeNotify {
  int32 GamePlayId = 203;
  bool IsEnter = 24;
}

// MessageId: 22822 (Notify)
message SceneGamePlayOpenTimeNotify {
  int32 GamePlayId = 16;
  uint32 OpenTime = 159;
}

// MessageId: 24626 (Request)
message CreatureDetailRequest {
  int64 Id = 244;
}

// MessageId: 24941 (Response)
message CreatureDetailResponse {
  ErrorCode ErrorCode = 208;
  int64 Id = 227;
  int32 CurCount = 63;
  int64 NextRefreshTime = 130;
  int32 ConfigIndex = 199;
  int32 AreaIndex = 98;
  int32 ExistCount = 7;
  bool ConditionSatisfy = 192;
  repeated DynamicEntityInformation AliveEntities = 76;
}

// MessageId: 15333 (Notify)
message ResetLocationForZRangeNotify {
  int64 EntityId = 116;
  Vector ResetLocation = 247;
  Rotator Rotation = 120;
  bool NotifyRot = 40;
  bool ChangeInitPos = 227;
}

// MessageId: 24109 (Request)
message ChangeEntityStateRequest {
  int32 EntityId = 249;
  int32 StateTagId = 246;
}

// MessageId: 15784 (Response)
message ChangeEntityStateResponse {
  ErrorCode ErrorCode = 236;
}

// MessageId: 18808 (Request)
message FoundationRequest {
  int64 EntityId = 218;
  int64 AccusedEntityId = 241;
  int32 ActiveOperate = 131;
  Vector Pos = 154;
  Rotator Rot = 176;
}

// MessageId: 17346 (Response)
message FoundationResponse {
  ErrorCode ErrorCode = 61;
  int32 ActiveOperate = 77;
}

// MessageId: 22767 (Notify)
message BeControlledPosInFoundationNotify {
  int64 FoundationEntityId = 33;
  int64 BeControlledEntityId = 203;
  int32 InstId = 251;
  int32 BIs = 193;
}

// MessageId: 22901 (Request)
message BeControlledRequest {
  int64 EntityId = 225;
  bool IsControl = 4;
}

// MessageId: 26781 (Response)
message BeControlledResponse {
  ErrorCode ErrorCode = 31;
}

// MessageId: 24749 (Notify)
message BeControlledNotify {
  int64 EntityId = 51;
  int64 RoleEntityId = 189;
  bool NeedReset = 91;
}

// MessageId: 15785 (Request)
message BeControlledShowRequest {
  int64 EntityId = 103;
  bool IsShow = 130;
}

// MessageId: 26896 (Response)
message BeControlledShowResponse {
  ErrorCode ErrorCode = 117;
}

// MessageId: 21753 (Notify)
message BeControlledShowNotify {
  int64 EntityId = 77;
  int64 RoleEntityId = 56;
  bool IsShow = 153;
}

enum TeleControlThrowWay {
  TeleControlThrowWay_EControlStateLetGo = 0;
  TeleControlThrowWay_EControlStateFreeThrowing = 1;
  TeleControlThrowWay_EControlStateLockBaseThrowing = 2;
  TeleControlThrowWay_EControlStateLockEntityThrowing = 3;
}

// MessageId: 15793 (Request)
message BeControlledThrowRequest {
  int64 EntityId = 65;
  int32 ThrowType = 213;
  int32 Jhl = 66;
}

// MessageId: 25837 (Response)
message BeControlledThrowResponse {
  ErrorCode ErrorCode = 166;
}

// MessageId: 26115 (Notify)
message RelationIdNotify {
  int32 MapId = 133;
  int32 RelationId = 241;
  int32 InstId = 96;
  int32 BIs = 109;
}

message SummonInfo {
  int32 SummonCfgId = 1;
  int64 SummonerId = 2;
  int32 SummonSkillId = 3;
}

// MessageId: 18512 (Notify)
message EntityPosResetNotify {
  int32 EntityId = 94;
}

enum ODs2 {
  ODs_InActive = 0;
  ODs_Active = 1;
}

// MessageId: 16566 (Request)
message Bds {
  int32 GDs2 = 103;
  int32 ODs2 = 217;
}

// MessageId: 16368 (Response)
message qds {
  ErrorCode ErrorCode = 224;
}

// MessageId: 26088 (Notify)
message ChangeWeatherNotify {
  int32 WeatherId = 147;
  bool QuickTimeChange = 213;
}

// MessageId: 27581 (Request)
message ChangeWeatherRequest {
  int32 WeatherId = 103;
}

// MessageId: 15992 (Response)
message ChangeWeatherResponse {
  ErrorCode ErrorCode = 146;
  int32 WeatherId = 63;
}

// MessageId: 17317 (Request)
message EntityFollowTrackRequest {
  int64 EntityId = 135;
}

// MessageId: 22087 (Response)
message EntityFollowTrackResponse {
  ErrorCode ErrorCode = 140;
}

// MessageId: 29220 (Request)
message SetInitTagRequest {
  int64 EntityId = 134;
}

// MessageId: 22771 (Response)
message SetInitTagResponse {
  ErrorCode ErrorCode = 86;
}

// MessageId: 22284 (Notify)
message PlayerRebackSceneNotify {
  int64 EntityId = 27;
}

// MessageId: 23088 (Request)
message DrownRequest {
}

// MessageId: 16096 (Response)
message DrownResponse {
  ErrorCode ErrorCode = 75;
}

// MessageId: 19836 (Notify)
message DrownNotify {
}

// MessageId: 19302 (Request)
message DrownEndTeleportRequest {
}

// MessageId: 21903 (Response)
message DrownEndTeleportResponse {
  ErrorCode ErrorCode = 135;
}

// MessageId: 18603 (Request)
message MonsterDrownRequest {
  Vector Pos = 221;
}

// MessageId: 29990 (Response)
message MonsterDrownResponse {
  ErrorCode ErrorCode = 105;
}

// MessageId: 28237 (Notify)
message EnableNearbyTrackingNotify {
  repeated int64 EntityIds = 146;
  bool IsEnable = 4;
}

// MessageId: 19498 (Notify)
message SceneSubLevelsChangedNotify {
  repeated string SubLevelMaps = 213;
  repeated string VDs1 = 201;
  int32 TeleportEntityId = 96;
}

// MessageId: 22101 (Notify)
message LoadOrUnloadSubLevelNotify {
  repeated string SubLevelMaps = 230;
}

// MessageId: 19893 (Request)
message SceneLoadingFinishRequest {
  string SceneId = 51;
}

// MessageId: 24702 (Response)
message SceneLoadingFinishResponse {
  ErrorCode ErrorCode = 210;
}

// MessageId: 26721 (Notify)
message SceneLoadingTimeOutNotify {
}

// MessageId: 28572 (Notify)
message tms1 {
  int32 PlayerId = 250;
}

// MessageId: 26536 (Notify)
message RestoreEntityIdNotify {
  int32 ResetPointEntityId = 204;
}

// MessageId: 15200 (Request)
message SitChairRequest {
  int64 EntityId = 55;
  bool IsSitDown = 81;
  CombatCommon Data = 247;
  AnimationStateChangedRequest Request = 3;
}

// MessageId: 23295 (Response)
message SitChairResponse {
  ErrorCode ErrorCode = 129;
}

// MessageId: 19269 (Request)
message nms2 {
  int64 EntityId = 99;
}

// MessageId: 16928 (Response)
message sms1 {
  ErrorCode ErrorCode = 191;
}

// MessageId: 27159 (Notify)
message SceneTestNotify {
  ErrorCode ErrorCode = 71;
  string ErrorMsg = 186;
  int32 PlayerId = 90;
}

// MessageId: 15327 (Notify)
message SceneChangeDataLayerNotify {
  repeated int32 LoadDataLayers = 189;
  repeated int32 UnloadDataLayers = 202;
  int32 EntityId = 193;
}

// MessageId: 18378 (Request)
message SwitchDataLayerRequest {
  int32 InstId = 11;
}

// MessageId: 20493 (Response)
message SwitchDataLayerResponse {
  ErrorCode ErrorCode = 150;
}

// MessageId: 29952 (Request)
message ums {
  int64 EntityId = 195;
  int64 cKn = 183;
  int32 qsh = 57;
}

// MessageId: 17711 (Response)
message cms2 {
  ErrorCode ErrorCode = 123;
}

// MessageId: 18168 (Request)
message dms2 {
  int64 EntityId = 120;
}

// MessageId: 20253 (Response)
message mms2 {
  ErrorCode ErrorCode = 159;
}

// MessageId: 17014 (Request)
message SendHookDestroyRequest {
  int64 EntityId = 90;
}

// MessageId: 22607 (Response)
message SendHookDestroyResponse {
  ErrorCode ErrorCode = 98;
}

// MessageId: 24372 (Request)
message RemoveAutonomousIdRequest {
  int64 EntityId = 169;
  bool IsControl = 147;
}

// MessageId: 22623 (Response)
message RemoveAutonomousIdResponse {
  ErrorCode ErrorCode = 23;
}

// MessageId: 27185 (Notify)
message kfs3 {
  int64 EntityId = 102;
  int32 wIs = 114;
}

message lEl2 {
  int64 TargetId = 1;
  repeated int64 PortalsId = 2;
}

message gDOLLARs {
  int64 EntityId = 1;
  repeated lEl2 kQa = 2;
  bool CDOLLARs = 3;
}

// MessageId: 26562 (Request)
message ConnectorConnectEntityRequest {
  gDOLLARs gDOLLARs = 194;
}

// MessageId: 22373 (Response)
message ConnectorConnectEntityResponse {
  ErrorCode ErrorCode = 35;
}

// MessageId: 24561 (Notify)
message ConnectorConnectEntityNotify {
  repeated gDOLLARs fDOLLARs = 11;
}

// MessageId: 18063 (Request)
message RemoveEntityRequest {
  int64 EntityId = 121;
}

// MessageId: 24310 (Response)
message RemoveEntityResponse {
  ErrorCode ErrorCode = 168;
}

// MessageId: 18605 (Request)
message DynamicPortalCreatorRequest {
  int64 EntityId = 56;
  bool ila1 = 218;
  int32 BulletId = 27;
}

// MessageId: 17409 (Response)
message DynamicPortalCreatorResponse {
  ErrorCode ErrorCode = 109;
}

// MessageId: 28695 (Request)
message PassPortalRequest {
  int64 EntityId = 146;
  Vector Location = 123;
}

// MessageId: 21741 (Response)
message PassPortalResponse {
  ErrorCode ErrorCode = 104;
}

// MessageId: 20565 (Notify)
message PortalReplaceNotify {
  int64 EntityId = 8;
  int64 ISl1 = 123;
}

// MessageId: 16826 (Request)
message Efl2 {
  int64 EntityId = 55;
  bool IsEnter = 217;
}

// MessageId: 19647 (Response)
message Ifl1 {
  ErrorCode ErrorCode = 56;
}

message PlayerLocation {
  int32 IsTrace = 1;
  int32 PlayerId = 2;
  Vector Location = 3;
}

// MessageId: 17603 (Notify)
message SyncPlayerLocationNotify {
  repeated PlayerLocation PlayerLocation = 189;
}

enum EEntityFsmChangeType {
  EEntityFsmChangeType_Enter = 0;
  EEntityFsmChangeType_Exit = 1;
  EEntityFsmChangeType_BindStart = 3;
  EEntityFsmChangeType_BindEnd = 4;
  EEntityFsmChangeType_Task = 5;
}

enum EBulletCreateSource {
  EBulletCreateSource_NormalSource = 0;
  EBulletCreateSource_ReboundSource = 1;
}

enum hEl {
  hEl_LinkExitNormal = 0;
  hEl_LinkExitTimeout = 1;
}

message FsmStateChangeContext {
  int32 FsmId = 1;
  int32 State = 2;
  int32 ChangeType = 3;
  int32 index = 4;
  int64 ConstateId = 5;
}

message SkillContext {
  int32 SkillId = 1;
  int64 ConstateId = 2;
}

message MontageContext {
  int32 SkillId = 1;
  int32 MontageIndex = 2;
  int64 ConstateId = 3;
}

message AddBuffContext {
  int32 BuffHandle = 1;
  int64 ConstateId = 2;
}

message BulletContext {
  ActiveBulletHandle Handle = 1;
  int64 ConstateId = 2;
}

message HitInformation {
  int64 Originator = 1;
  int64 Flag = 2;
  int64 TargetId = 3;
  int64 BulletId = 4;
  bool HasBeHitData = 5;
  Vector HitEffectPos = 6;
  Rotator HitEffectRotate = 7;
  bool IsShake = 8;
  Vector HitPos = 9;
  bool EnterFk = 10;
  bool IsHitWeakness = 11;
  bool IsTriggerCounterattack = 12;
  Rotator VictimRotation = 13;
  bool IsChangeVictimRotation = 14;
  string HitPart = 15;
  bool IsTriggerVisionCounterAttack = 16;
  int32 SkillId = 17;
  int32 FightState = 18;
  int32 BeHitAnim = 19;
  int32 Source = 20;
}

message SkillNodeInfo {
  int32 SubProtocol = 1;
  int32 MontageIndex = 2;
  float SpeedRatio = 3;
  int32 SkillSingleId = 4;
  int32 SkillIndex = 5;
  string StartSection = 6;
  float StartTimeSeconds = 7;
}

// MessageId: 15651 (Request)
message SkillRequest {
  UseSkillInformation UseSkillInfo = 109;
  SkillNodeInfo SkillNodeInfos = 186;
}

// MessageId: 25855 (Response)
message SkillResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 26773 (Notify)
message SkillNotify {
  UseSkillInformation UseSkillInfo = 110;
  SkillNodeInfo SkillNodeInfos = 56;
}

// MessageId: 27556 (Request)
message UseSkillRequest {
  CombatCommon CombatCommon = 157;
  UseSkillInformation UseSkillInfo = 251;
  int32 SkillSingleId = 81;
}

// MessageId: 22624 (Response)
message UseSkillResponse {
  UseSkillInformation UseSkillInfo = 148;
  int32 SkillSingleId = 182;
  ErrorCode ErrorCode = 94;
}

// MessageId: 22610 (Notify)
message UseSkillNotify {
  CombatCommon CombatCommon = 211;
  UseSkillInformation UseSkillInfo = 188;
  int32 SkillSingleId = 5;
}

// MessageId: 20428 (Request)
message EndSkillRequest {
  CombatCommon CombatCommon = 15;
  UseSkillInformation UseSkillInfo = 104;
  int32 SkillSingleId = 32;
}

// MessageId: 24940 (Response)
message EndSkillResponse {
  UseSkillInformation UseSkillInfo = 163;
  int32 SkillSingleId = 103;
}

// MessageId: 22428 (Notify)
message EndSkillNotify {
  CombatCommon CombatCommon = 178;
  UseSkillInformation UseSkillInfo = 202;
  int32 SkillSingleId = 141;
}

// MessageId: 27214 (Request)
message InterruptSkillInDelayRequest {
  int32 SkillId = 68;
}

// MessageId: 26116 (Response)
message InterruptSkillInDelayResponse {
  int32 SkillId = 51;
}

// MessageId: 19835 (Request)
message UseSkillFailRequest {
  int32 SkillId = 39;
}

// MessageId: 15229 (Response)
message UseSkillFailResponse {
  int32 SkillId = 105;
  DErrorResult Error = 253;
}

// MessageId: 28203 (Request)
message HitRequest {
  CombatCommon CombatCommon = 109;
  HitInformation HitInfo = 43;
}

// MessageId: 19457 (Response)
message HitResponse {
  HitInformation HitInfo = 52;
  ErrorCode ErrorCode = 133;
}

// MessageId: 29243 (Notify)
message HitNotify {
  CombatCommon CombatCommon = 113;
  HitInformation HitInfo = 100;
}

// MessageId: 22039 (Request)
message HitEndRequest {
  CombatCommon CombatCommon = 172;
  int64 TargetId = 117;
}

// MessageId: 21574 (Response)
message HitEndResponse {
  ErrorCode ErrorCode = 189;
}

message CaughtInfo {
  int64 Attacker = 1;
  int64 CaughtInfoId = 2;
  bool IsEnd = 3;
  int32 FightState = 4;
}

// MessageId: 24785 (Request)
message CaughtRequest {
  CaughtInfo Info = 79;
}

// MessageId: 17690 (Response)
message CaughtResponse {
  ErrorCode ErrorCode = 64;
}

// MessageId: 19149 (Notify)
message CaughtNotify {
  CaughtInfo Info = 255;
}

message ActiveBulletHandle {
  int32 PlayerId = 1;
  int32 HandleId = 2;
}

// MessageId: 23683 (Request)
message CreateBulletRequest {
  oneof R4s {
    ActiveBulletHandle BulletHandle = 143;
  }

  CombatCommon CombatCommon = 197;
  ActiveBulletHandle Handle = 55;
  int64 OwnerEntityId = 114;
  int64 BulletId = 60;
  int32 SkillId = 8;
  Vector Location = 160;
  Rotator Rotation = 99;
  int64 TargetId = 203;
  int64 SpawnEntityId = 134;
  int64 SpawnVelocityEntityId = 132;
  bool IsLocal = 77;
  int32 DtType = 79;
  Vector RandomPosOffset = 198;
  Vector RandomInitSpeedOffset = 118;
}

// MessageId: 20319 (Response)
message CreateBulletResponse {
  ErrorCode ErrorCode = 200;
}

// MessageId: 25212 (Notify)
message CreateBulletNotify {
  oneof D4s2 {
    int64 rAs2 = 25;
  }

  CombatCommon CombatCommon = 119;
  ActiveBulletHandle Handle = 64;
  int64 OwnerEntityId = 148;
  int64 BulletId = 221;
  int32 SkillId = 249;
  Vector Location = 59;
  Rotator Rotation = 77;
  ActiveBulletHandle BulletHandle = 43;
  int64 TargetId = 159;
  int64 SpawnEntityId = 33;
  int64 SpawnVelocityEntityId = 233;
  Vector LocationEntityId = 103;
  int32 DtType = 8;
  Vector Size = 202;
  Vector RandomPosOffset = 141;
  Vector RandomInitSpeedOffset = 124;
}

// MessageId: 17084 (Request)
message DestroyBulletRequest {
  CombatCommon CombatCommon = 154;
  ActiveBulletHandle Handle = 9;
}

// MessageId: 19930 (Response)
message DestroyBulletResponse {
  ErrorCode ErrorCode = 169;
}

// MessageId: 23393 (Notify)
message DestroyBulletNotify {
  CombatCommon CombatCommon = 111;
  ActiveBulletHandle Handle = 77;
  bool IsCreateSubBullet = 10;
}

message ModifyBulletParams {
  CombatCommon CombatCommon = 1;
  ActiveBulletHandle Handle = 2;
  int64 TargetId = 3;
}

// MessageId: 16396 (Request)
message ModifyBulletParamsRequest {
  ModifyBulletParams ModifyBulletParams = 6;
}

// MessageId: 21027 (Response)
message ModifyBulletParamsResponse {
  ErrorCode ErrorCode = 69;
}

// MessageId: 18566 (Notify)
message ModifyBulletParamsNotify {
  ModifyBulletParams ModifyBulletParams = 140;
}

enum DamageSourceType {
  DamageSourceType_FromBullet = 0;
  DamageSourceType_FromEffect = 1;
}

message DamageContext {
  oneof U4s2 {
    int32 SkillId = 4;
  }

  int32 SourceType = 1;
  int64 BulletId = 2;
  repeated int32 BulletTags = 3;
}

// MessageId: 21253 (Request)
message DamageExecuteRequest {
  int64 DamageId = 99;
  int32 SkillLevel = 151;
  int64 AttackerEntityId = 200;
  int64 TargetEntityId = 109;
  bool IsAddEnergy = 161;
  bool IsCounterAttack = 193;
  bool ForceCritical = 126;
  bool IsBlocked = 181;
  int32 PartId = 213;
  int64 CounterSkillMessageId = 241;
  DamageContext DamageContext = 148;
  int32 RandomSeed = 6;
}

// MessageId: 21863 (Response)
message DamageExecuteResponse {
  ErrorCode ErrorCode = 231;
  int64 AttackerEntityId = 38;
  int64 TargetEntityId = 211;
  int32 Damage = 183;
  int32 PartId = 241;
  bool IsCrit = 11;
  bool KilledTarget = 58;
  int32 ShieldCoverDamage = 228;
  int32 ImmuneType = 125;
}

// MessageId: 26361 (Notify)
message DamageExecuteNotify {
  int64 DamageId = 111;
  int64 AttackerEntityId = 201;
  int64 TargetEntityId = 115;
  int32 Damage = 134;
  int32 PartId = 166;
  bool IsCrit = 205;
  bool KilledTarget = 126;
  int32 ShieldCoverDamage = 249;
  int32 SkillLevel = 199;
  DamageContext DamageContext = 16;
  int32 ImmuneType = 142;
}

// MessageId: 20562 (Request)
message PassiveSkillAddRequest {
  int64 PassiveSkillId = 61;
  int64 TargetEntityId = 9;
}

// MessageId: 21054 (Response)
message PassiveSkillAddResponse {
  ErrorCode ErrorCode = 118;
}

// MessageId: 17269 (Request)
message PassiveSkillRemoveRequest {
  int64 PassiveSkillId = 231;
  int64 TargetEntityId = 10;
}

// MessageId: 24177 (Response)
message PassiveSkillRemoveResponse {
  ErrorCode ErrorCode = 92;
}

// MessageId: 16171 (Notify)
message PassiveSkillAddNotify {
  int64 EntityId = 123;
  repeated PassiveSkillItemPb PassiveSkillItemPbList = 176;
}

// MessageId: 28209 (Notify)
message PassiveSkillRemoveNotify {
  int64 EntityId = 64;
  repeated int64 SkillIdList = 190;
}

// MessageId: 26060 (Request)
message EnterViewDirectionRequest {
}

// MessageId: 21862 (Response)
message EnterViewDirectionResponse {
}

// MessageId: 16453 (Request)
message ExitViewDirectionRequest {
}

// MessageId: 24361 (Response)
message ExitViewDirectionResponse {
}

// MessageId: 27956 (Request)
message TriggerExitSkillRequest {
  int64 EnterEntityId = 114;
  int64 LeaveEntityId = 106;
}

// MessageId: 17244 (Response)
message TriggerExitSkillResponse {
}

message MonsterInfo {
  int32 MonsterId = 1;
  int32 Num = 2;
  int64 GenId = 3;
}

enum BattleResult {
  BattleResult_AllKill = 0;
  BattleResult_Death = 1;
  BattleResult_Run = 2;
  BattleResult_aEs = 3;
}

enum MonsterResult {
  MonsterResult_MonsterResultDeath = 0;
  MonsterResult_MonsterResultRun = 1;
}

// MessageId: 22377 (Push)
message Cis {
  int32 Role = 112;
  int32 Result = 28;
}

// MessageId: 18990 (Request)
message gis1 {
  int32 roleId = 70;
  int32 Result = 90;
}

// MessageId: 21239 (Response)
message fis {
}

message SkillReport {
  int32 SkillId = 1;
  int32 UseCount = 2;
  int32 HitCount = 3;
  int32 ExpectHitCount = 4;
  int32 RealHitCount = 5;
  int64 Damage = 6;
}

// MessageId: 26143 (Push)
message InstFightEndPush {
  int32 InstId = 218;
  string FightId = 39;
  int32 CostTime = 220;
  int64 AccDamage = 189;
  int64 AccShieldDamage = 8;
  int64 AccSelfDamage = 164;
  int64 AccSkillHeal = 75;
  int64 AccItemHeal = 44;
  int32 StopTimes = 6;
  int32 DamageMax = 72;
  int32 ComboMax = 40;
  int32 AccDodgaTimes = 78;
  int32 DodgeSuccTimes = 225;
}

enum B4s {
  B4s_nAs = 0;
  B4s_GameplayEffect = 1;
  B4s_PAs = 2;
}

// MessageId: 29461 (Request)
message SwitchBattleModeRequest {
  bool Client = 87;
  int32 ClientControllerModule = 85;
}

// MessageId: 17596 (Response)
message SwitchBattleModeResponse {
  bool Client = 6;
}

// MessageId: 23741 (Notify)
message SwitchBattleModeNotify {
  repeated int32 ServerControllerModules = 116;
  repeated int32 ClientControllerModules = 11;
}

// MessageId: 24728 (Notify)
message BattleLogNotify {
  string Log = 191;
}

// MessageId: 17740 (Request)
message LandingDamageRequest {
  int64 EntityId = 218;
  float SpeedZ = 49;
  int32 TimeExceeding = 84;
}

// MessageId: 24340 (Response)
message LandingDamageResponse {
  ErrorCode ErrorCode = 6;
}

// MessageId: 28346 (Request)
message EntityIsVisibleRequest {
  int64 Id = 10;
  bool IsVisible = 106;
  CombatCommon CombatCommon = 46;
}

// MessageId: 28534 (Response)
message EntityIsVisibleResponse {
  ErrorCode ErrorCode = 155;
}

// MessageId: 26247 (Notify)
message EntityIsVisibleNotify {
  int64 Id = 16;
  bool IsVisible = 99;
  CombatCommon CombatCommon = 101;
}

// MessageId: 26840 (Request)
message ActorVisibleRequest {
  int64 Id = 206;
  bool IsActorVisible = 91;
}

// MessageId: 21909 (Response)
message ActorVisibleResponse {
  ErrorCode ErrorCode = 30;
}

// MessageId: 25891 (Notify)
message ActorVisibleNotify {
  int64 Id = 62;
  bool IsActorVisible = 56;
}

// MessageId: 29988 (Request)
message SwitchCharacterStateRequest {
  CombatCommon CombatCommon = 235;
  int64 Id = 237;
  int32 OldState = 66;
  int32 NewState = 40;
}

// MessageId: 27714 (Response)
message SwitchCharacterStateResponse {
}

// MessageId: 25479 (Notify)
message SwitchCharacterStateNotify {
  CombatCommon CombatCommon = 227;
  int64 Id = 75;
  int32 OldState = 236;
  int32 NewState = 230;
}

// MessageId: 17608 (Request)
message BattleStateChangeRequest {
  int64 EntityId = 217;
  bool InBattle = 23;
}

// MessageId: 29700 (Response)
message BattleStateChangeResponse {
  ErrorCode ErrorCode = 125;
}

// MessageId: 20093 (Notify)
message BattleStateChangeNotify {
  int64 EntityId = 146;
  bool InBattle = 242;
}

// MessageId: 18877 (Request)
message ToughCalcExtraRatioChangeRequest {
  int64 Id = 101;
  int32 Duration = 33;
}

// MessageId: 24280 (Response)
message ToughCalcExtraRatioChangeResponse {
  ErrorCode ErrorCode = 114;
}

// MessageId: 29671 (Request)
message MonsterBoomRequest {
  int32 Delay = 156;
}

// MessageId: 29686 (Response)
message MonsterBoomResponse {
  ErrorCode ErrorCode = 3;
}

message EntityBattleTagInfo {
  int32 TagId = 1;
  int32 count = 2;
}

// MessageId: 27442 (Request)
message EntityBattleInfoRequest {
  int64 EntityId = 128;
}

// MessageId: 24110 (Response)
message EntityBattleInfoResponse {
  int64 EntityId = 84;
  ErrorCode ErrorCode = 161;
  FightBuffComponentPb FightBuffComponentPb = 47;
  repeated EntityBattleTagInfo EntityBattleTagInfo = 248;
  repeated GameplayAttributeData IsStopCharacter = 207;
  repeated FormationAttr FormationAttrs = 191;
  PartComponentPb PartComponentPb = 68;
  repeated Ai.AiHateEntity HateList = 141;
  ShieldComponentPb ShieldComponentPb = 35;
  repeated EntityBattleTagInfo PlayerTagInfos = 50;
}

// MessageId: 22154 (Request)
message MontagePlayRequest {
  int32 MontageIndex = 76;
}

// MessageId: 20456 (Response)
message MontagePlayResponse {
  int32 SkillId = 210;
  int32 MontageIndex = 4;
  DErrorResult Error = 102;
}

// MessageId: 22936 (Notify)
message MontagePlayNotify {
  int32 SkillId = 203;
  int32 MontageIndex = 168;
}

// MessageId: 16977 (Request)
message ANStartRequest {
  int32 SkillId = 196;
  int32 MontageIndex = 240;
  int32 AnIndex = 76;
}

// MessageId: 27286 (Response)
message ANStartResponse {
  int32 SkillId = 61;
  int32 MontageIndex = 33;
  int32 AnIndex = 240;
  DErrorResult Error = 229;
}

// MessageId: 19625 (Notify)
message ANStartNotify {
  int32 SkillId = 24;
  int32 MontageIndex = 225;
  int32 AnIndex = 194;
}

enum EDamageImmune {
  EDamageImmune_EDamageImmune_Default = 0;
  EDamageImmune_EDamageImmune_Invincible = 1;
  EDamageImmune_EDamageImmune_BuffEffectElement = 2;
}

message CharacterBattleStateInfo {
  int64 EntityId = 1;
  bool InBattle = 2;
}

// MessageId: 21806 (Notify)
message PushContextIdNotify {
  int64 Id = 60;
}

// MessageId: 25797 (Notify)
message CharacterBattleStateChangeNotify {
  repeated CharacterBattleStateInfo CharacterBattleStateInfo = 132;
}

// MessageId: 16027 (Notify)
message PlayerBattleStateChangeNotify {
  int32 PlayerId = 7;
  bool InBattle = 192;
}

enum EShieldUpdateType {
  EShieldUpdateType_EShieldUpdateTypeAdd = 0;
  EShieldUpdateType_EShieldUpdateTypeDel = 1;
  EShieldUpdateType_EShieldUpdateTypeModify = 2;
}

message ShieldUpdateInfo {
  int32 Handle = 1;
  int32 ConfigId = 2;
  int32 ShieldValue = 3;
  int32 UpdateType = 4;
}

// MessageId: 29468 (Notify)
message ShieldUpdateNotify {
  repeated ShieldUpdateInfo Shields = 187;
}

// MessageId: 28449 (Notify)
message BattleScoreNotify {
  int32 ScoreId = 170;
  int32 Score = 80;
}

// MessageId: 19959 (Notify)
message BattleScoreEnableNotify {
  int32 ScoreId = 88;
  bool Enable = 237;
}

// MessageId: 19497 (Request)
message RoleTagChangeRequest {
  int32 TagId = 244;
  int32 TagCount = 30;
}

// MessageId: 17417 (Response)
message RoleTagChangeResponse {
  ErrorCode ErrorCode = 97;
}

// MessageId: 28268 (Request)
message GameplayCueRequest {
  int64 GameplayCueId = 182;
}

// MessageId: 22853 (Response)
message GameplayCueResponse {
}

// MessageId: 19622 (Notify)
message GameplayCueNotify {
  int64 GameplayCueId = 99;
}

// MessageId: 27021 (Notify)
message InconsistentCombatNotification {
  bool Result = 243;
  int32 ChangeList = 116;
}

// MessageId: 26326 (Notify)
message ExecuteQteNotify {
  int64 DownEntityId = 145;
  int64 UpEntityId = 178;
  int32 FnvHash = 227;
}

// MessageId: 21152 (Request)
message ExecuteQteRequest {
  int64 DownEntityId = 8;
  int64 UpEntityId = 65;
  int32 FnvHash = 189;
}

// MessageId: 25498 (Response)
message ExecuteQteResponse {
  ErrorCode ErrorCode = 194;
}

// MessageId: 20059 (Notify)
message HandleLinkingStateNotify {
  CombatCommon CombatCommon = 21;
  int32 PlayerId = 215;
  int32 Status = 160;
  int64 TimeStamp = 129;
}

// MessageId: 25094 (Notify)
message HandleLinkExitNotify {
  int32 Reason = 188;
  int32 PlayerId = 29;
  int32 Status = 190;
}

message FormationAttr {
  int32 AttrId = 1;
  int32 Ratio = 2;
  int32 BaseMaxValue = 3;
  int32 MaxValue = 4;
  int32 CurrentValue = 5;
}

// MessageId: 26854 (Notify)
message FormationAttrNotify {
  int64 Duration = 165;
  repeated FormationAttr FormationAttrs = 185;
}

// MessageId: 23939 (Request)
message FormationAttrRequest {
  int64 Duration = 135;
  repeated FormationAttr FormationAttrs = 239;
}

// MessageId: 20814 (Response)
message FormationAttrResponse {
  ErrorCode ErrorCode = 50;
}

message RecoverPropFromServer {
  int32 AttrId = 1;
  int32 Ratio = 2;
  int32 MaxValue = 4;
  int32 currentValue = 5;
}

// MessageId: 18268 (Notify)
message RecoverPropChangedNotify {
  int64 Id = 67;
  repeated RecoverPropFromServer Props = 200;
  int64 Duration = 174;
}

// MessageId: 16819 (Request)
message FragileChangeRequest {
  int64 EntityId = 120;
  bool Flag = 189;
}

// MessageId: 24380 (Response)
message FragileChangeResponse {
  ErrorCode ErrorCode = 134;
}

message Debug {
  enum F4s {
    F4s_ECheatInputDefault = 0;
    F4s_ECheatInputDel = 1;
    F4s_ECheatInputEnd = 2;
  }

  // MessageId: 17094 (Request)
  message CheatInputRequest {
    int32 Type = 160;
    int32 AoeDestroyEnemyRange = 155;
    repeated int64 VAs3 = 106;
  }

  // MessageId: 24088 (Response)
  message CheatInputResponse {
    ErrorCode ErrorCode = 124;
  }

  message DamageRecordEntity {
    int64 EntityId = 1;
    repeated int64 BuffIds = 2;
    repeated GameplayAttributeData Attr = 3;
    repeated GameplayAttributeData AttrSnapshot = 4;
  }

  // MessageId: 26067 (Notify)
  message DamageRecordNotify {
    int64 TimestampMs = 71;
    int64 DamageConfId = 149;
    int32 DamageValue = 144;
    int32 SkillId = 41;
    int32 SkillLevel = 248;
    int64 BulletId = 40;
    int32 DamageSourceType = 244;
    bool IsCritical = 240;
    Debug.DamageRecordEntity Attacker = 102;
    Debug.DamageRecordEntity JAs1 = 250;
  }

  message _El {
    int64 EntityId = 1;
    int32 ConfigId = 2;
    repeated int64 BuffIds = 3;
    repeated GameplayAttributeData Attr = 4;
  }

  // MessageId: 26421 (Notify)
  message MCl {
    int64 TimestampMs = 51;
    repeated Debug._El Entities = 6;
  }

  // MessageId: 28864 (Request)
  message EnableDamageRecordRequest {
    bool Enable = 204;
    int32 Kga = 6;
  }

  // MessageId: 26289 (Response)
  message EnableDamageRecordResponse {
    ErrorCode ErrorCode = 137;
  }

  // MessageId: 18987 (Notify)
  message GmVoxelInfoNotify {
    float CellSize = 138;
    repeated Debug.VoxelSpan Spans = 196;
  }

  // MessageId: 23748 (Notify)
  message GmIsOverlapNotify {
    float CellSize = 79;
    Debug.VoxelSpan Box = 41;
    bool IsOverlap = 156;
  }

  message VoxelSpan {
    float X = 1;
    float Y = 2;
    float Smin = 3;
    float Smax = 4;
  }

  // MessageId: 26177 (Request)
  message OutputDebugInfoRequest {
    string ClientInfo = 37;
  }

  // MessageId: 28999 (Response)
  message OutputDebugInfoResponse {
  }

  // MessageId: 26409 (Notify)
  message RequestOutputDebugNotify {
  }

  // MessageId: 28875 (Notify)
  message UploadEventNotify {
  }
}

// MessageId: 24770 (Push)
message TimeStopPush {
  float TimeDilation = 76;
}

// MessageId: 26869 (Request)
message TsAnimNotifyStateAbsoluteTimeStopRequest {
  bool Flag = 131;
  int32 Duration = 117;
}

// MessageId: 22005 (Response)
message TsAnimNotifyStateAbsoluteTimeStopResponse {
  ErrorCode ErrorCode = 132;
}

// MessageId: 27789 (Request)
message RTimeStopRequest {
  bool Flag = 254;
  bool sPs = 97;
  int32 Duration = 82;
}

// MessageId: 16896 (Response)
message RTimeStopResponse {
  ErrorCode ErrorCode = 83;
}

// MessageId: 28657 (Push)
message EntityTimeDilationPush {
  int64 EntityId = 169;
  float TimeDilation = 114;
}

// MessageId: 27316 (Request)
message R4n {
  bool Flag = 223;
  int32 Duration = 178;
}

// MessageId: 29978 (Response)
message kCs1 {
  ErrorCode ErrorCode = 91;
}

enum SwitchRoleType {
  SwitchRoleType_SingleWorld = 0;
  SwitchRoleType_MultiWorld = 1;
  SwitchRoleType_FbInstance = 2;
}

message FormationRoleInfo {
  int32 RoleId = 1;
  int32 MaxHp = 2;
  int32 CurHp = 3;
  int32 Level = 4;
}

message FightFormationNotifyInfo {
  int32 FormationId = 1;
  int32 CurRole = 2;
  repeated FormationRoleInfo RoleInfos = 3;
  bool IsCurrent = 4;
}

message FightFormation {
  int32 FormationId = 1;
  int32 CurRole = 2;
  repeated int32 RoleIds = 3;
  bool IsCurrent = 4;
}

// MessageId: 17838 (Request)
message SwitchRoleRequest {
  int32 RoleId = 126;
  int32 SwitchType = 84;
}

// MessageId: 16686 (Response)
message SwitchRoleResponse {
  ErrorCode ErrorCode = 212;
  int32 RoleId = 80;
}

// MessageId: 28456 (Notify)
message SwitchRoleNotify {
  int32 PlayerId = 95;
  int64 UpEntityId = 139;
  int64 DownEntityId = 192;
}

// MessageId: 19920 (Notify)
message DieSwitchRoleNotify {
  int32 CurRoleId = 126;
}

// MessageId: 20546 (Request)
message UpdateFormationRequest {
  repeated FightFormation Formations = 178;
}

// MessageId: 23677 (Response)
message UpdateFormationResponse {
  ErrorCode ErrorCode = 90;
  FightFormation Formation = 228;
}

message PlayerFightFormations {
  int32 PlayerId = 1;
  repeated FightFormationNotifyInfo Formations = 2;
}

// MessageId: 17818 (Notify)
message UpdateFormationNotify {
  repeated PlayerFightFormations PlayersFormations = 75;
}

// MessageId: 15619 (Request)
message UpdateFightRoleRequest {
  int32 CurRoleId = 54;
  repeated int32 RoleIds = 82;
}

// MessageId: 19918 (Response)
message UpdateFightRoleResponse {
  ErrorCode ErrorCode = 164;
}

// MessageId: 29211 (Notify)
message FormationAutoAddRoleNotify {
  repeated int32 Roles = 223;
  int32 FormationId = 189;
}

// MessageId: 15166 (Request)
message GetFormationDataRequest {
}

// MessageId: 24680 (Response)
message GetFormationDataResponse {
  ErrorCode ErrorCode = 98;
  repeated FightFormation Formations = 36;
}

// MessageId: 27433 (Notify)
message FormationUpdateNotify {
  repeated int32 RemoveFormationIds = 1;
  repeated FightFormation Formation = 90;
  int32 FormationId = 12;
}

message H4s {
  oneof Hua {
    jua Fua = 4;
  }

  int32 roleId = 1;
  int32 kua = 2;
  jua Nua = 3;
  int32 RSl2 = 5;
  int32 PhantomLevel = 6;
}

message jua {
}

// MessageId: 18339 (Push)
message ScreenShotTakenPush {
}

enum ControlType {
  ControlType_Unknown = 0;
  ControlType_TemporaryTeleportCtrl = 1;
}

message ControlTemporaryTeleportParam {
  repeated int64 TemporaryTeleportIds = 1;
}

message ControlParam {
  oneof K4s {
    ControlTemporaryTeleportParam TemporaryTeleportParam = 2;
  }

  int32 ControlType = 1;
}

// MessageId: 22609 (Notify)
message ControlInfoNotify {
  repeated ControlParam ForbidList = 103;
}

// MessageId: 22968 (Notify)
message cZn2 {
  repeated ControlParam ForbidList = 224;
}

// MessageId: 25794 (Notify)
message dZn1 {
  repeated ControlParam ForbidList = 98;
}

message SingleItemInfo {
  int32 ItemId = 1;
  int32 ItemNum = 2;
}

message CookerInfo {
  int32 CookingLevel = 1;
  int32 TotalProficiencies = 2;
}

message CookingData {
  int32 Id = 1;
  int32 CookCount = 2;
  int32 LastRoleId = 3;
  int32 LimitTotalCount = 4;
  int32 LimitedCount = 5;
  int64 ExistStartTime = 6;
  int64 ExistEndTime = 7;
}

message CookingDataByServerConfig {
  int32 Id = 1;
  int64 ExistStartTime = 2;
  int64 ExistEndTime = 3;
}

message MachiningData {
  int32 Id = 1;
  bool LockState = 2;
  repeated int32 vPs = 3;
  repeated int32 pPs1 = 4;
}

// MessageId: 16843 (Request)
message SendFixToolRequest {
  int32 RepairId = 18;
  int64 EntityId = 49;
}

// MessageId: 27060 (Response)
message SendFixToolResponse {
  ErrorCode ErrorCode = 203;
  int64 EntityId = 72;
}

// MessageId: 29896 (Request)
message SendCookFormulaRequest {
  int32 CookFormulaId = 62;
}

// MessageId: 15706 (Response)
message SendCookFormulaResponse {
  ErrorCode ErrorCode = 35;
  int32 CookFormulaId = 206;
}

// MessageId: 17766 (Request)
message SendCookFoodRequest {
  int32 Id = 131;
  int32 RoleId = 22;
  int32 CookCount = 9;
  int64 InteractEntityId = 93;
}

// MessageId: 18367 (Response)
message SendCookFoodResponse {
  ErrorCode ErrorCode = 152;
  int32 Id = 157;
  repeated SingleItemInfo ItemInfos = 29;
  int32 ActiveSkillType = 226;
  repeated SingleItemInfo ExtraItemInfos = 95;
  int32 RoleId = 209;
}

// MessageId: 25508 (Request)
message FoodProcessRequest {
  int32 Id = 47;
  repeated SingleItemInfo PrimaryFood = 156;
  int32 CookCount = 189;
  int64 InteractEntityId = 177;
}

// MessageId: 28048 (Response)
message FoodProcessResponse {
  ErrorCode ErrorCode = 20;
  int32 Id = 83;
  repeated SingleItemInfo FinalFood = 166;
  bool LockState = 234;
  repeated int32 UnlockParam = 235;
}

// MessageId: 23344 (Request)
message SendCertificateLevelRewardRequest {
}

// MessageId: 28565 (Response)
message SendCertificateLevelRewardResponse {
  ErrorCode ErrorCode = 23;
}

// MessageId: 28292 (Notify)
message UpdateCookerInfoNotify {
  CookerInfo CookerInfo = 74;
}

// MessageId: 23927 (Notify)
message UpdateCookingAndMachiningDataNotify {
  repeated CookingData CookingData = 219;
  repeated MachiningData MachiningData = 182;
}

// MessageId: 27614 (Request)
message SendCookingDataRequest {
}

// MessageId: 24512 (Response)
message SendCookingDataResponse {
  ErrorCode ErrorCode = 202;
  CookerInfo CookerInfo = 153;
  repeated CookingData CookingData = 210;
  repeated MachiningData MachiningData = 12;
  repeated CookingDataByServerConfig CookingDataByServerConfig = 95;
  int64 LimitRefreshTime = 88;
}

// MessageId: 29182 (Request)
message SendInteractiveUpdateRequest {
  int32 InteractionId = 95;
}

// MessageId: 22021 (Response)
message SendInteractiveUpdateResponse {
  ErrorCode ErrorCode = 220;
  int32 InteractionId = 79;
}

message DropBagItemInfo {
  int32 ShowPlanId = 1;
  int32 ItemId = 2;
  int32 ItemCount = 3;
}

// MessageId: 21690 (Notify)
message DropInBagNotify {
  int32 DropId = 103;
  repeated DropBagItemInfo DropItemInfos = 109;
}

message uEl1 {
  string ClientTime = 1;
  int32 ASl2 = 2;
  int32 ItemType = 3;
  int32 ItemCount = 4;
  int32 DSl1 = 5;
  int32 wSl = 6;
  int32 USl2 = 7;
  int32 PSl1 = 8;
  int32 xSl1 = 9;
  int32 bSl2 = 10;
  int32 BSl1 = 11;
  int32 kSl = 12;
  int32 qSl = 13;
  int64 GSl1 = 14;
  int64 OSl2 = 15;
}

// MessageId: 20099 (Request)
message PickUpFightDropRequest {
  int64 EntityId = 34;
  uEl1 NSl = 149;
}

// MessageId: 20162 (Response)
message PickUpFightDropResponse {
  ErrorCode ErrorCode = 61;
}

enum ElevatorState {
  ElevatorState_End = 0;
  ElevatorState_h6n = 1;
  ElevatorState_Reverse = 2;
}

// MessageId: 20008 (Request)
message ElevatorStateChangeRequest {
  int64 EntityId = 173;
  ElevatorState State = 189;
  int32 TargetFloor = 232;
}

// MessageId: 27067 (Response)
message ElevatorStateChangeResponse {
  ErrorCode ErrorCode = 117;
}

// MessageId: 28517 (Notify)
message ElevatorMoveNotify {
  int64 EntityId = 201;
  int32 Location = 243;
}

message EnergyInfo {
  int32 EnergyCount = 1;
  int32 LastRenewEnergyTime = 2;
  int32 EnergyType = 3;
}

// MessageId: 23439 (Notify)
message EnergyUpdateNotify {
  repeated EnergyInfo UpdateInfo = 194;
}

// MessageId: 19226 (Request)
message EnergySyncRequest {
  repeated int32 EnergyTypes = 19;
}

// MessageId: 26219 (Response)
message EnergySyncResponse {
  ErrorCode ErrorCode = 14;
  repeated EnergyInfo SyncInfo = 23;
}

// MessageId: 19206 (Request)
message ExploreProgressRequest {
  repeated int32 AreaIds = 109;
}

message AreaExploreInfo {
  int32 AreaId = 1;
  repeated OneExploreItem ExploreProgress = 2;
  int32 ExplorePercent = 3;
}

message OneExploreItem {
  int32 ExploreProgressId = 1;
  int32 ExplorePercent = 2;
  int32 CurCount = 3;
  int32 TotalCount = 4;
}

// MessageId: 21352 (Response)
message ExploreProgressResponse {
  repeated AreaExploreInfo AreaProgress = 54;
}

// MessageId: 21067 (Request)
message ExploreScoreRewardRequest {
  int32 AreaId = 108;
  int32 ExploreProgress = 219;
}

// MessageId: 20156 (Response)
message ExploreScoreRewardResponse {
  ErrorCode ErrorCode = 73;
}

// MessageId: 19707 (Request)
message CountryExploreScoreInfoRequest {
  int32 CountryId = 167;
}

// MessageId: 23478 (Response)
message CountryExploreScoreInfoResponse {
  int32 ExploreScore = 168;
  repeated CountryExploreScoreReceived CountryExploreScoreReceived = 75;
}

message CountryExploreScoreReceived {
  int32 AreaId = 1;
  repeated int32 ExploreScore = 2;
}

message CountryExploreLevel {
  int32 CountryId = 1;
  int32 ExploreLevel = 2;
}

// MessageId: 21607 (Notify)
message ExploreLevelNotify {
  repeated CountryExploreLevel CountryExploreLevel = 229;
}

message DetectionEntityPosInfo {
  Vector Pos = 1;
  int32 ConfigId = 2;
}

// MessageId: 15092 (Notify)
message ExploreToolUpdateNotify {
  int32 SkillId = 186;
}

// MessageId: 17570 (Notify)
message ExploreToolAllNotify {
  repeated int32 SkillList = 126;
  int32 ExploreSkill = 95;
  repeated int32 NewUnlock = 116;
}

enum o6s1 {
  o6s_Explore = 0;
  o6s_n6s = 1;
}

// MessageId: 26301 (Notify)
message ExploreSkillRouletteUpdateNotify {
  repeated ExploreSkillRoulette RouletteInfo = 184;
}

// MessageId: 24087 (Request)
message VisionExploreSkillSetRequest {
  int32 SkillId = 119;
  bool T0a = 24;
}

// MessageId: 16376 (Response)
message VisionExploreSkillSetResponse {
  ErrorCode ErrorCode = 66;
  int32 SkillId = 40;
}

// MessageId: 15561 (Notify)
message VisionExploreSkillNotify {
  int32 ExploreSkill = 26;
}

message ExploreSkillRoulette {
  repeated int32 SkillIds = 1;
  int32 ExtraItemId = 2;
}

// MessageId: 19221 (Request)
message ExploreSkillRouletteSetRequest {
  repeated ExploreSkillRoulette SkillRoulettes = 8;
}

// MessageId: 27115 (Response)
message ExploreSkillRouletteSetResponse {
  ErrorCode ErrorCode = 207;
  repeated ExploreSkillRoulette SkillRoulettes = 78;
}

// MessageId: 22210 (Request)
message ExploreSkillPullGiantRequest {
  int64 EntityId = 78;
}

// MessageId: 23857 (Response)
message ExploreSkillPullGiantResponse {
  int64 EntityId = 235;
  ErrorCode ErrorCode = 68;
}

// MessageId: 19572 (Request)
message UseDetectionSkillRequest {
  int32 SkillId = 119;
  Vector Pos = 57;
  Rotator Rot = 157;
  bool ConfirmUseDetectionSkill = 107;
}

// MessageId: 25056 (Response)
message UseDetectionSkillResponse {
  ErrorCode ErrorCode = 43;
  repeated DetectionEntityPosInfo DetectionEntityPosInfo = 152;
  int64 DetectionSlotId = 156;
}

// MessageId: 15959 (Notify)
message ExploreToolAuthorizationNotify {
  repeated int32 AuthorizationItems = 21;
}

message MapBoxSlotInfo {
  int64 DetectionSlotId = 1;
  int32 MarkId = 2;
}

// MessageId: 19689 (Notify)
message UpdateBoxSlotInfoNotify {
  repeated MapBoxSlotInfo BoxSlotInfo = 251;
}

// MessageId: 23653 (Request)
message UpdateBoxSlotInfoRequest {
}

// MessageId: 24539 (Response)
message UpdateBoxSlotInfoResponse {
  ErrorCode ErrorCode = 76;
  MapBoxSlotInfo BoxSlotInfo = 73;
}

// MessageId: 21617 (Request)
message RemoveTreasureBoxSlotRequest {
  int64 DetectionSlotId = 74;
}

// MessageId: 29928 (Response)
message RemoveTreasureBoxSlotResponse {
  ErrorCode ErrorCode = 110;
}

// MessageId: 28192 (Request)
message apl1 {
}

// MessageId: 27134 (Response)
message lpl1 {
  ErrorCode ErrorCode = 36;
  DetectionEntityPosInfo DetectionEntityPosInfo = 197;
}

// MessageId: 20961 (Request)
message SetFanNumberOfTurnsRequest {
  int64 EntityId = 188;
  int32 NumberOfTurns = 177;
}

// MessageId: 27762 (Response)
message SetFanNumberOfTurnsResponse {
  ErrorCode ErrorCode = 168;
}

// MessageId: 15678 (Request)
message SendBaoziStateRequest {
  int64 FanEntityId = 140;
  int64 BaoziEntityId = 208;
  int32 IsActive = 163;
}

// MessageId: 16840 (Response)
message SendBaoziStateResponse {
  ErrorCode ErrorCode = 217;
}

// MessageId: 16873 (Request)
message SetFanStateRequest {
  int64 FanEntityId = 98;
  int32 IsActive = 144;
}

// MessageId: 22293 (Response)
message SetFanStateResponse {
  ErrorCode ErrorCode = 174;
}

message FavorQuest {
  int32 Chapter = 1;
  int32 Status = 2;
}

enum FavorQuestStatus {
  FavorQuestStatus_cBs = 0;
  FavorQuestStatus_CanAccept = 1;
  FavorQuestStatus_Accepted = 2;
  FavorQuestStatus_Completed = 3;
}

enum FavorItemStatus {
  FavorItemStatus_ItemLocked = 0;
  FavorItemStatus_ItemCanUnLock = 1;
  FavorItemStatus_ItemUnLocked = 2;
}

enum FavorItemType {
  FavorItemType_o8n = 0;
  FavorItemType_Story = 1;
  FavorItemType_Goods = 2;
}

message FavorItem {
  int32 Id = 1;
  int32 Status = 2;
}

message RoleFavor {
  int32 RoleId = 1;
  int32 Level = 2;
  int32 Exp = 3;
  repeated FavorItem WordIds = 4;
  repeated FavorItem StoryIds = 5;
  repeated FavorItem GoodsIds = 6;
  FavorQuest FavorQuest = 7;
}

// MessageId: 19099 (Request)
message RoleFavorListRequest {
}

// MessageId: 20010 (Response)
message RoleFavorListResponse {
  ErrorCode ErrorCode = 132;
  repeated RoleFavor FavorList = 190;
}

// MessageId: 19208 (Notify)
message RoleFavorListNotify {
  repeated RoleFavor FavorList = 135;
  map<int32, ConditionInfo> RoleConditionInfoMap = 117;
}

// MessageId: 24188 (Notify)
message RoleFavorActiveNotify {
  RoleFavor RoleFavorInfo = 28;
}

// MessageId: 23784 (Notify)
message RoleFavorLevelUpdateNotify {
  int32 RoleId = 184;
  int32 Level = 218;
  int32 Exp = 116;
}

// MessageId: 19380 (Notify)
message RoleFavorNewCanUnLockNotify {
  int32 ItemType = 146;
  int32 RoleId = 30;
  int32 CanUnLockId = 39;
}

// MessageId: 25185 (Notify)
message RoleFavorExpTipsNotify {
  repeated ExpTips ExpTips = 243;
  int32 ItemId = 37;
  int32 count = 55;
}

message ExpTips {
  int32 RoleId = 1;
  int32 Exp = 2;
}

message ItemFinishList {
  repeated int32 ConditionIdList = 1;
}

message ConditionItem {
  map<int32, ItemFinishList> ItemFinishMap = 1;
}

message ConditionInfo {
  map<int32, ConditionItem> FinishConditionMap = 2;
}

// MessageId: 21884 (Notify)
message RoleFavorFinishConditionNotify {
  map<int32, ConditionInfo> RoleConditionInfoMap = 121;
}

// MessageId: 21331 (Request)
message RoleFavorUnLockRequest {
  int32 ItemType = 45;
  int32 RoleId = 197;
  int32 UnlockId = 77;
}

// MessageId: 27222 (Response)
message RoleFavorUnLockResponse {
  ErrorCode ErrorCode = 24;
  int32 ItemType = 239;
  int32 RoleId = 220;
  int32 UnlockId = 169;
}

// MessageId: 28018 (Notify)
message RoleFavorNewQuestUpdateNotify {
  int32 RoleId = 208;
  FavorQuest FavorQuest = 136;
}

enum C6s {
  C6s_Talk = 0;
  C6s_lxs = 1;
}

// MessageId: 26498 (Request)
message RoleFavorAcceptQuestRequest {
  int32 RoleId = 220;
  int32 QuestType = 251;
  int32 Chapter = 158;
}

// MessageId: 16576 (Response)
message RoleFavorAcceptQuestResponse {
  ErrorCode ErrorCode = 211;
  int32 RoleId = 12;
  int32 QuestType = 93;
}

// MessageId: 19325 (Request)
message RoleFavorTalkScoreRequest {
  int32 Score = 105;
  int32 ErrorCount = 33;
}

// MessageId: 17676 (Response)
message RoleFavorTalkScoreResponse {
  ErrorCode ErrorCode = 85;
  bool IsComplete = 95;
}

// MessageId: 19010 (Request)
message RoleMotionUnLockRequest {
  int32 RoleId = 68;
  int32 UnlockId = 62;
}

// MessageId: 26304 (Response)
message RoleMotionUnLockResponse {
  ErrorCode ErrorCode = 191;
  int32 RoleId = 65;
  int32 UnlockId = 245;
}

// MessageId: 23626 (Notify)
message RoleMotionNewCanUnLockNotify {
  int32 RoleId = 44;
  int32 CanUnLockId = 219;
}

message RoleMotion {
  int32 RoleId = 1;
  repeated FavorItem MotionIds = 2;
}

// MessageId: 22710 (Notify)
message RoleMotionActiveNotify {
  RoleMotion RoleMotionInfo = 138;
}

// MessageId: 20369 (Notify)
message RoleMotionListNotify {
  repeated RoleMotion MotionList = 252;
  map<int32, ConditionInfo> RoleConditionInfoMap = 190;
}

// MessageId: 25208 (Notify)
message RoleMotionFinishConditionNotify {
  map<int32, ConditionInfo> RoleConditionInfoMap = 202;
}

// MessageId: 22197 (Notify)
message wYs2 {
  int64 EntityId = 151;
}

// MessageId: 28634 (Notify)
message FlowStartNotify {
  int64 FlowIncId = 89;
  string FlowListName = 214;
  int32 FlowId = 112;
  int32 StateId = 181;
  GameCtxPb GameCtx = 209;
  string PlotMode = 2;
  bool Async = 6;
  bool IsSkip = 30;
  bool BYs2 = 176;
  Vector PlotCoordinates = 142;
}

// MessageId: 29047 (Request)
message FlowEndRequest {
  int64 FlowIncId = 136;
  bool IsSkip = 169;
  map<int32, FlowOptionInfoList> OptionInfos = 62;
}

message FlowOptionInfoList {
  repeated FlowOptionInfo OptionIndexList = 1;
}

message FlowOptionInfo {
  int32 TalkId = 1;
  int32 OptionIndex = 2;
}

// MessageId: 20893 (Response)
message FlowEndResponse {
  ErrorCode ErrorCode = 16;
}

// MessageId: 20525 (Notify)
message FlowEndNotify {
  int64 FlowIncId = 197;
  bool Async = 72;
  bool IsFinished = 41;
}

// MessageId: 19617 (Request)
message FlowRestartRequest {
  int64 FlowIncId = 32;
}

// MessageId: 25907 (Response)
message FlowRestartResponse {
  ErrorCode ErrorCode = 143;
}

// MessageId: 21770 (Request)
message FlowActionRequest {
  int64 FlowIncId = 138;
  int32 ActionId = 123;
}

// MessageId: 27975 (Response)
message FlowActionResponse {
  ErrorCode ErrorCode = 200;
}

// MessageId: 17194 (Notify)
message FlowShowEntityNotify {
  bool IsHide = 248;
  repeated int32 EntityIds = 189;
}

// MessageId: 26156 (Notify)
message ShowPasserByNpcNotify {
  bool IsHide = 78;
  repeated int64 EntityIds = 121;
}

// MessageId: 29688 (Notify)
message FlowServerSkipNotify {
  string FlowListName = 252;
  int32 FlowId = 121;
  int32 StateId = 98;
  bool FadeOutScreen = 251;
}

// MessageId: 17379 (Request)
message SafeTeleportRequest {
  int64 FlowIncId = 128;
}

// MessageId: 15944 (Response)
message SafeTeleportResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 24343 (Request)
message ForgeInfoRequest {
}

// MessageId: 25337 (Response)
message ForgeInfoResponse {
  ErrorCode ErrorCode = 233;
  repeated OneForgeInfo ForgeInfoList = 240;
  repeated OneForgeConfig ForgeConfigs = 94;
  int64 LimitRefreshTime = 104;
}

message OneForgeInfo {
  int32 Id = 1;
  int32 LastRoleId = 3;
  int32 LimitCount = 4;
  int32 LimitForgeCount = 5;
  int64 LimitBeginTime = 6;
  int64 LimitEndTime = 7;
}

message OneForgeConfig {
  int32 Id = 1;
  int64 LimitBeginTime = 2;
  int64 LimitEndTime = 3;
}

// MessageId: 22834 (Request)
message ForgeItemRequest {
  int32 Id = 192;
  int32 RoleId = 136;
  int32 Count = 83;
  int64 InteractEntityId = 127;
}

// MessageId: 25362 (Response)
message ForgeItemResponse {
  ErrorCode ErrorCode = 133;
  int32 Id = 172;
  repeated SingleItemInfo ItemInfos = 242;
  int32 ActiveSkillType = 211;
  repeated SingleItemInfo ExtraItemInfos = 243;
  int32 RoleId = 232;
}

// MessageId: 26776 (Notify)
message ForgeItemInfoUpdateNotify {
  repeated OneForgeInfo ForgeInfoList = 251;
}

// MessageId: 16075 (Request)
message ForgeFormulaUnlockRequest {
  int32 Id = 153;
}

// MessageId: 18371 (Response)
message ForgeFormulaUnlockResponse {
  ErrorCode ErrorCode = 1;
  int32 Id = 66;
}

message Formation {
  int32 Id = 1;
  int32 RoleIndex = 2;
  repeated int32 Role = 3;
  bool IsCurrent = 4;
}

// MessageId: 18973 (Request)
message FormationRequest {
}

// MessageId: 22317 (Response)
message FormationResponse {
  repeated Formation Formation = 65;
  ErrorCode ErrorCode = 18;
}

// MessageId: 17801 (Request)
message FormationSwitchCurrentRequest {
  int32 Id = 45;
}

// MessageId: 18192 (Response)
message FormationSwitchCurrentResponse {
  int32 CurrentId = 57;
  ErrorCode ErrorCode = 114;
}

// MessageId: 23106 (Request)
message FormationJoinRequest {
  int64 CurrentRole = 130;
  repeated int64 EntityIds = 108;
}

// MessageId: 18003 (Response)
message FormationJoinResponse {
  ErrorCode ErrorCode = 252;
}

// MessageId: 16989 (Request)
message FormationModifyRequest {
  int32 Id = 131;
  repeated int32 RoleId = 211;
}

// MessageId: 29833 (Response)
message FormationModifyResponse {
  Formation Formation = 187;
  ErrorCode ErrorCode = 120;
}

message FormationChangeInfo {
  int32 Id = 1;
  repeated int32 RoleId = 2;
}

// MessageId: 16055 (Request)
message FormationChangeRequest {
  repeated FormationChangeInfo ChangeList = 81;
  int32 FormationId = 187;
}

// MessageId: 25609 (Response)
message FormationChangeResponse {
  repeated FormationChangeInfo ChangeList = 34;
  int32 FormationId = 17;
  ErrorCode ErrorCode = 198;
}

// MessageId: 18346 (Request)
message FormationSwitchRoleRequest {
  int32 RoleIndex = 237;
}

// MessageId: 16693 (Response)
message FormationSwitchRoleResponse {
  int32 RoleIndex = 11;
  ErrorCode ErrorCode = 44;
}

// MessageId: 19286 (Notify)
message PbFormationAutoAddRoleNotify {
  repeated int32 Roles = 12;
  int32 FormationId = 4;
}

// MessageId: 25632 (Notify)
message PhantomFormationChangeNotify {
  int32 CurrRole = 145;
  repeated int32 RoleIds = 160;
  int32 FormationId = 134;
  bool IsExit = 122;
}

// MessageId: 27261 (Request)
message ClientCurrentRoleReportRequest {
  int32 PlayerId = 69;
  int32 CurrentRoleId = 236;
  int64 CurrentEntityId = 43;
}

// MessageId: 28123 (Response)
message ClientCurrentRoleReportResponse {
  int32 PlayerId = 116;
  int64 CurrentEntityId = 198;
}

message FriendInfo {
  PlayerDetails Info = 1;
  string Remark = 2;
}

message FriendApply {
  PlayerDetails Info = 1;
  int64 CreatedTime = 2;
}

// MessageId: 29905 (Request)
message FriendAllRequest {
}

// MessageId: 17178 (Response)
message FriendAllResponse {
  repeated FriendInfo FriendInfoList = 131;
  repeated FriendApply FriendApplyList = 81;
  ErrorCode ErrorCode = 241;
}

// MessageId: 19759 (Notify)
message FriendAddedNotify {
  FriendInfo Info = 178;
}

// MessageId: 22036 (Notify)
message FriendDeletedNotify {
  int32 Id = 136;
}

// MessageId: 23142 (Notify)
message FriendApplyReceivedNotify {
  FriendApply FriendApply = 179;
}

// MessageId: 17158 (Notify)
message FriendApplyDeletedNotify {
  int32 Id = 183;
}

enum FriendApplyWay {
  FriendApplyWay_Search = 0;
  FriendApplyWay_RecentlyTeam = 1;
}

// MessageId: 29305 (Request)
message FriendApplySendRequest {
  int32 Id = 131;
  int32 Way = 238;
}

// MessageId: 19445 (Response)
message FriendApplySendResponse {
  ErrorCode ErrorCode = 60;
}

enum FriendApplyOperator {
  FriendApplyOperator_Approve = 0;
  FriendApplyOperator_Reject = 1;
}

// MessageId: 15030 (Request)
message FriendApplyHandleRequest {
  repeated int32 Ids = 196;
  int32 Operator = 110;
}

// MessageId: 22430 (Response)
message FriendApplyHandleResponse {
  map<int32, int32> HandledMap = 159;
  ErrorCode ErrorCode = 50;
}

// MessageId: 23799 (Request)
message FriendRemarkRequest {
  int32 Id = 88;
  string Remark = 154;
}

// MessageId: 27073 (Response)
message FriendRemarkResponse {
  ErrorCode ErrorCode = 132;
}

// MessageId: 16340 (Request)
message FriendDeleteRequest {
  int32 Id = 66;
}

// MessageId: 23562 (Response)
message FriendDeleteResponse {
  ErrorCode ErrorCode = 67;
}

message RecentlyTeamInfo {
  PlayerDetails Info = 1;
  int64 TeamTime = 2;
}

// MessageId: 28967 (Request)
message FriendRecentlyTeamRequest {
}

// MessageId: 20799 (Response)
message FriendRecentlyTeamResponse {
  repeated RecentlyTeamInfo Infos = 92;
  ErrorCode ErrorCode = 171;
}

// MessageId: 20960 (Notify)
message FriendRecentlyTeamUpdateNotify {
  repeated RecentlyTeamInfo AddInfos = 150;
  map<int32, int64> TimeUpdate = 24;
  repeated int32 RemoveIds = 43;
}

message Function {
  int32 Id = 1;
  int32 Flag = 5;
}

// MessageId: 18860 (Notify)
message FuncOpenNotify {
  repeated Function Func = 138;
}

// MessageId: 17196 (Notify)
message FuncOpenConfirmNotify {
  bytes FuncInfo = 76;
}

// MessageId: 18010 (Notify)
message FuncOpenUpdateNotify {
  repeated Function Func = 74;
}

// MessageId: 18224 (Request)
message FuncShowRequest {
  repeated int32 FuncId = 76;
}

// MessageId: 16900 (Response)
message FuncShowResponse {
  ErrorCode ErrorCode = 180;
}

message GachaConsume {
  int32 Times = 1;
  int32 Consume = 2;
}

message GachaPoolInfo {
  int32 Id = 1;
  int64 BeginTime = 2;
  int64 EndTime = 3;
  string Title = 4;
  string Description = 5;
  int32 UiType = 6;
  string ThemeColor = 7;
  repeated int32 ShowIdList = 8;
  repeated int32 UpList = 9;
  repeated int32 PreviewIdList = 10;
}

message GachaInfo {
  int32 Id = 1;
  int32 TodayTimes = 2;
  int32 TotalTimes = 3;
  int32 ItemId = 4;
  repeated GachaConsume GachaConsumes = 5;
  int32 UsePoolId = 6;
  repeated GachaPoolInfo Pools = 7;
  int64 BeginTime = 8;
  int64 EndTime = 9;
  int32 DailyLimitTimes = 10;
  int32 TotalLimitTimes = 11;
  string ResourcesId = 12;
}

message GachaReward {
  int32 ItemId = 1;
  int32 ItemCount = 2;
}

message GachaResult {
  oneof Bottom {
    GachaReward BottomExtraReward = 3;
  }

  GachaReward GachaReward = 1;
  repeated GachaReward ExtraRewards = 2;
  repeated GachaReward TransformRewards = 4;
}

message q6s2 {
  GachaReward GachaReward = 1;
  int64 s9n = 2;
}

// MessageId: 20420 (Request)
message GachaInfoRequest {
  int32 Language = 16;
}

// MessageId: 25514 (Response)
message GachaInfoResponse {
  ErrorCode ErrorCode = 3;
  repeated GachaInfo GachaInfos = 157;
  int32 DailyTotalLeftTimes = 91;
  string RecordId = 144;
}

// MessageId: 18139 (Request)
message GachaRequest {
  int32 GachaId = 250;
  int32 GachaTimes = 22;
}

// MessageId: 19109 (Response)
message GachaResponse {
  ErrorCode ErrorCode = 93;
  repeated GachaResult GachaResults = 99;
}

// MessageId: 18518 (Notify)
message GachaResultNotify {
  repeated GachaResult GachaResults = 238;
}

// MessageId: 27610 (Request)
message GachaUsePoolRequest {
  int32 GachaId = 156;
  int32 PoolId = 176;
}

// MessageId: 19425 (Response)
message GachaUsePoolResponse {
  ErrorCode ErrorCode = 114;
}

message GachaItem {
  int32 ItemId = 1;
  bool XSl2 = 2;
}

message GachaPoolDetail {
  string Text = 1;
  repeated GachaItem FiveStarRoles = 2;
  repeated GachaItem FiveStarWeapons = 3;
  repeated GachaItem FourStarRoles = 4;
  repeated GachaItem FourStarWeapons = 5;
  repeated GachaItem ThreeStarRoles = 6;
}

// MessageId: 26543 (Request)
message GachaPoolDetailRequest {
  int32 PoolId = 190;
}

// MessageId: 23728 (Response)
message GachaPoolDetailResponse {
  ErrorCode ErrorCode = 33;
  GachaPoolDetail GachaPoolDetail = 200;
}

// MessageId: 17389 (Notify)
message GachaNewNotify {
}

message G6s {
  int32 ItemId = 1;
  int32 ItemNum = 2;
}

message O6s2 {
  int32 TaskId = 1;
  repeated G6s iws = 2;
}

enum GatherTaskState {
  GatherTaskState_j6n = 0;
  GatherTaskState_Running = 1;
  GatherTaskState_InComplete = 2;
  GatherTaskState_Done = 3;
  GatherTaskState_TakeReward = 4;
}

message rws {
  int32 TaskId = 1;
  int32 State = 2;
}

// MessageId: 27733 (Notify)
message ios1 {
  repeated rws rws = 219;
}

// MessageId: 15932 (Notify)
message ros3 {
  repeated int32 ows1 = 56;
}

// MessageId: 28305 (Notify)
message oos1 {
  repeated O6s2 nws = 182;
}

// MessageId: 16968 (Request)
message CollectionQuestRewardRequest {
  int32 RewardId = 173;
}

// MessageId: 23941 (Response)
message CollectionQuestRewardResponse {
  ErrorCode ErrorCode = 46;
}

// MessageId: 21524 (Request)
message GuideInfoRequest {
}

// MessageId: 28312 (Response)
message GuideInfoResponse {
  repeated int32 GuideGroupFinishList = 230;
}

// MessageId: 16707 (Request)
message GuideTriggerRequest {
  int32 GroupId = 145;
}

// MessageId: 15971 (Response)
message GuideTriggerResponse {
  ErrorCode ErrorCode = 99;
  repeated string ErrorParams = 183;
}

// MessageId: 24432 (Request)
message GuideFinishRequest {
  int32 GroupId = 228;
}

// MessageId: 24237 (Response)
message GuideFinishResponse {
  ErrorCode ErrorCode = 56;
  repeated string ErrorParams = 142;
}

// MessageId: 24633 (Notify)
message GuideCondDoneNotify {
  int32 GroupId = 143;
}

// MessageId: 1650 (Request)
message HeartbeatRequest {
}

// MessageId: 1651 (Response)
message HeartbeatResponse {
}

// MessageId: 19027 (Request)
message GatewayEchoRequest {
  string Content = 134;
}

// MessageId: 19839 (Response)
message GatewayEchoResponse {
  string Content = 209;
}

enum IllustratedType {
  IllustratedType_Monster = 0;
  IllustratedType_VocalCorpse = 1;
  IllustratedType_ViewPoint = 2;
  IllustratedType_Weapon = 3;
  IllustratedType_Animal = 4;
  IllustratedType_aOs = 5;
  IllustratedType_Chip = 6;
  IllustratedType_Photograph = 7;
  IllustratedType_Noun = 8;
}

enum hws {
  hws_None = 0;
  hws_PhotographSub = 7;
  hws_RUs = 8;
  hws_aTs = 9;
}

message IllustratedEntry {
  oneof V6s {
    int32 hws = 5;
  }

  int32 Id = 1;
  uint32 CreateTime = 2;
  int32 Num = 3;
  bool IsRead = 4;
}

message IllustratedClass {
  int32 Type = 1;
  repeated IllustratedEntry IllustratedEntryList = 2;
}

// MessageId: 25384 (Request)
message IllustratedRedDotRequest {
}

// MessageId: 26951 (Response)
message IllustratedRedDotResponse {
  repeated int32 _ws = 230;
}

// MessageId: 19147 (Request)
message IllustratedInfoRequest {
  repeated int32 E9n = 177;
}

// MessageId: 18381 (Response)
message IllustratedInfoResponse {
  ErrorCode ErrorCode = 210;
  repeated string ErrorParams = 118;
  repeated IllustratedClass IllustratedClassList = 70;
}

// MessageId: 15347 (Request)
message IllustratedUnlockRequest {
  int32 Type = 3;
  int32 Id = 48;
}

// MessageId: 16619 (Response)
message IllustratedUnlockResponse {
  ErrorCode ErrorCode = 181;
  repeated string ErrorParams = 227;
  IllustratedEntry cws1 = 231;
}

// MessageId: 22133 (Notify)
message UpdateHandBookActiveStateMapNotify {
  int32 Type = 185;
  IllustratedEntry cws1 = 42;
  bool IsNew = 112;
}

// MessageId: 22691 (Request)
message SendIllustratedReadRequest {
  int32 Type = 9;
  int32 Id = 92;
}

// MessageId: 29332 (Response)
message SendIllustratedReadResponse {
  ErrorCode ErrorCode = 105;
  repeated string ErrorParams = 205;
}

// MessageId: 25473 (Request)
message InfluenceInfoRequest {
}

// MessageId: 19873 (Response)
message InfluenceInfoResponse {
  repeated InfluenceInfo mws = 22;
}

message InfluenceInfo {
  int32 InfluenceId = 1;
  int32 RewardIndex = 2;
  int32 Relation = 3;
}

// MessageId: 25178 (Notify)
message InfluenceInfoNotify {
  repeated InfluenceInfo mws = 88;
}

// MessageId: 23621 (Request)
message InfluenceRewardRequest {
  int32 InfluenceId = 101;
}

// MessageId: 22075 (Response)
message InfluenceRewardResponse {
  ErrorCode ErrorCode = 41;
  int32 InfluenceId = 116;
  int32 RewardIndex = 29;
  map<int32, int32> RewardItems = 229;
}

// MessageId: 22817 (Request)
message ReadDisplayInfoRequest {
  int32 InformationId = 107;
}

// MessageId: 18356 (Response)
message ReadDisplayInfoResponse {
  ErrorCode ErrorCode = 90;
}

// MessageId: 18894 (Notify)
message InstDataNotify {
  repeated InstEnterInfoPb EnterInfos = 253;
}

message InstEnterInfoPb {
  int32 Id = 1;
  int32 ChallengedTimes = 2;
}

// MessageId: 26130 (Notify)
message EnterInstanceNotify {
  repeated InstEnterInfoPb EnterInfos = 174;
}

message EnterRoleTrialDungeonDirectlyInfo {
  int32 ActivityId = 1;
  int32 RoleId = 2;
}

message TeachClickInfo {
  int32 RoleId = 1;
}

message DungeonDetectionInfo {
  int32 DungeonId = 1;
}

message DreamLinkWhiteCatInfo {
  int32 ActivityId = 1;
  bool IsFirst = 2;
  int32 TypeId = 3;
}

message BossRushInfo {
  int32 Id = 1;
  int32 ActivityId = 2;
  repeated Dks SelectBuffs = 3;
  repeated int32 SelectScoreBuffs = 7;
}

message EnterInfo {
  oneof Info {
    EnterRoleTrialDungeonDirectlyInfo EnterRoleTrialDungeonDirectlyInfo = 1;
    TeachClickInfo TeachClickInfo = 2;
    DungeonDetectionInfo DungeonDetectionInfo = 3;
    DreamLinkWhiteCatInfo DreamLinkWhiteCatInfo = 4;
    BossRushInfo BossRushInfo = 5;
  }
}

// MessageId: 28851 (Request)
message PrewarTeamFightRequest {
  int32 InstanceId = 77;
  repeated int32 RoleIds = 242;
  int32 EntranceId = 222;
  int32 PosEntityId = 245;
  TransitionOptionPb TransitionOption = 38;
  repeated int32 ProtocolPhantomIdList = 211;
  EnterInfo EnterInfo = 56;
}

// MessageId: 24628 (Response)
message PrewarTeamFightResponse {
  ErrorCode ErrorCode = 150;
}

// MessageId: 22966 (Request)
message Nos1 {
  int32 EntranceId = 165;
}

// MessageId: 16299 (Response)
message Fos {
  ErrorCode ErrorCode = 166;
}

// MessageId: 20768 (Request)
message InstEntranceDetailRequest {
  int32 EntranceId = 143;
}

// MessageId: 22318 (Response)
message InstEntranceDetailResponse {
  ErrorCode ErrorCode = 116;
  int32 EntranceId = 148;
  int64 LimitEndTime = 228;
  repeated InstDetailEntry InstDetailEntryList = 32;
}

message InstDetailEntry {
  int32 InstId = 1;
  int64 ResetTime = 2;
  int32 count = 3;
}

enum zma {
  zma_Default = 0;
  zma_Esc = 1;
}

// MessageId: 21904 (Request)
message LeaveInstanceDungeonRequest {
  int32 PosEntityId = 21;
  int32 Way = 113;
}

// MessageId: 22616 (Response)
message LeaveInstanceDungeonResponse {
  ErrorCode ErrorCode = 239;
}

// MessageId: 24140 (Notify)
message Wos {
  int32 Id = 52;
}

// MessageId: 17362 (Request)
message GetInstExchangeRewardRequest {
  int32 Eal = 46;
}

// MessageId: 18897 (Response)
message GetInstExchangeRewardResponse {
  ErrorCode ErrorCode = 106;
}

// MessageId: 23751 (Notify)
message InstSettleNotify {
  bool IsSuccess = 6;
  bool RewardFailTips = 71;
  int32 Magnification = 243;
  map<int32, pEl2> RewardItems = 83;
}

// MessageId: 20471 (Notify)
message InstResultNotify {
  int32 Id = 207;
  bool Succ = 34;
  int32 Reason = 192;
  bool IsRecReward = 243;
}

// MessageId: 25826 (Request)
message ExchangeRewardRequest {
}

// MessageId: 18312 (Response)
message ExchangeRewardResponse {
  map<int32, int32> ExchangeShareData = 60;
  map<int32, int32> ExchangeRewardData = 216;
}

// MessageId: 18307 (Notify)
message ExchangeRewardNotify {
  int32 ExchangeRewardData = 218;
  int32 Count = 246;
}

// MessageId: 16805 (Notify)
message ShareInfoNotify {
}

// MessageId: 25140 (Notify)
message InstTimeoutNotify {
  int64 Timestamp = 67;
}

// MessageId: 25132 (Request)
message SingleInstRechallengeRequest {
  repeated int32 RoleIds = 135;
  repeated int32 Tzs = 68;
}

// MessageId: 15780 (Response)
message SingleInstRechallengeResponse {
  ErrorCode ErrorCode = 108;
}

message RewardItemData {
  int32 Id = 1;
  int32 Count = 2;
  int32 IncrId = 3;
}

message ItemReward {
  RewardItemData iyl = 1;
  repeated RewardItemData RewardItems = 2;
}

message AddCountItemInfo {
  int32 Id = 1;
  int32 count = 2;
  int32 IncrId = 3;
}

// MessageId: 21183 (Request)
message ItemDestructRequest {
  repeated DestructItemInfo ItemList = 254;
}

message DestructItemInfo {
  int32 Count = 2;
  int32 ItemId = 3;
  int32 IncrId = 4;
}

// MessageId: 25045 (Response)
message ItemDestructResponse {
  ErrorCode ErrorCode = 91;
}

// MessageId: 17089 (Request)
message ItemDestructPreviewRequest {
  repeated DestructItemInfo ItemList = 202;
}

// MessageId: 23812 (Response)
message ItemDestructPreviewResponse {
  ErrorCode ErrorCode = 232;
  map<int32, int32> ItemMap = 199;
}

// MessageId: 24762 (Request)
message ItemLockRequest {
  int32 IncrId = 173;
  int32 ItemId = 80;
}

// MessageId: 26493 (Response)
message ItemLockResponse {
  ErrorCode ErrorCode = 179;
}

// MessageId: 29774 (Request)
message ItemUseRequest {
  int32 Count = 31;
  int32 ItemId = 204;
}

// MessageId: 21729 (Response)
message ItemUseResponse {
  ErrorCode ErrorCode = 107;
}

message RewardItemInfo {
  int32 ShowPlanId = 1;
  int32 ItemId = 2;
  int32 count = 3;
  int32 IncrId = 4;
}

// MessageId: 20586 (Notify)
message ItemRewardNotify {
  int32 DropId = 43;
  int32 Reason = 38;
  int32 Magnification = 69;
  map<int32, pEl2> RewardItems = 187;
}

message pEl2 {
  repeated RewardItemInfo ItemList = 1;
}

// MessageId: 23902 (Request)
message ItemGiftUseRequest {
  int32 Count = 243;
  repeated int32 N9n = 213;
  int32 ItemId = 154;
}

// MessageId: 27434 (Response)
message ItemGiftUseResponse {
  repeated AddCountItemInfo Infos = 227;
  ErrorCode ErrorCode = 59;
}

// MessageId: 16521 (Notify)
message ItemGiftUseNotify {
  repeated AddCountItemInfo Infos = 169;
  int32 Id = 209;
}

// MessageId: 26126 (Request)
message NormalItemRequest {
}

// MessageId: 20178 (Response)
message NormalItemResponse {
  repeated NormalItem NormalItemList = 106;
}

// MessageId: 22869 (Notify)
message NormalItemUpdateNotify {
  repeated NormalItem NormalItemList = 115;
  bool NoTips = 249;
}

// MessageId: 25792 (Notify)
message NormalItemRemoveNotify {
  repeated int32 NormalItemIdList = 224;
}

// MessageId: 15481 (Notify)
message NormalItemAddNotify {
  repeated NormalItem NormalItemList = 233;
  bool NoTips = 137;
  int32 Reason = 162;
}

// MessageId: 27387 (Request)
message WeaponItemRequest {
}

// MessageId: 24046 (Response)
message WeaponItemResponse {
  repeated WeaponItem WeaponItemList = 39;
}

// MessageId: 18977 (Notify)
message WeaponItemAddNotify {
  repeated WeaponItem WeaponItemList = 87;
  bool AddFromRole = 234;
  int32 Reason = 165;
}

// MessageId: 22264 (Notify)
message WeaponItemRemoveNotify {
  repeated int32 WeaponItemIncrIdList = 211;
}

// MessageId: 19025 (Request)
message PhantomItemRequest {
}

message RolePhantomEquipInfo {
  int32 RoleId = 1;
  repeated int32 eHn = 2;
}

message RolePhantomPropInfo {
  int32 roleId = 1;
  repeated ArrayIntInt BaseProp = 2;
  repeated ArrayIntInt AddProp = 3;
}

// MessageId: 19052 (Response)
message PhantomItemResponse {
  repeated PhantomItem PhantomItemList = 76;
  repeated RolePhantomEquipInfo Gws = 9;
  repeated RolePhantomPropInfo Ows2 = 213;
  int32 MaxCost = 200;
  repeated int32 PhantomSkinList = 207;
}

// MessageId: 23002 (Notify)
message PhantomItemAddNotify {
  repeated PhantomItem PhantomItemList = 201;
  int32 Reason = 181;
}

// MessageId: 29234 (Notify)
message PhantomItemRemoveNotify {
  repeated int32 Fws = 99;
}

// MessageId: 17516 (Notify)
message ItemFuncValueUpdateNotify {
  int32 IncrId = 64;
  int32 FuncValue = 216;
}

message WeaponItem {
  int32 Id = 1;
  int32 IncrId = 2;
  int32 FuncValue = 3;
  int32 WeaponLevel = 4;
  int32 WeaponExp = 5;
  int32 WeaponBreach = 6;
  int32 WeaponResonLevel = 7;
  int32 RoleId = 8;
}

message PhantomItem {
  int32 Id = 1;
  int32 IncrId = 2;
  int32 FuncValue = 3;
  int32 PhantomLevel = 4;
  int32 PhantomExp = 5;
  repeated PhantomPropInfo PhantomMainProp = 6;
  repeated PhantomPropInfo PhantomSubProp = 7;
  int32 FetterGroupId = 8;
  int32 SkinId = 9;
}

message r5s {
  int32 index = 1;
  repeated PhantomPropInfo Qws = 2;
}

message NormalItem {
  int32 Id = 1;
  int32 count = 2;
  int64 ExpireTime = 4;
}

message o5s2 {
  int32 Id = 1;
  int32 count = 2;
}

message PhantomPropInfo {
  int32 PhantomPropId = 1;
  int32 Value = 2;
}

// MessageId: 29401 (Notify)
message ItemObtainNotify {
  int32 Reason = 26;
  repeated AddCountItemInfo Items = 223;
  repeated ItemReward ryl = 73;
}

// MessageId: 21494 (Notify)
message ItemPkgOpenNotify {
  repeated int32 OpenPkg = 108;
}

// MessageId: 25964 (Request)
message InvalidItemRemoveRequest {
}

message InvalidItemData {
  int32 ItemId = 1;
  int32 Count = 2;
  int32 IncrId = 3;
}

// MessageId: 28470 (Response)
message InvalidItemRemoveResponse {
  bool IsRemove = 21;
}

// MessageId: 29397 (Request)
message InvalidItemCheckRequest {
}

// MessageId: 23171 (Response)
message InvalidItemCheckResponse {
  repeated InvalidItemData InvalidItemData = 197;
}

// MessageId: 29510 (Request)
message ValidTimeItemRequest {
}

message ValidTimeItem {
  int32 Id = 1;
  int32 count = 2;
  int32 IncrId = 3;
  int64 ExpireTime = 4;
}

// MessageId: 20660 (Response)
message ValidTimeItemResponse {
  repeated ValidTimeItem ItemList = 33;
}

// MessageId: 24440 (Notify)
message ValidTimeItemUpdateNotify {
  repeated ValidTimeItem ItemList = 2;
}

message RemoveValidTimeItem {
  int32 ItemId = 1;
  int32 IncrId = 2;
}

// MessageId: 21356 (Notify)
message ValidTimeItemRemoveNotify {
  repeated RemoveValidTimeItem ItemList = 221;
}

// MessageId: 15145 (Notify)
message ValidTimeItemAddNotify {
  repeated ValidTimeItem ItemList = 247;
  int32 Reason = 188;
}

message RobotRoleInfo {
  int32 RoleId = 1;
  repeated ArrayIntInt BaseProp = 2;
  repeated ArrayIntInt AddProp = 3;
  RolePhantomPropInfo RoleEquipmentPropData = 4;
}

// MessageId: 18311 (Request)
message RobotRolePropRequest {
  repeated int32 RoleIds = 225;
}

// MessageId: 19387 (Response)
message RobotRolePropResponse {
  int32 Error = 242;
  repeated RobotRoleInfo RobotRoleInfo = 103;
}

// MessageId: 24274 (Request)
message ItemDeprecateRequest {
  int32 ItemId = 229;
  int32 IncrId = 236;
}

// MessageId: 19258 (Response)
message ItemDeprecateResponse {
  ErrorCode ErrorCode = 185;
}

// MessageId: 16794 (Request)
message SendGiftPackPreviewRequest {
  int32 GiftPackId = 44;
}

// MessageId: 24737 (Response)
message SendGiftPackPreviewResponse {
  map<int32, PhantomItem> PhantomItemData = 7;
}

// MessageId: 21897 (Request)
message F_s {
}

// MessageId: 18228 (Response)
message V_s {
  ErrorCode ErrorCode = 229;
  repeated RoleInfo RoleList = 108;
}

// MessageId: 19985 (Notify)
message PbGetRoleListNotify {
  repeated RoleInfo RoleList = 138;
}

// MessageId: 22099 (Request)
message PbRoleActiveRequest {
  int32 RoleId = 32;
}

// MessageId: 28932 (Response)
message PbRoleActiveResponse {
  ErrorCode ErrorCode = 134;
}

// MessageId: 17447 (Notify)
message PbRoleActiveNotify {
  RoleInfo Role = 190;
}

// MessageId: 24063 (Request)
message PbUpLevelRoleRequest {
  int32 RoleId = 84;
  repeated ArrayIntInt ItemList = 228;
}

// MessageId: 18159 (Response)
message PbUpLevelRoleResponse {
  ErrorCode ErrorCode = 245;
  int32 RoleId = 218;
  int32 Exp = 79;
  int32 Level = 234;
  map<int32, int32> ItemMap = 59;
}

// MessageId: 15871 (Request)
message PbOverRoleRequest {
  int32 RoleId = 227;
}

// MessageId: 16887 (Response)
message PbOverRoleResponse {
  ErrorCode ErrorCode = 202;
  int32 RoleId = 129;
  int32 Breakthrough = 204;
}

// MessageId: 20440 (Request)
message PbUpLevelSkillRequest {
  int32 RoleId = 56;
  int32 SkillId = 242;
}

// MessageId: 23378 (Response)
message PbUpLevelSkillResponse {
  ErrorCode ErrorCode = 233;
  int32 RoleId = 250;
  ArrayIntInt SkillInfo = 13;
}

// MessageId: 27594 (Request)
message PbUplevelStarRequest {
  int32 RoleId = 77;
  int32 Star = 182;
}

// MessageId: 20804 (Response)
message PbUplevelStarResponse {
  ErrorCode ErrorCode = 108;
  int32 RoleId = 103;
  int32 Star = 20;
}

// MessageId: 21125 (Request)
message PbChangeNameRequest {
  int32 RoleId = 249;
  string Name = 100;
}

// MessageId: 16714 (Response)
message PbChangeNameResponse {
  ErrorCode ErrorCode = 31;
  int32 RoleId = 1;
  string Name = 24;
}

// MessageId: 28483 (Notify)
message PbRolePropsNotify {
  int32 RoleId = 181;
  repeated ArrayIntInt BaseProp = 78;
  repeated ArrayIntInt AddProp = 29;
}

// MessageId: 16236 (Request)
message PbRolePhantomRequest {
  int32 RoleId = 253;
  int32 Pos = 122;
  int32 PhantomId = 246;
}

// MessageId: 28809 (Response)
message PbRolePhantomResponse {
  ErrorCode ErrorCode = 162;
  int32 RoleId = 37;
  int32 Pos = 105;
  int32 PhantomId = 241;
}

message ArrayIntInt {
  int32 Key = 1;
  int32 Value = 2;
}

message ArrayIntDouble {
  int32 Key = 1;
  double Value = 2;
}

message ArraySkillNode {
  int32 SkillNodeId = 1;
  bool IsActive = 2;
  int32 SkillId = 3;
}

message ResonInfo {
  int32 ResonId = 1;
  bool IsOpen = 2;
  int32 Increase = 3;
}

message RoleInfo {
  int32 roleId = 1;
  string Name = 2;
  int32 Level = 3;
  int32 Exp = 4;
  int32 Breakthrough = 5;
  repeated ArrayIntInt Skills = 6;
  repeated ArrayIntInt Phantom = 7;
  int32 Star = 8;
  int32 Favor = 10;
  repeated ResonInfo Reson = 11;
  int32 CurModel = 12;
  repeated int32 Models = 13;
  repeated ArrayIntInt BaseProp = 14;
  repeated ArrayIntInt AddProp = 15;
  uint32 CreateTime = 17;
  repeated ArraySkillNode SkillNodeState = 19;
  int32 ResonantChainGroupIndex = 20;
}

// MessageId: 17225 (Notify)
message PbRoleExpNotify {
  int32 RoleId = 82;
  int32 Exp = 214;
  int32 Level = 169;
}

// MessageId: 18499 (Notify)
message PbRoleResonLockFinishNotify {
  int32 RoleId = 201;
  int32 ResonId = 103;
}

// MessageId: 23187 (Notify)
message PbRoleScenePropsNotify {
  int32 RoleId = 174;
  repeated ArrayIntInt BaseProp = 92;
  repeated ArrayIntInt AddProp = 151;
}

// MessageId: 15100 (Notify)
message PbRoleSkillLevelNotify {
  int32 RoleId = 240;
  ArrayIntInt SkillInfo = 18;
}

message SkillEffect {
  int32 Level = 1;
  repeated OneSkillEffect EffectDescList = 3;
}

message OneSkillEffect {
  int32 Id = 1;
  repeated string Desc = 3;
}

// MessageId: 20113 (Request)
message RoleLevelUpViewRequest {
  int32 RoleId = 208;
  int32 MaxItemId = 189;
  repeated ArrayIntInt ItemList = 230;
}

// MessageId: 27742 (Response)
message RoleLevelUpViewResponse {
  ErrorCode ErrorCode = 124;
  int32 Level = 98;
  repeated ArrayIntInt LevelExpInfo = 71;
  int32 Exp = 192;
  int32 AddExp = 45;
  repeated ArrayIntDouble FinalProp = 35;
  repeated ArrayIntInt CostList = 53;
  repeated ArrayIntInt OverflowList = 225;
  repeated ArrayIntInt ItemList = 137;
}

// MessageId: 24067 (Request)
message RoleBreakThroughViewRequest {
  int32 RoleId = 124;
}

// MessageId: 22336 (Response)
message RoleBreakThroughViewResponse {
  ErrorCode ErrorCode = 3;
  int32 LevelLimit = 128;
  int32 UnLockSkillId = 124;
  repeated ArrayIntInt CostList = 253;
  repeated ArrayIntInt RewardList = 201;
  repeated ArrayIntDouble FinalProp = 175;
  bool IsConditionFinish = 97;
}

// MessageId: 25780 (Request)
message RoleSkillLevelUpViewRequest {
  int32 RoleId = 64;
  int32 SkillId = 196;
}

// MessageId: 18128 (Response)
message RoleSkillLevelUpViewResponse {
  ErrorCode ErrorCode = 59;
  repeated SkillEffect SkillEffectList = 165;
  repeated ArrayIntInt CostList = 115;
}

// MessageId: 18488 (Request)
message RoleSkillViewRequest {
  int32 RoleId = 46;
  int32 SkillId = 31;
}

// MessageId: 19956 (Response)
message RoleSkillViewResponse {
  ErrorCode ErrorCode = 166;
  repeated SkillEffect SkillEffectList = 248;
  repeated SkillEffect PreSkillEffectList = 233;
  bool IsConditionFinish = 236;
}

// MessageId: 28962 (Notify)
message RoleChangeNameNotify {
  int32 RoleId = 179;
  string Name = 146;
}

// MessageId: 24910 (Notify)
message RoleTrialOpenNotify {
  repeated int32 RoleIds = 54;
}

// MessageId: 24985 (Notify)
message RoleTrialCloseNotify {
  repeated int32 RoleIds = 151;
}

// MessageId: 21851 (Request)
message RoleActivateSkillRequest {
  int32 RoleId = 114;
  int32 SkillNodeId = 111;
}

// MessageId: 25315 (Response)
message RoleActivateSkillResponse {
  ErrorCode ErrorCode = 198;
  int32 RoleId = 113;
  ArrayIntInt SkillInfo = 139;
}

// MessageId: 19582 (Notify)
message RoleSkillNodeNotify {
  int32 RoleId = 172;
  repeated ArraySkillNode SkillNodeState = 170;
}

// MessageId: 18828 (Request)
message ResonantChainUnlockRequest {
  int32 RoleId = 103;
}

// MessageId: 15201 (Response)
message ResonantChainUnlockResponse {
  ErrorCode ErrorCode = 21;
  int32 RoleId = 121;
  int32 ResonantChainGroupIndex = 212;
}

// MessageId: 19971 (Request)
message RoleSexChangeRequest {
  int32 Sex = 210;
}

// MessageId: 19645 (Response)
message RoleSexChangeResponse {
  ErrorCode ErrorCode = 75;
  int32 Sex = 229;
}

// MessageId: 22051 (Request)
message RoleElementChangeRequest {
  int32 ElementType = 192;
}

// MessageId: 28172 (Response)
message RoleElementChangeResponse {
  ErrorCode ErrorCode = 175;
}

// MessageId: 16237 (Notify)
message RoleChangeNotify {
  int32 SourceRoleId = 212;
  RoleInfo RoleInfo = 203;
}

// MessageId: 23590 (Notify)
message RoleChangeUnlockNotify {
  repeated int32 UnlockRoleIds = 62;
}

// MessageId: 23775 (Push)
message MaxMessageIdPush {
}

message ItemExchangeInfo {
  int32 ItemId = 1;
  int32 TodayTimes = 2;
  int32 TotalTimes = 3;
  int32 DailyLimit = 4;
  int32 TotalLimit = 5;
}

// MessageId: 21463 (Request)
message ItemExchangeInfoRequest {
}

// MessageId: 17623 (Response)
message ItemExchangeInfoResponse {
  repeated ItemExchangeInfo ItemExchangeInfos = 35;
}

// MessageId: 23280 (Request)
message ItemExchangeRequest {
  int32 ItemId = 221;
  int32 ExchangeTimes = 46;
}

// MessageId: 20523 (Response)
message ItemExchangeResponse {
  ErrorCode ErrorCode = 37;
  int32 ItemId = 48;
  int32 ItemCount = 204;
}

// MessageId: 25207 (Notify)
message EnterLevelPlayNotify {
  int32 Id = 226;
  bool CanGetReward = 178;
  int32 State = 45;
}

// MessageId: 21828 (Notify)
message LeaveLevelPlayNotify {
  int32 Id = 184;
}

message LevelPlayInfo {
  int32 Id = 1;
  bool IsFirst = 2;
  int32 State = 3;
  int64 UpdateTime = 4;
  int32 Rxs = 5;
}

// MessageId: 22841 (Notify)
message LevelPlayInfoNotify {
  repeated LevelPlayInfo LevelPlayInfo = 96;
}

// MessageId: 19265 (Notify)
message LevelPlayFirstNotify {
  int32 Id = 46;
}

// MessageId: 24491 (Notify)
message LevelPlayStateNotify {
  int32 Id = 9;
  int32 State = 254;
}

// MessageId: 20950 (Notify)
message LevelPlayOpenTimeNotify {
  int32 Id = 139;
  int64 OpenTime = 158;
}

// MessageId: 23079 (Request)
message LevelPlayRewardRequest {
  int64 EntityId = 162;
  int32 Eal = 75;
}

// MessageId: 22746 (Response)
message LevelPlayRewardResponse {
  ErrorCode ErrorCode = 228;
}

message LevelPlayRewardInfo {
  int32 Id = 1;
  bool GetReward = 2;
}

// MessageId: 25054 (Notify)
message LevelPlayRewardNotify {
  repeated LevelPlayRewardInfo LevelPlayRewards = 150;
}

// MessageId: 26712 (Notify)
message LevelPlayRewardCountResetNotify {
  repeated int32 LevelPlayIds = 246;
}

enum TravelModeType {
  TravelModeType_None = 0;
  TravelModeType_Ski = 1;
  TravelModeType_WingSuitFly = 2;
}

// MessageId: 21834 (Request)
message SkiModeSwitchRequest {
  TravelModeType InitialMode = 175;
  TravelModeType TargetMode = 200;
}

// MessageId: 28032 (Response)
message SkiModeSwitchResponse {
  ErrorCode ErrorCode = 22;
}

// MessageId: 16795 (Notify)
message ShowLevelPlayTipsNotify {
  int32 Id = 38;
  int64 Countdown = 3;
}

message LivenessInfo {
  int32 LivenessCount = 1;
  repeated int32 RewardedLiveness = 2;
  repeated LivenessTask Tasks = 3;
  int64 DayEnd = 4;
  int32 AreaId = 5;
}

message LivenessTask {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  bool IsFinished = 4;
  bool IsTaken = 5;
  bool bxs = 6;
}

// MessageId: 16908 (Request)
message LivenessRequest {
}

// MessageId: 29095 (Response)
message LivenessResponse {
  LivenessInfo LivenessInfo = 215;
}

// MessageId: 23329 (Notify)
message LivenessCountUpdateNotify {
  int32 LivenessCount = 125;
}

// MessageId: 27860 (Notify)
message LivenessUpdateNotify {
  LivenessInfo LivenessInfo = 232;
}

// MessageId: 23368 (Notify)
message LivenessRefreshNotify {
  LivenessInfo LivenessInfo = 40;
}

// MessageId: 15107 (Request)
message LivenessTaskTakeRequest {
  repeated int32 TaskIds = 255;
}

// MessageId: 26311 (Response)
message LivenessTaskTakeResponse {
  repeated int32 TaskIds = 178;
  ErrorCode ErrorCode = 125;
}

// MessageId: 21277 (Request)
message LivenessTakeRequest {
  repeated int32 Ids = 217;
}

// MessageId: 26494 (Response)
message LivenessTakeResponse {
  repeated int32 Ids = 166;
  ErrorCode ErrorCode = 6;
}

message RoleLoadEquipData {
  int32 RoleId = 1;
  int32 Pos = 2;
  int32 EquipIncId = 3;
}

message LoadEquipData {
  int32 RoleId = 1;
  int32 SkinId = 2;
}

enum yEl {
  yEl_Weapon = 0;
  yEl_WeaponSkin = 1;
  yEl_End = 2;
}

// MessageId: 24358 (Request)
message WeaponSkinRequest {
}

// MessageId: 18324 (Response)
message WeaponSkinResponse {
  ErrorCode ErrorCode = 226;
  repeated LoadEquipData EquipList = 64;
}

// MessageId: 26058 (Request)
message EquipTakeOnRequest {
  RoleLoadEquipData Data = 109;
}

// MessageId: 15796 (Response)
message EquipTakeOnResponse {
  ErrorCode ErrorCode = 94;
  repeated RoleLoadEquipData DataList = 83;
}

// MessageId: 17539 (Notify)
message EquipTakeOnNotify {
  repeated RoleLoadEquipData DataList = 159;
}

// MessageId: 22766 (Notify)
message UnlockSkinDataNotify {
  repeated int32 bBs1 = 129;
  bool IsLogin = 55;
}

// MessageId: 23735 (Notify)
message WeaponSkinDelete {
  int32 RoleId = 241;
  int32 SkinId = 124;
}

// MessageId: 26000 (Request)
message EquipWeaponSkinRequest {
  LoadEquipData Data = 127;
}

// MessageId: 20695 (Response)
message EquipWeaponSkinResponse {
  ErrorCode ErrorCode = 94;
  repeated LoadEquipData DataList = 49;
}

// MessageId: 24130 (Request)
message SendEquipSkinRequest {
  int32 RoleId = 226;
}

// MessageId: 22666 (Response)
message SendEquipSkinResponse {
  ErrorCode ErrorCode = 54;
}

message AceBlackProductAccountInfo {
  string TdmDeviceId = 1;
  bool IsRoot = 2;
  bool IsSimulator = 3;
}

// MessageId: 101 (Request)
message CreateCharacterRequest {
  int32 Sex = 1;
  string Name = 2;
}

// MessageId: 102 (Response)
message CreateCharacterResponse {
  ErrorCode ErrorCode = 1;
  string Name = 2;
  int32 PlayerId = 3;
  int32 CreateTime = 4;
}

message DevLoginCheckData {
  int32 ProtoVersion = 1;
  string ProtoMD5 = 2;
  int32 ConfigVersion = 3;
  string ConfigMD5 = 4;
  string BranchName = 5;
  string ProtoSeedMD5 = 6;
}

// MessageId: 103 (Request)
message LoginRequest {
  oneof p5s {
    DevLoginCheckData DevLoginCheckData = 9;
  }

  int32 Id = 1;
  string Account = 2;
  string LoginTraceId = 3;
  string Token = 4;
  string AppVersion = 5;
  string LauncherVersion = 6;
  string ResourceVersion = 7;
  ClientBasicInfo ClientBasicInfo = 8;
  PublicResourceVersionInfo PublicResourceVersionInfo = 10;
  AceBlackProductAccountInfo AceBlackProductAccountInfo = 11;
  bool PushNotificationsEnabled = 12;
  string ClientId = 13;
  string PSNUserId = 14;
  string PSNOnlineId = 15;
  string PSNAccountId = 16;
  string PackageClientFightConfig = 17;
}

// MessageId: 104 (Response)
message LoginResponse {
  ErrorCode ErrorCode = 1;
  string ReconnectToken = 3;
  int64 Timestamp = 8;
  string Platform = 9;
  int32 ClientWaitingMode = 10;
  int32 ClientWaitingTime = 11;
  int32 ClientAutoInInterval = 12;
  int32 ClientDisplayTime = 13;
}

// MessageId: 105 (Request)
message EnterGameRequest {
  int32 SingleInstanceId = 1;
  int32 MultiInstanceId = 2;
  int32 Mode = 3;
  Vector Pos = 4;
}

// MessageId: 106 (Response)
message EnterGameResponse {
  ErrorCode ErrorCode = 1;
  int32 ClientWaitingMode = 2;
  int32 ClientWaitingTime = 3;
  int32 ClientAutoInInterval = 4;
}

// MessageId: 107 (Request)
message ReconnectRequest {
  int32 PlayerId = 1;
  int32 LastSvrSeqNo = 2;
  string ReconnectToken = 3;
  string ReconnectTraceId = 4;
}

// MessageId: 108 (Response)
message ReconnectResponse {
  ErrorCode ErrorCode = 1;
  int32 LastRecvSeqNo = 3;
  int64 Timestamp = 4;
  bool IsPermittedSilentLogin = 5;
}

// MessageId: 109 (Notify)
message LoginNotify {
  int32 Id = 1;
}

// MessageId: 110 (Notify)
message LogoutNotify {
  oneof M5s {
    BanLogoutInfo banInfo = 3;
  }

  ErrorCode ErrorCode = 1;
  int32 logoutReason = 2;
}

// MessageId: 111 (Request)
message ProtoKeyRequest {
  bool IsLogin = 1;
  string TraceId = 2;
}

// MessageId: 112 (Response)
message ProtoKeyResponse {
  ErrorCode ErrorCode = 1;
  int32 Type = 2;
  bytes Key = 3;
}

// MessageId: 113 (Notify)
message PushDataCompleteNotify {
}

// MessageId: 114 (Push)
message ExitGamePush {
}

// MessageId: 116 (Push)
message VersionInfoPush {
  string AppVersion = 1;
  string LauncherVersion = 2;
  string ResourceVersion = 3;
}

// MessageId: 115 (Notify)
message BackToGameNotify {
}

message PublicResourceVersionInfo {
  int32 PublicJsonVersion = 1;
  int32 PublicMiscVersion = 2;
  int32 PublicUniverseEditorVersion = 3;
}

// MessageId: 26133 (Request)
message CheckPublicResourceVersionRequest {
  PublicResourceVersionInfo PublicResourceVersionInfo = 190;
}

// MessageId: 18879 (Response)
message CheckPublicResourceVersionResponse {
  int32 ErrorId = 80;
  int32 TipLevel = 225;
}

// MessageId: 28560 (Request)
message LordGymInfoRequest {
}

// MessageId: 19509 (Response)
message LordGymInfoResponse {
  repeated int32 UnlockLoadGymIds = 254;
  repeated int32 ReadLoadGymIds = 210;
  repeated LordGymPassRecord LordGymPassRecords = 214;
}

message RoleBrief {
  int32 RoleId = 1;
  int32 Level = 2;
}

message LordGymPassRecord {
  int32 LoadGymId = 1;
  int32 PassTime = 2;
  repeated RoleBrief RoleIds = 3;
}

// MessageId: 22091 (Notify)
message LordGymUnlockNotify {
  repeated int32 UnlockLoadGymIds = 58;
}

// MessageId: 22906 (Request)
message LordGymBeginRequest {
  int32 LoadGymId = 205;
}

// MessageId: 20121 (Response)
message LordGymBeginResponse {
  ErrorCode ErrorCode = 101;
}

// MessageId: 20210 (Request)
message LordGymReadRequest {
  int32 LoadGymId = 203;
}

// MessageId: 21290 (Response)
message LordGymReadResponse {
  ErrorCode ErrorCode = 197;
}

message ItemData {
  int32 ItemId = 1;
  int32 ItemIncId = 2;
  int32 Count = 3;
}

// MessageId: 23802 (Notify)
message LordGymLevelPlayResultNotify {
  bool IsSuccess = 18;
  bool IsNewRecord = 62;
  LordGymPassRecord LordGymPassRecord = 173;
  repeated ItemData ItemDatas = 31;
}

enum MailLevel {
  MailLevel_None = 0;
  MailLevel_General = 1;
  MailLevel_Important = 2;
}


enum MailDeleteReason {
  MailDeleteReason_OverTime = 0;
  MailDeleteReason_OverSize = 1;
  MailDeleteReason_OfflineEvent = 2;
  MailDeleteReason_PublicCancelled = 3;
  MailDeleteReason_PlayerDelete = 4;
}

message PbMailAttachment {
  int32 Id = 1;
  int32 count = 2;
}

message PbMailInfo {
  string Id = 1;
  int64 ReceivedTime = 2;
  int64 ReadTime = 3;
  int32 State = 4;
  int32 Level = 5;
  string Title = 6;
  string Content = 7;
  string Sender = 8;
  int32 ValidTime = 9;
  int32 ReadValidTime = 10;
  repeated PbMailAttachment Attachments = 11;
  int32 ConfigId = 12;
  int64 nyl2 = 13;
}

// MessageId: 21781 (Notify)
message MailInfosNotify {
  repeated PbMailInfo MailInfos = 81;
}

// MessageId: 27455 (Notify)
message MailDeleteNotify {
  string Id = 13;
  int32 Reason = 38;
}

enum MailAddReason {
  MailAddReason_Gm = 0;
  MailAddReason_BagFull = 1;
  MailAddReason_Public = 2;
  MailAddReason_OfflineEventAdd = 3;
  MailAddReason_QuestNpcAction = 4;
  MailAddReason_D5s = 5;
  MailAddReason_ReportPlayer = 6;
  MailAddReason_MonthCardRemind = 7;
  MailAddReason_BattlePassSettle = 8;
  MailAddReason_PayRebate = 9;
  MailAddReason_RemoveTemporaryTeleportBySceneDataLayerChange = 10;
  MailAddReason_R8n = 11;
  MailAddReason_PayRefund = 12;
  MailAddReason_Replenishment = 13;
  MailAddReason_GatherActivitySettle = 14;
  MailAddReason_HarvestActivitySettle = 15;
  MailAddReason_RoleTrialActivitySettle = 16;
  MailAddReason_KuroBbsFirstBind = 17;
  MailAddReason_ParkourActivitySettle = 18;
  MailAddReason_DailyAdventureActivitySettle = 19;
  MailAddReason_LongShanActivitySettle = 20;
  MailAddReason_SignActivitySettle = 21;
  MailAddReason_BossRushActivitySettle = 22;
  MailAddReason_PromotionActivity = 23;
  MailAddReason_RogueActivitySettle = 24;
  MailAddReason_TowerDefenceActivitySettle = 25;
  MailAddReason_ExploreToolUnlock = 26;
  MailAddReason_CalabashFixLevelExp = 27;
  MailAddReason_ActivityNotice = 28;
  MailAddReason_TrackMoonPhaseSettle = 29;
  MailAddReason_TrackMoonSettle = 30;
  MailAddReason_CircumFluenceSettle = 31;
  MailAddReason_CorniceMeetingActivitySettle = 32;
  MailAddReason_RiskHarvestSettle = 33;
  MailAddReason_BlackCoastThemeSettle = 34;
  R5s_PreheatSignSettle = 35;
  R5s_MowTower = 36;
}

// MessageId: 26632 (Notify)
message MailAddNotify {
  PbMailInfo NewMail = 95;
  int32 Reason = 224;
}

// MessageId: 29000 (Request)
message MailReadRequest {
  string Id = 227;
}

// MessageId: 22076 (Response)
message MailReadResponse {
  string Id = 213;
  int32 State = 216;
  ErrorCode ErrorCode = 246;
  int64 ReadTime = 7;
  int64 ExpiryTime = 244;
}

// MessageId: 26193 (Request)
message MailGetAttachmentRequest {
  repeated string MailIds = 173;
}

// MessageId: 28391 (Response)
message MailGetAttachmentResponse {
  map<string, int32> SuccessIdMap = 16;
  ErrorCode ErrorCode = 157;
}

// MessageId: 21637 (Request)
message MailDeleteRequest {
  repeated string MailIds = 6;
}

// MessageId: 18454 (Response)
message MailDeleteResponse {
  repeated string SuccessIds = 199;
  ErrorCode ErrorCode = 173;
}

// MessageId: 16853 (Request)
message MailBindInfoRequest {
}

// MessageId: 26265 (Response)
message MailBindInfoResponse {
  MailBind MailBind = 182;
}

message MailBind {
  bool IsBind = 1;
  bool IsReward = 2;
  int64 CloseTime = 3;
}

// MessageId: 26487 (Request)
message MailBindRewardRequest {
}

// MessageId: 24069 (Response)
message MailBindRewardResponse {
  ErrorCode ErrorCode = 208;
}

// MessageId: 17932 (Request)
message MailBindRequest {
}

// MessageId: 20259 (Response)
message MailBindResponse {
}

// MessageId: 24329 (Notify)
message MailBindInfoNotify {
  MailBind MailBind = 230;
}

message MarkPointInfo {
  float PosX = 1;
  float PosY = 2;
  float PosZ = 3;
  int32 ConfigId = 4;
  int32 MarkId = 5;
  int32 IsTrace = 6;
  int32 MarkType = 7;
  int32 MapId = 8;
  bool IsServerDisable = 9;
}

message MarkPointRequestInfo {
  float PosX = 1;
  float PosY = 2;
  float PosZ = 3;
  int32 ConfigId = 4;
  int32 MarkType = 5;
  bool MarkInfo = 6;
  int32 IsTrace = 7;
  int32 MapId = 8;
}

message TreasureBoxParam {
  repeated MarkPointRequestInfo TreasureBox = 1;
  int64 DetectionSlotId = 2;
}

message A5s {
  repeated MarkPointInfo MarkPointInfo = 1;
}

message EEl1 {
  repeated MarkPointInfo MarkPointInfo = 1;
}

// MessageId: 28132 (Request)
message MapMarkInfoRequest {
}

// MessageId: 26646 (Response)
message MapMarkInfoResponse {
  ErrorCode ErrorCode = 137;
  repeated MarkPointInfo InfoList = 113;
  repeated MapMarkShowInfo ShowMarkIds = 59;
}

// MessageId: 26828 (Request)
message MapUnlockFieldInfoRequest {
}

// MessageId: 27717 (Response)
message MapUnlockFieldInfoResponse {
  ErrorCode ErrorCode = 8;
  repeated int32 FieldId = 48;
}

enum MapMarkShowFlag {
  MapMarkShowFlag_Hide = 0;
  MapMarkShowFlag_ShowNormal = 1;
  MapMarkShowFlag_ShowDisable = 2;
}

message MapMarkShowInfo {
  int32 MarkId = 1;
  bool IsShow = 2;
  uint32 ShowFlag = 3;
}

// MessageId: 15710 (Notify)
message MapMarkShowIdInfoUpdateNotify {
  int32 MarkId = 93;
  bool IsShow = 188;
  bool NeedFocus = 165;
  uint32 ShowFlag = 62;
}

// MessageId: 18258 (Notify)
message DynamicMapMarkerNotify {
  int32 MarkId = 95;
  bool IsServerDisable = 143;
}

message TemporaryTeleportParam {
  int64 temporaryTeleportId = 1;
}

message w5s {
  enum ENUMS {
    ENUMS_None = 0;
    ENUMS_Custom = 1;
    ENUMS_aTs = 2;
    ENUMS_Building = 3;
    ENUMS_TemporaryTeleport = 4;
    ENUMS_SoundBox = 5;
    ENUMS_O7n = 6;
    ENUMS_TreasureBoxPoint = 7;
    ENUMS_CalmingWindBell = 8;
    ENUMS_EnrichmentArea = 9;
    ENUMS_EnrichmentAreaChild = 10;
  }
}

// MessageId: 15461 (Request)
message MapMarkRequest {
  oneof Params {
    TemporaryTeleportParam TemporaryTeleportParam = 220;
    TreasureBoxParam TreasureBoxParam = 28;
  }
  MarkPointRequestInfo MarkPointRequestInfo = 90;
}

// MessageId: 18479 (Response)
message zss2 {
  ErrorCode ErrorCode = 36;
  MarkPointInfo Info = 253;
}

// MessageId: 16132 (Request)
message RemoveMapMarkRequest {
  repeated int32 MarkList = 110;
}

// MessageId: 21737 (Response)
message RemoveMapMarkResponse {
  ErrorCode ErrorCode = 108;
  repeated int32 MarkList = 111;
}

// MessageId: 22031 (Notify)
message MapUnlockFieldNotify {
  int32 FieldId = 219;
}

// MessageId: 19333 (Request)
message MapTraceInfoRequest {
}

// MessageId: 22736 (Response)
message MapTraceInfoResponse {
  ErrorCode ErrorCode = 194;
  repeated int32 MarkIdList = 20;
}

// MessageId: 28365 (Request)
message MapTraceRequest {
  int32 MarkId = 119;
}

// MessageId: 27027 (Response)
message MapTraceResponse {
  ErrorCode ErrorCode = 49;
  int32 MarkId = 73;
}

// MessageId: 24964 (Request)
message MapCancelTraceRequest {
  int32 MarkId = 177;
}

// MessageId: 24904 (Response)
message MapCancelTraceResponse {
  ErrorCode ErrorCode = 48;
  int32 MarkId = 179;
}

// MessageId: 22988 (Request)
message MapReplaceMarkRequest {
  int32 MarkId = 242;
  int32 ConfigId = 171;
}

// MessageId: 26069 (Response)
message MapReplaceMarkResponse {
  ErrorCode ErrorCode = 108;
  int32 MarkId = 49;
  int32 ConfigId = 193;
}

// MessageId: 29013 (Notify)
message TrackMapMarkRemoveNotify {
  int32 MarkId = 99;
}

// MessageId: 20687 (Notify)
message TrackMapMarkAddNotify {
  int32 MarkId = 130;
}

// MessageId: 18678 (Request)
message das1 {
  int32 MarkType = 195;
}

// MessageId: 29985 (Response)
message mas1 {
  ErrorCode ErrorCode = 6;
  repeated int32 MarkIdList = 16;
}

// MessageId: 18248 (Notify)
message MapMarkInfoNotify {
  repeated MarkPointInfo InfoList = 166;
  repeated MapMarkShowInfo ShowMarkIds = 175;
  repeated int32 ServerOpenState = 83;
}

// MessageId: 28276 (Notify)
message MapMarkServerOpenStateNotify {
  int32 MarkId = 228;
}

enum MapOpenType {
  MapOpenType_HotKey = 0;
  MapOpenType_Mouse = 1;
  MapOpenType_Other = 2;
}

// MessageId: 26884 (Push)
message MapOpenPush {
  int32 OpenType = 246;
}

// MessageId: 29722 (Request)
message UpdateCustomMapMarkPositionRequest {
  int32 MarkId = 151;
  Vector Pos = 130;
}

// MessageId: 21594 (Response)
message UpdateCustomMapMarkPositionResponse {
  ErrorCode ErrorCode = 19;
}

// MessageId: 27600 (Notify)
message MapMarkDynamicRemoveNotify {
  repeated int32 MarkIds = 226;
}

// MessageId: 29175 (Notify)
message Sas {
  MarkPointInfo Info = 4;
  A5s pbs = 194;
  EEl1 uyl = 125;
}

// MessageId: 15189 (Notify)
message Lgs {
  repeated int32 UnlockMultiMapIds = 220;
  repeated int32 UnlockMapBlockIds = 169;
}

// MessageId: 29158 (Notify)
message UnlockMapBlockIdsNotify {
  repeated int32 UnlockMapBlockIds = 119;
}

// MessageId: 25972 (Notify)
message UnlockMultiMapIdsNotify {
  repeated int32 UnlockMultiMapIds = 205;
}

// MessageId: 23016 (Request)
message TrackEnrichmentAreaRequest {
  int32 AreaId = 41;
}

// MessageId: 26705 (Response)
message TrackEnrichmentAreaResponse {
  ErrorCode ErrorCode = 99;
}

enum MatchFailReason {
  MatchFailReason_TimeOut = 0;
  MatchFailReason_NotAccept = 1;
  MatchFailReason_ServerError = 2;
}

enum MatchTeamState {
  MatchTeamState_WaiteConfirm = 0;
  MatchTeamState_ReadyConfirm = 1;
  MatchTeamState_EnterInst = 2;
  MatchTeamState_EnterInstStart = 3;
}

enum MatchPlayerLeaveReason {
  MatchPlayerLeaveReason_NotConfirm = 0;
  MatchPlayerLeaveReason_Refuse = 1;
  MatchPlayerLeaveReason_Initiative = 2;
  MatchPlayerLeaveReason_BeKick = 3;
  MatchPlayerLeaveReason_HostLeave = 4;
  MatchPlayerLeaveReason_EnterInstance = 5;
  MatchPlayerLeaveReason_MatchServerDisable = 6;
  MatchPlayerLeaveReason_MatchGM = 7;
  MatchPlayerLeaveReason_EnterBigWorldInst = 8;
  MatchPlayerLeaveReason_EnableFunction = 9;
  MatchPlayerLeaveReason_DisabledOnlineNodeEvent = 10;
  MatchPlayerLeaveReason_DoCloseOnlineMatching = 11;
}

enum EMatchPlayerUiState {
  EMatchPlayerUiState_Wait = 0;
  EMatchPlayerUiState_Confirm = 2;
  EMatchPlayerUiState_Matching = 3;
  EMatchPlayerUiState_hTs = 4;
  EMatchPlayerUiState_Selecting = 5;
  EMatchPlayerUiState_Teleporting = 6;
  EMatchPlayerUiState_Max = 7;
}

enum IEl2 {
  IEl_Accept = 0;
  IEl_ActiveRefuse = 1;
  IEl_TimeOutRefuse = 2;
}

// MessageId: 28590 (Request)
message Eas2 {
  int32 InstId = 172;
  bool U9n = 248;
  int32 A9n = 147;
}

// MessageId: 18845 (Response)
message yas {
  ErrorCode ErrorCode = 79;
}

// MessageId: 29139 (Notify)
message Ias {
  int32 InstId = 192;
}

// MessageId: 28648 (Request)
message CancelMatchRequest {
}

// MessageId: 16464 (Response)
message CancelMatchResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 19210 (Notify)
message LeaderCancelMatchNotify {
  int32 PlayerId = 134;
}

// MessageId: 16217 (Notify)
message MatchingTimeoutNotify {
  int32 Reason = 54;
}

message O5s1 {
  int32 RoleId = 1;
  int32 RoleLevel = 2;
  int32 Tzs = 3;
}

message k5s {
  int32 PlayerId = 1;
  repeated O5s1 RoleInfo = 2;
  string PlayerName = 3;
  bool ybs1 = 4;
  bool D9n = 5;
  int32 w9n = 6;
  string Qxa = 7;
}

message N5s2 {
  int32 HostId = 1;
  repeated k5s PlayerInfos = 2;
  int32 TeamState = 3;
  Vector Location = 4;
  Rotator Rotation = 5;
}

// MessageId: 17494 (Notify)
message MatchTeamNotify {
  N5s2 Ibs = 252;
}

// MessageId: 23525 (Request)
message MatchConfirmRequest {
  bool R9n = 123;
}

// MessageId: 29271 (Response)
message MatchConfirmResponse {
  ErrorCode ErrorCode = 245;
}

// MessageId: 20581 (Notify)
message MatchConfirmNotify {
  int32 Tbs1 = 150;
}

// MessageId: 21982 (Notify)
message MatchStateChangedNotify {
}

// MessageId: 24977 (Notify)
message MatchTeamStateNotify {
  int32 TeamState = 78;
}

// MessageId: 23980 (Request)
message MatchChangeRoleRequest {
  repeated int32 RoleId = 38;
  repeated int32 PhantomIdList = 112;
}

// MessageId: 27031 (Response)
message MatchChangeRoleResponse {
  ErrorCode ErrorCode = 139;
}

// MessageId: 19701 (Notify)
message Gas2 {
  int32 PlayerId = 41;
  repeated O5s1 RoleInfo = 129;
}

// MessageId: 22267 (Request)
message MatchChangeReadyRequest {
  bool IsReady = 173;
}

// MessageId: 27203 (Response)
message MatchChangeReadyResponse {
  ErrorCode ErrorCode = 244;
}

// MessageId: 21323 (Notify)
message MatchChangeReadyNotify {
  int32 PlayerId = 227;
  bool IsReady = 57;
}

// MessageId: 21191 (Request)
message LeaveMatchTeamRequest {
}

// MessageId: 22909 (Response)
message LeaveMatchTeamResponse {
  ErrorCode ErrorCode = 63;
}

// MessageId: 20006 (Notify)
message LeaveMatchTeamNotify {
  int32 PlayerId = 95;
  int32 Reason = 21;
}

// MessageId: 29511 (Notify)
message jas2 {
  k5s PlayerInfo = 210;
}

// MessageId: 27624 (Request)
message KickMatchTeamPlayerRequest {
  int32 PlayerId = 113;
}

// MessageId: 22718 (Response)
message KickMatchTeamPlayerResponse {
  ErrorCode ErrorCode = 60;
}

// MessageId: 23039 (Request)
message SetMatchTeamMatchFlagRequest {
  bool IsMatch = 195;
}

// MessageId: 28521 (Response)
message SetMatchTeamMatchFlagResponse {
  ErrorCode ErrorCode = 162;
}

// MessageId: 27710 (Notify)
message TeamMatchFlagNotify {
  bool MatchFlag = 35;
  int32 InstId = 136;
}

// MessageId: 20571 (Request)
message EnterMatchInstRequest {
}

// MessageId: 19055 (Response)
message EnterMatchInstResponse {
  ErrorCode ErrorCode = 169;
}

// MessageId: 26673 (Request)
message TeamChallengeRequest {
  int32 InstId = 90;
  bool U9n = 97;
  int32 EntranceId = 20;
}

// MessageId: 16442 (Response)
message TeamChallengeResponse {
  ErrorCode ErrorCode = 46;
}

// MessageId: 29462 (Request)
message TeamMatchInviteRequest {
  int32 InstId = 116;
}

// MessageId: 16438 (Response)
message TeamMatchInviteResponse {
  ErrorCode ErrorCode = 208;
}

// MessageId: 21836 (Notify)
message TeamMatchInviteNotify {
  int32 HostId = 208;
  int32 InstId = 127;
}

// MessageId: 22574 (Notify)
message Ypl1 {
  int32 InstId = 236;
  ErrorCode ErrorCode = 161;
}

// MessageId: 18793 (Request)
message TeamMatchAcceptInviteRequest {
  int32 CIa = 20;
  int32 HostId = 172;
  int32 InstId = 101;
}

// MessageId: 28105 (Response)
message TeamMatchAcceptInviteResponse {
  ErrorCode ErrorCode = 39;
}

// MessageId: 17778 (Notify)
message TeamMatchAcceptInviteNotify {
  int32 CIa = 173;
  int32 PlayerId = 166;
}

// MessageId: 19511 (Request)
message MatchChangePlayerUiStateRequest {
  int32 w9n = 14;
}

// MessageId: 27793 (Response)
message MatchChangePlayerUiStateResponse {
  ErrorCode ErrorCode = 161;
}

// MessageId: 29587 (Notify)
message MatchChangePlayerUiStateNotify {
  int32 PlayerId = 204;
  int32 w9n = 135;
}

// MessageId: 22694 (Notify)
message MessageDecodeFailNotify {
  ErrorCode ErrorCode = 20;
  uint32 Conv = 2;
  string ChannelId = 137;
  int32 SeqNo = 170;
}

// MessageId: 25511 (Notify)
message fhs {
  MonsterGachaDataPb MonsterGachaDataPb = 87;
}

// MessageId: 28745 (Request)
message MonthCardRequest {
}

// MessageId: 29602 (Response)
message MonthCardResponse {
  int32 Days = 145;
  bool IsDailyGot = 26;
  ErrorCode ErrorCode = 87;
}

// MessageId: 19583 (Notify)
message MonthCardDailyRewardNotify {
  int32 ItemId = 54;
  int32 Count = 100;
  int32 Days = 47;
}

// MessageId: 27583 (Notify)
message MonthCardUseNotify {
  int32 ItemId = 156;
  int32 count = 94;
  int32 Days = 131;
  int32 DailyRewardItemId = 191;
  int32 DailyRewardItemCount = 206;
  int32 ExtendedDays = 114;
}

message MultiplayerInfo {
  int32 PlayerId = 1;
  string Name = 2;
  int32 IconId = 3;
  int32 Level = 4;
  string GuildName = 5;
  string GuildIntro = 6;
}

// MessageId: 23662 (Request)
message MultiplayerTeamRefreshNearListRequest {
}

// MessageId: 18125 (Response)
message MultiplayerTeamRefreshNearListResponse {
  ErrorCode ErrorCode = 1;
  int32 NextRefreshTime = 135;
  repeated MultiplayerInfo InfoList = 16;
  repeated string ErrorParams = 143;
}

message V5s {
  double qbs3 = 1;
  float Gbs1 = 2;
  int32 Obs2 = 3;
  sint32 kbs1 = 4;
  uint32 Nbs = 5;
  int64 Fbs = 6;
  sint64 Vbs1 = 7;
  uint64 DOLLARbs = 8;
  fixed32 Hbs = 9;
  fixed64 jbs1 = 10;
  sfixed32 Wbs = 11;
  sfixed64 Kbs3 = 12;
  bool Qbs1 = 13;
  string Xbs = 14;
  bytes Ybs2 = 15;
}

// MessageId: 25561 (Push)
message Ihs2 {
  V5s Data = 171;
}

// MessageId: 19112 (Notify)
message Ths1 {
  V5s Data = 193;
}

// MessageId: 18530 (Request)
message Lhs1 {
  V5s Data = 171;
}

// MessageId: 17067 (Response)
message Rhs {
  V5s Data = 80;
}

// MessageId: 22744 (Notify)
message NoviceJourneyRewardNotify {
  repeated int32 HadTakeReward = 25;
}

// MessageId: 28188 (Request)
message NoviceJourneyRewardRequest {
  int32 Level = 112;
}

// MessageId: 23190 (Response)
message NoviceJourneyRewardResponse {
  ErrorCode ErrorCode = 221;
}

message BeginnerBookData {
  int32 Id = 1;
  bool Unlocked = 2;
  bool Finished = 3;
}

// MessageId: 19700 (Request)
message BeginnerBookNewJourneyRequest {
  repeated int32 TaskIds = 238;
}

// MessageId: 19834 (Response)
message BeginnerBookNewJourneyResponse {
  repeated BeginnerBookData eBs = 146;
}

message ParkourChallengeData {
  int32 ChallengeId = 1;
  int32 MaxScore = 3;
  int32 MiniTime = 4;
  repeated int32 ScoreReward = 5;
}

// MessageId: 23138 (Request)
message ParkourChallengeOpenRequest {
}

// MessageId: 19608 (Response)
message ParkourChallengeOpenResponse {
  repeated ParkourChallengeData Challenges = 136;
  repeated int32 ChallengeId = 252;
}

// MessageId: 24542 (Notify)
message ParkourChallengeOpenNotify {
  int32 ChallengeId = 136;
  bool Challenges = 210;
}

// MessageId: 23473 (Request)
message ParkourChallengeTakeRequest {
  int32 ChallengeId = 35;
  int32 ScoreIndex = 209;
}

// MessageId: 24659 (Response)
message ParkourChallengeTakeResponse {
  ErrorCode ErrorCode = 155;
  map<int32, int32> Rewards = 96;
}

// MessageId: 26173 (Notify)
message ParkourChallengeEndNotify {
  int32 ChallengeId = 13;
  int32 Score = 245;
  int32 Duration = 88;
  bool IsComplete = 228;
}

// MessageId: 26889 (Request)
message ParkourChallengeTransRequest {
  int32 ChallengeId = 186;
}

// MessageId: 19946 (Response)
message ParkourChallengeTransResponse {
  ErrorCode ErrorCode = 89;
}

message PayItemInfo {
  int32 Id = 1;
  int32 PayId = 2;
  int32 ItemId = 3;
  int32 ItemCount = 4;
  int32 BonusItemCount = 5;
  int32 SpecialBonusItemCount = 6;
  bool CanSpecialBonus = 7;
  string StageImage = 8;
  string ProductId = 9;
  string Amount = 10;
}

message PayGiftInfo {
  int32 Id = 1;
  int32 PayId = 2;
  int32 ItemId = 3;
  int32 ItemCount = 4;
  int32 Sort = 5;
  int32 BuyLimit = 6;
  int32 BoughtCount = 7;
  string StageImage = 8;
  int64 BeginTime = 9;
  int64 EndTime = 10;
  string ProductId = 11;
  string Amount = 12;
  int32 TabId = 13;
  int32 Type = 14;
  bool Locked = 15;
  bool IsCanBuy = 16;
  bool IsRemind = 17;
  int32 BuyCondition = 18;
}

// MessageId: 27023 (Request)
message PayInfoRequest {
  string Version = 255;
}

// MessageId: 21189 (Response)
message PayInfoResponse {
  repeated PayItemInfo Infos = 40;
  string Version = 121;
  ErrorCode ErrorCode = 31;
}

// MessageId: 20200 (Request)
message PayItemRechargeRequest {
  int32 Id = 196;
  string Version = 116;
}

// MessageId: 28103 (Response)
message PayItemRechargeResponse {
  string ReceiptId = 27;
  ErrorCode ErrorCode = 76;
  string CallbackUrl = 221;
}

// MessageId: 15146 (Notify)
message PayItemSuccessNotify {
  int32 Id = 199;
  string ReceiptId = 238;
  int32 ItemId = 226;
  int32 ItemCount = 50;
}

// MessageId: 27564 (Notify)
message PayItemSpecialBonusReset {
  repeated int32 Ids = 137;
}

// MessageId: 15246 (Request)
message PayGiftInfoRequest {
  string Version = 110;
}

// MessageId: 15447 (Response)
message PayGiftInfoResponse {
  repeated PayGiftInfo Infos = 6;
  string Version = 65;
  ErrorCode ErrorCode = 8;
}

// MessageId: 25352 (Request)
message PayGiftSuccessRequest {
  int32 Id = 185;
  string Version = 91;
}

// MessageId: 23800 (Response)
message PayGiftSuccessResponse {
  string ReceiptId = 114;
  ErrorCode ErrorCode = 71;
  string CallbackUrl = 199;
}

// MessageId: 28901 (Notify)
message PayGiftSuccessNotify {
  int32 Id = 109;
  string ReceiptId = 24;
  int32 ItemId = 199;
  int32 ItemCount = 17;
  PayGiftInfo PayGiftInfo = 195;
}

// MessageId: 18826 (Notify)
message Sfl2 {
  repeated PayGiftInfo Gifts = 1;
}

enum PayShopUpdateType {
  PayShopUpdateType_None = 0;
  PayShopUpdateType_Daily = 1;
  PayShopUpdateType_Weekly = 2;
  PayShopUpdateType_Monthly = 3;
  PayShopUpdateType_Forever = 4;
}

message PayShopPrice {
  int32 Id = 1;
  int32 count = 2;
  int32 PromotionCount = 3;
}

enum PayShopItemType {
  PayShopItemType_Normal = 0;
  PayShopItemType_Direct = 1;
}

message PayShopItem {
  int32 Id = 1;
  int32 ItemId = 3;
  int32 ItemCount = 4;
  bool Locked = 5;
  int32 BuyLimit = 6;
  int32 BoughtCount = 7;
  PayShopPrice Price = 8;
  int64 BeginTime = 9;
  int64 EndTime = 10;
  int64 BeginPromotionTime = 11;
  int64 EndPromotionTime = 12;
  int32 UpdateType = 13;
  int64 UpdateTime = 14;
  int32 ShopItemType = 15;
  int64 TagBeginTime = 17;
  int64 TagEndTime = 18;
  bool CanBuyGoods = 22;
  bool IsRemind = 23;
}

message PayShopInfo {
  int32 Id = 1;
  repeated PayShopItem Items = 2;
  int64 UpdateTime = 3;
}

message PayGiftShopInfo {
  repeated PayGiftInfo Gifts = 1;
  string Version = 2;
}

// MessageId: 26645 (Notify)
message PayShopInfoNotify {
  repeated PayShopInfo Infos = 228;
  string Version = 1;
  PayGiftShopInfo PayGiftShopInfo = 237;
}

// MessageId: 23715 (Request)
message PayShopInfoRequest {
  string Version = 127;
}

// MessageId: 17095 (Response)
message PayShopInfoResponse {
  repeated PayShopInfo Infos = 204;
  string Version = 57;
  ErrorCode ErrorCode = 58;
  PayGiftShopInfo PayGiftShopInfo = 195;
}

// MessageId: 21402 (Request)
message PayShopUpdateRequest {
  int32 Id = 113;
}

// MessageId: 27394 (Response)
message PayShopUpdateResponse {
  PayShopInfo Info = 52;
  ErrorCode ErrorCode = 230;
}

// MessageId: 18967 (Request)
message PayShopItemUpdateRequest {
  repeated int32 Q7n = 180;
}

// MessageId: 24128 (Response)
message PayShopItemUpdateResponse {
  repeated PayShopItem Items = 156;
  ErrorCode ErrorCode = 97;
}

// MessageId: 23125 (Request)
message PayShopBuyRequest {
  int32 Id = 97;
  int32 count = 125;
  string Version = 220;
}

// MessageId: 23268 (Response)
message PayShopBuyResponse {
  int32 Id = 3;
  int32 count = 61;
  ErrorCode ErrorCode = 78;
}

// MessageId: 22659 (Notify)
message PayShopUnlockGoodsNotify {
  repeated int32 UnlockIds = 102;
}

// MessageId: 29618 (Request)
message uls {
  int32 Id = 42;
  string Version = 34;
}

// MessageId: 17484 (Response)
message cls {
  string ReceiptId = 185;
  ErrorCode ErrorCode = 88;
  string gBs2 = 136;
}

// MessageId: 25939 (Notify)
message PayShopDirectBuyNotify {
  string ReceiptId = 49;
  int32 ShopItemId = 79;
  int32 ItemId = 179;
  int32 ItemCount = 99;
}

// MessageId: 15471 (Notify)
message PayShopConditionFinishNotify {
  repeated PayShopItem Items = 135;
}

message PhantomConsumeItem {
  int32 IncId = 1;
  int32 count = 2;
  int32 ItemId = 3;
}

// MessageId: 19769 (Request)
message PhantomLevelUpRequest {
  int32 IncId = 177;
  repeated PhantomConsumeItem ConsumeList = 140;
}

// MessageId: 19609 (Response)
message PhantomLevelUpResponse {
  ErrorCode ErrorCode = 190;
  PhantomItem UpdateInfo = 75;
  map<int32, int32> ItemMap = 141;
}

// MessageId: 23591 (Notify)
message PhantomPutOnNotify {
  repeated RolePhantomEquipInfo EquipInfoList = 205;
}

// MessageId: 27684 (Request)
message PhantomPutOnRequest {
  int32 IncId = 210;
  int32 RoleId = 161;
  int32 Pos = 255;
}

// MessageId: 20500 (Response)
message PhantomPutOnResponse {
  ErrorCode ErrorCode = 233;
  repeated RolePhantomEquipInfo EquipInfoList = 141;
}

// MessageId: 15640 (Request)
message Mls {
  repeated int32 eHn = 135;
}

// MessageId: 17153 (Response)
message Sls {
  ErrorCode ErrorCode = 16;
  map<int32, int32> ItemMap = 205;
}

// MessageId: 15016 (Request)
message Els {
  repeated int32 eHn = 134;
}

// MessageId: 27325 (Response)
message yls {
  ErrorCode ErrorCode = 197;
  map<int32, int32> ItemMap = 88;
}

// MessageId: 15630 (Request)
message PhantomRecommendRequest {
  int32 RoleId = 59;
}

// MessageId: 17845 (Response)
message PhantomRecommendResponse {
  ErrorCode ErrorCode = 132;
  int32 RoleId = 97;
  repeated int32 MonsterIdList = 250;
  int32 MainPropId = 39;
  int32 FetterGroupId = 239;
}

// MessageId: 15607 (Request)
message PhantomAutoPutRequest {
  int32 RoleId = 93;
  repeated int32 RecommendedList = 242;
}

// MessageId: 17159 (Response)
message PhantomAutoPutResponse {
  ErrorCode ErrorCode = 14;
  repeated RolePhantomEquipInfo EquipInfoList = 52;
}

// MessageId: 24446 (Notify)
message PhantomItemUpdateNotify {
  repeated PhantomItem UpdateInfo = 32;
}

// MessageId: 17897 (Notify)
message RolePhantomPropUpdateNotify {
  repeated RolePhantomPropInfo Ows2 = 168;
}

// MessageId: 25762 (Request)
message PhantomIdentifyRequest {
  int32 IncrId = 100;
  int32 Count = 57;
}

// MessageId: 24691 (Response)
message PhantomIdentifyResponse {
  ErrorCode ErrorCode = 7;
  PhantomItem UpdateInfo = 189;
}

// MessageId: 17464 (Notify)
message PhantomBattleMaxCostNotify {
  int32 MaxCost = 232;
}

// MessageId: 23697 (Notify)
message PhantomSkinUnlockNotify {
  repeated int32 PhantomSkinList = 113;
}

// MessageId: 21127 (Request)
message PhantomSkinChangeRequest {
  int32 IncrId = 249;
  int32 SkinId = 147;
  bool ChangeDefault = 178;
}

// MessageId: 15616 (Response)
message PhantomSkinChangeResponse {
  ErrorCode ErrorCode = 30;
}

// MessageId: 24045 (Notify)
message qls {
  repeated int32 BBs2 = 218;
  repeated int32 qBs2 = 14;
}

// MessageId: 22565 (Request)
message PhantomRefiningRequest {
  repeated int32 A8n = 185;
}

// MessageId: 21697 (Response)
message PhantomRefiningResponse {
  ErrorCode ErrorCode = 95;
  repeated AddCountItemInfo Items = 251;
  repeated AddCountItemInfo GBs3 = 213;
  repeated PhantomItem OBs3 = 209;
}

// MessageId: 27968 (Request)
message CalabashBatchRefiningRequest {
  repeated int32 IncId = 249;
}

// MessageId: 26163 (Response)
message CalabashBatchRefiningResponse {
  ErrorCode ErrorCode = 69;
  repeated AddCountItemInfo Items = 40;
  repeated AddCountItemInfo GBs3 = 229;
  repeated PhantomItem OBs3 = 9;
}

message FragmentMemoryData {
  int32 Id = 1;
  int32 Flag = 2;
  int64 FinishTime = 3;
}

message FragmentMemoryItem {
  int32 Id = 1;
  repeated FragmentMemoryData Data = 2;
}

// MessageId: 24711 (Request)
message PhotoMemoryRequest {
}

// MessageId: 29455 (Response)
message PhotoMemoryResponse {
  repeated FragmentMemoryItem Item = 164;
}

// MessageId: 26066 (Notify)
message PhotoMemoryUpdateNotify {
  repeated FragmentMemoryItem Item = 234;
}

// MessageId: 20350 (Notify)
message PhotoMemoryCollectUpdateNotify {
  FragmentMemoryData Data = 65;
}

// MessageId: 20860 (Request)
message PhotoMemoryRewardRequest {
  repeated int32 Rewards = 3;
}

// MessageId: 17009 (Response)
message PhotoMemoryRewardResponse {
  int32 Error = 240;
}

message PassiveSkillInfo {
  int64 SkillId = 1;
  int64 SkillCdEndTime = 2;
}

message RolePassiveSkillInfo {
  int32 roleId = 1;
  repeated PassiveSkillInfo PassiveSkillInfoList = 2;
}

// MessageId: 27238 (Notify)
message PassiveSkillNotify {
  repeated RolePassiveSkillInfo RolePassiveSkillInfoList = 61;
}

// MessageId: 19329 (Request)
message UpdatePlayerPassiveSkillRequest {
  int32 RoleId = 183;
  int64 PassiveSkillId = 107;
  int64 CdEndTime = 186;
}

// MessageId: 24502 (Response)
message UpdatePlayerPassiveSkillResponse {
  ErrorCode ErrorCode = 133;
}

// MessageId: 16712 (Notify)
message PlayerVarNotify {
  map<string, VarDefinePb> VarInfos = 223;
}

enum MotionType {
  MotionType_Spurt = 0;
  MotionType_Pullback = 1;
  MotionType_BeLand = 2;
  MotionType_MotionJump = 3;
  MotionType_AirSprint = 4;
  MotionType_BackFlip = 5;
  MotionType_StepAcross = 6;
  MotionType_ClimbTop = 7;
  MotionType_LimitDodge = 8;
  MotionType_CounterAttack = 9;
}

// MessageId: 17358 (Request)
message PlayerMotionRequest {
  int32 Motion = 235;
}

// MessageId: 27179 (Response)
message PlayerMotionResponse {
  ErrorCode ErrorCode = 84;
}

// MessageId: 25699 (Request)
message PressRequest {
  int32 PayloadSize = 231;
  int32 NotifyCount = 201;
  bytes Payload = 136;
}

// MessageId: 26113 (Response)
message PressResponse {
  bytes Payload = 170;
}

// MessageId: 22043 (Notify)
message PressNotify {
  bytes Payload = 111;
}

// MessageId: 20752 (Request)
message PressGameRequest {
  int32 PayloadSize = 142;
  int32 NotifyCount = 246;
  bytes Payload = 184;
}

// MessageId: 27430 (Response)
message PressGameResponse {
  bytes Payload = 18;
}

// MessageId: 18174 (Notify)
message PressGameNotify {
  bytes Payload = 12;
}

// MessageId: 15020 (Request)
message ProgressBarFinishRequest {
  int64 EntityId = 87;
}

// MessageId: 23798 (Response)
message ProgressBarFinishResponse {
  ErrorCode ErrorCode = 102;
}

// MessageId: 16866 (Notify)
message JSPatchNotify {
  string Content = 84;
}

enum QuestState {
  QuestState_InActive = 0;
  QuestState_hTs = 1;
  QuestState_zfs = 2;
  QuestState_Finish = 3;
  QuestState_Delete = 4;
}
message QuestInfo {
  int32 QuestId = 1;
  int32 Status = 2;
}

// MessageId: 25806 (Notify)
message QuestListNotify {
  repeated QuestInfo Quests = 187;
}

// MessageId: 18866 (Notify)
message TraceQuestNotify {
  int32 QuestId = 111;
}

// MessageId: 24193 (Request)
message TraceQuestRequest {
  int32 TraceType = 49;
  int32 QuestId = 175;
  int32 Operate = 89;
}

// MessageId: 29404 (Response)
message TraceQuestResponse {
  int32 ErrorId = 136;
}

// MessageId: 24627 (Notify)
message R0l1 {
  repeated int32 QuestIds = 59;
}

enum r8s1 {
  r8s_Enter = 0;
  r8s_Zbs = 1;
}

// MessageId: 24300 (Request)
message QuestFinishActionRequest {
  int32 QuestId = 19;
  int32 NodeId = 112;
  int32 ActionId = 58;
  int32 ActTime = 35;
}

// MessageId: 21570 (Response)
message QuestFinishActionResponse {
  int32 ErrorId = 119;
}

// MessageId: 29539 (Request)
message QuestActionRequest {
  int32 QuestId = 194;
  int32 NodeId = 144;
  int32 ActionId = 55;
  int32 ActTime = 181;
}

// MessageId: 29705 (Response)
message QuestActionResponse {
  int32 ErrorId = 60;
}

// MessageId: 15407 (Notify)
message QuestReadyListNotify {
  repeated int32 QuestId = 217;
}

// MessageId: 16077 (Notify)
message QuestShowListNotify {
  repeated int32 QuestId = 37;
}

// MessageId: 17895 (Request)
message QuestNpcMoveOverRequest {
  int64 EntityId = 134;
}

// MessageId: 20012 (Response)
message QuestNpcMoveOverResponse {
  int32 ErrorId = 239;
}

// MessageId: 15197 (Notify)
message QuestStateUpdateNotify {
  int32 QuestId = 145;
  int64 TreeIncId = 139;
}

// MessageId: 24607 (Notify)
message QuestFinishActionEndRequest {
  int32 QuestId = 93;
  int32 State = 123;
}

// MessageId: 27063 (Request)
message QuestFinishActionEndResponse {
  repeated int32 QuestId = 19;
}

// MessageId: 16216 (Response)
message E1s {
  int32 ErrorId = 12;
}

// MessageId: 27382 (Notify)
message QuestFinishListNotify {
  repeated int32 QuestId = 58;
}

// MessageId: 15488 (Notify)
message DailyQuestUnlockAreaNotify {
  repeated int32 UnlockAreaIds = 138;
  repeated int32 UnlockInfluenceIds = 125;
  int32 t2s = 210;
  int32 i2s = 188;
  bool r2s = 120;
}

// MessageId: 20888 (Notify)
message DailyQuestStateNotify {
  repeated int32 GetReward = 201;
  map<int32, int32> AllQuest = 241;
}

// MessageId: 16195 (Request)
message DailyQuestChangePreferRequest {
  int32 TargetArea = 252;
  int32 TargetInfluence = 178;
}

// MessageId: 19693 (Response)
message DailyQuestChangePreferResponse {
  int32 ErrorId = 178;
}

// MessageId: 15697 (Request)
message DailyQuestGetRewardRequest {
  repeated int32 QuestId = 82;
}

// MessageId: 24144 (Response)
message DailyQuestGetRewardResponse {
  int32 ErrorId = 182;
  repeated DailyQuestReward Rewards = 80;
}

message DailyQuestReward {
  int32 ItemId = 1;
  int32 ItemCount = 2;
}

// MessageId: 21326 (Notify)
message DailyQuestCancelNotify {
  repeated int32 QuestIds = 215;
}

// MessageId: 15795 (Request)
message RoleQuestAcceptRequest {
  int32 QuestId = 179;
}

// MessageId: 19838 (Response)
message RoleQuestAcceptResponse {
  int32 ErrorId = 169;
}

// MessageId: 16186 (Notify)
message RoleQuestStateNotify {
  int32 UnlockPoint = 219;
  int32 MaxUnlockPoint = 39;
  repeated int32 InProgress = 37;
  repeated int32 Unlock = 103;
  repeated int32 Over = 30;
  int64 LastAddPointTime = 105;
}

// MessageId: 26099 (Notify)
message RoleQuestNewUnlockNotify {
  repeated int32 QuestIds = 44;
}

// MessageId: 18887 (Request)
message RoleQuestPointStateRequest {
}

// MessageId: 20417 (Response)
message RoleQuestPointStateResponse {
  int32 CurrPoint = 123;
  int32 MaxPoint = 164;
  int64 LastAddPointTime = 105;
}

// MessageId: 20509 (Notify)
message DestroyQuestsNotify {
  repeated int32 QuestIds = 224;
}

// MessageId: 27902 (Notify)
message AutoQuestNotify {
  bool IsAuto = 99;
}

// MessageId: 25477 (Request)
message QuestRedDotRequest {
  int32 QuestId = 47;
  int32 Operate = 98;
}

// MessageId: 29224 (Response)
message QuestRedDotResponse {
  int32 ErrorId = 133;
}

// MessageId: 18674 (Notify)
message QuestRedDotNotify {
  repeated int32 QuestId = 203;
}

enum RangeType {
  RangeType_RangeEnter = 0;
  RangeType_RangeLeave = 1;
  RangeType_RangeInit = 2;
}

enum TEl1 {
  TEl_Trigger = 0;
  TEl_Trample = 1;
  TEl_DynamicPortal = 2;
  TEl_EffectArea = 3;
}

message EntityAccessInfo {
  int64 EntityId = 1;
  RangeType RangeType = 2;
  map<int32, int32> Cyl2 = 3;
}

// MessageId: 15977 (Request)
message EntityAccessRangeRequest {
  int64 EntityId = 27;
  repeated int64 EntitiesToCheck = 127;
  RangeType RangeType = 160;
}

// MessageId: 24736 (Response)
message EntityAccessRangeResponse {
  ErrorCode ErrorCode = 246;
  int64 EntityId = 195;
  repeated EntityAccessInfo Info = 187;
}

// MessageId: 19141 (Request)
message PlayerAccessEffectAreaRequest {
  int64 EntityId = 31;
  RangeType RangeType = 234;
}

// MessageId: 26010 (Response)
message PlayerAccessEffectAreaResponse {
  ErrorCode ErrorCode = 204;
  int64 EntityId = 190;
  EntityAccessInfo Info = 154;
}

// MessageId: 29987 (Notify)
message UpdateEntitiesInRangeNotify {
  int64 EntityId = 118;
  repeated int64 EntitiesToUpdate = 114;
  RangeType RangeType = 236;
}

// MessageId: 19437 (Notify)
message UpdatePlayerInRangeNotify {
  int64 EntityId = 194;
  int32 PlayerId = 50;
  RangeType RangeType = 103;
}

enum EntityTransitionType {
  EntityTransitionType_Up = 0;
  EntityTransitionType_Down = 1;
}

// MessageId: 24277 (Notify)
message ChangeEntityTransitionNotify {
  int64 EntityId = 130;
  EntityTransitionType EntityTransition = 196;
}

// MessageId: 27044 (Request)
message InitRangeRequest {
  int64 EntityId = 5;
  repeated int64 EntitiesToRequest = 224;
  bool zKs = 16;
}

// MessageId: 29541 (Response)
message InitRangeResponse {
  ErrorCode ErrorCode = 22;
  int64 EntityId = 232;
  repeated EntityAccessInfo gyl = 48;
  EntityAccessInfo pyl = 175;
}

enum ApplyRechallengeReason {
  ApplyRechallengeReason_Settle = 0;
  ApplyRechallengeReason_Dead = 1;
}

enum RechallengeReason {
  RechallengeReason_Accept = 0;
  RechallengeReason_ActiveRefuse = 1;
  RechallengeReason_TimeOutRefuse = 2;
}

// MessageId: 22674 (Request)
message ApplyRechallengeRequest {
  RechallengeReason Reason = 57;
}

// MessageId: 27318 (Response)
message ApplyRechallengeResponse {
  ErrorCode ErrorCode = 167;
}

// MessageId: 22464 (Notify)
message ReceiveRechallengeNotify {
  int32 PlayerId = 33;
  int32 Result = 208;
}

// MessageId: 28006 (Request)
message ReceiveRechallengeRequest {
  int32 Result = 132;
}

// MessageId: 28343 (Response)
message ReceiveRechallengeResponse {
  ErrorCode ErrorCode = 151;
}

// MessageId: 24919 (Request)
message InviteRechallengeRequest {
}

// MessageId: 22918 (Response)
message InviteRechallengeResponse {
  ErrorCode ErrorCode = 186;
}

// MessageId: 16325 (Notify)
message InviteRechallengeNotify {
  int32 InviterPlayerId = 140;
}

// MessageId: 15621 (Notify)
message ReceiveRechallengePlayerIdsNotify {
  repeated int32 PlayerIds = 217;
}

// MessageId: 27422 (Notify)
message PlayerDeadNotify {
  int32 PlayerId = 139;
  int32 DelaySeconds = 24;
  bool IsAutoRevive = 144;
  int32 ReviveId = 120;
  bool IsLogin = 81;
  bool IsShowRevive = 13;
}

message ReviveRoleInformation {
  int64 EntityId = 1;
  GameplayAttributeData CurHpAttribute = 2;
}

// MessageId: 16317 (Notify)
message PlayerReviveNotify {
  int32 PlayerId = 107;
  int32 ReviveType = 112;
  Vector Location = 79;
  Rotator Rotator = 180;
  repeated ReviveRoleInformation ReviveRoleInfos = 147;
  bool NeedRollbackSubLevel = 144;
  repeated string RollbackSubLevel = 95;
  int32 TeleportId = 3;
  bool SelfRevive = 167;
}

// MessageId: 28494 (Request)
message ReviveRequest {
  bool UseItem = 7;
}

// MessageId: 29591 (Response)
message ReviveResponse {
  ErrorCode ErrorCode = 75;
}

// MessageId: 25759 (Request)
message AddReviveRegionRequest {
  int32 ReviveId = 172;
}

// MessageId: 19937 (Response)
message AddReviveRegionResponse {
  ErrorCode ErrorCode = 232;
}

// MessageId: 23477 (Request)
message RemoveReviveRegionRequest {
  int32 ReviveId = 169;
}

// MessageId: 19990 (Response)
message RemoveReviveRegionResponse {
  ErrorCode ErrorCode = 208;
}

message DeathStatusInfo {
  int32 GroupType = 1;
  LivingStatus LivingStatus = 2;
}

// MessageId: 28775 (Notify)
message AliveStatusNotify {
  int32 PlayerId = 170;
  repeated DeathStatusInfo Info = 233;
}

enum RogueConstVar {
  RogueConstVar_Zero = 0;
}

enum RoguelikeGainDataType {
  RoguelikeGainDataType_Unkonw = 0;
  RoguelikeGainDataType_txs = 1;
  RoguelikeGainDataType_Shop = 2;
  RoguelikeGainDataType_MUs = 3;
  RoguelikeGainDataType_CommonBuff = 4;
  RoguelikeGainDataType_RoleBuff = 5;
  RoguelikeGainDataType_Event = 6;
  RoguelikeGainDataType_BranchBuff = 7;
  RoguelikeGainDataType_Miraclecreation = 8;
}

message AffixEntry {
  int32 Id = 1;
  bool IsUnlock = 2;
  map<int32, int32> ElementDict = 3;
}

message DiscountInfo {
  map<int32, int32> BuffPrice = 1;
  int32 Discounted = 2;
}

message RogueGainEntry {
  oneof r8s1 {
    bool O2s = 7;
  }

  int32 Type = 1;
  int32 index = 2;
  int32 ConfigId = 3;
  map<int32, int32> ElementDict = 4;
  repeated AffixEntry AffixEntryList = 5;
  DiscountInfo DiscountInfo = 6;
  bool IsSelect = 8;
  bool IsNew = 9;
  int32 Cost = 10;
  int32 IsSell = 11;
  bool IsValid = 12;
}

// MessageId: 15118 (Notify)
message RoguelikeCurrencyNotify {
}

// MessageId: 25848 (Notify)
message RoguelikeCurrencyUpdateNotify {
}

// MessageId: 22997 (Notify)
message RoguelikeInfoNotify {
  oneof u8s {
    RogueGainEntry j2s = 40;
  }

  RogueGainEntry RoleEntry = 160;
  repeated RogueGainEntry BuffEntryList = 239;
  map<int32, int32> ElementDict = 162;
  repeated RogueGainEntry PhantomEntry = 102;
}

// MessageId: 19852 (Request)
message RoguelikeRefreshGainRequest {
  int32 BindId = 121;
  int32 Layer = 157;
}

// MessageId: 17199 (Response)
message RoguelikeRefreshGainResponse {
  ErrorCode ErrorCode = 138;
  repeated string ErrorParams = 166;
  RoguelikeChooseData RoguelikeChooseData = 192;
}

// MessageId: 29185 (Request)
message RoguelikeChooseDataRequest {
  int32 index = 53;
  int32 Layer = 40;
}

message RoguelikeChooseData {
  int32 index = 1;
  int32 Type = 2;
  int32 MaxTime = 3;
  int32 UseTime = 4;
  int32 EventId = 5;
  repeated RogueGainEntry RogueGainEntryList = 6;
  int32 Layer = 7;
  bool IsSelect = 8;
  repeated o5s2 Z2s = 9;
}

// MessageId: 26454 (Response)
message RoguelikeChooseDataResponse {
  ErrorCode ErrorCode = 19;
  repeated string ErrorParams = 125;
  RoguelikeChooseData RoguelikeChooseData = 200;
}

// MessageId: 25465 (Notify)
message RoguelikeChooseDataNotify {
  repeated RoguelikeChooseData RoguelikeChooseDataList = 242;
}

// MessageId: 16435 (Request)
message RoguelikeChooseDataResultRequest {
  int32 BindId = 240;
  int32 index = 207;
  int32 Layer = 13;
}

// MessageId: 16688 (Response)
message RoguelikeChooseDataResultResponse {
  ErrorCode ErrorCode = 17;
  repeated string ErrorParams = 231;
  RoguelikeChooseDataNotify RoguelikeChooseDataNotify = 158;
  repeated RogueGainEntry RogueGainEntryList = 93;
  bool IsSelect = 8;
  repeated RogueGainEntry tqs1 = 155;
  DOLLARna DOLLARna = 126;
}

message DOLLARna {
  repeated Yna Wna = 1;
}

message Yna {
  Qna Qna = 1;
  repeated Qna Kna = 2;
}

message Qna {
  oneof Data {
    RoguelikeEventGainNotify RoguelikeEventGainNotify = 1;
    ItemObtainNotify ItemObtainNotify = 2;
  }

}

// MessageId: 23999 (Notify)
message RoguelikeEventGainNotify {
  repeated RogueGainEntry RogueGainEntryList = 241;
  repeated RogueGainEntry Xna = 130;
}

// MessageId: 25108 (Request)
message RoguelikeLastInfoRequest {
}

message RoguelikeLastInfo {
  int32 InstId = 2;
  int32 CurLayer = 3;
  int32 MaxLayer = 4;
}

// MessageId: 21009 (Response)
message RoguelikeLastInfoResponse {
  ErrorCode ErrorCode = 136;
  bool HasData = 80;
  repeated RoguelikeLastInfo RoguelikeLastInfos = 19;
}

// MessageId: 23616 (Request)
message RoguelikePopularEntriesInfoRequest {
  int32 InstId = 193;
  int32 SeasonId = 249;
}

// MessageId: 23686 (Response)
message RoguelikePopularEntriesInfoResponse {
  ErrorCode ErrorCode = 130;
  sqs sqs = 111;
}

// MessageId: 23324 (Request)
message RoguelikePopularEntriesChangeRequest {
  int32 InstId = 231;
  repeated int32 BHn = 243;
  int32 SeasonId = 201;
}

// MessageId: 26672 (Response)
message RoguelikePopularEntriesChangeResponse {
  ErrorCode ErrorCode = 45;
}

message sqs {
  int32 InstId = 1;
  repeated int32 BHn = 2;
  int32 SeasonId = 3;
}

// MessageId: 20155 (Request)
message RoguelikeStartRequest {
  bool ContinueLastProgress = 45;
  int32 InstId = 168;
  repeated int32 RoleIds = 35;
  int32 SeasonId = 218;
}

// MessageId: 25057 (Response)
message RoguelikeStartResponse {
  ErrorCode ErrorCode = 168;
}

// MessageId: 22728 (Request)
message RoguelikeQuitRequest {
}

// MessageId: 25559 (Response)
message RoguelikeQuitResponse {
  ErrorCode ErrorCode = 173;
}

message RoguelikeResultInfo {
  oneof u8s {
    RogueGainEntry j2s = 10;
  }

  bool IsNewRecord = 1;
  uint32 Time = 2;
  int32 CurLayer = 3;
  int32 MaxLayer = 4;
  int32 KillEnemyCount = 5;
  int32 GetGainCount = 6;
  map<int32, int32> Rewards = 8;
  RogueGainEntry RoleEntry = 9;
  bool IsDeadTrigger = 11;
  int32 InstId = 12;
  int32 TotalCostTime = 13;
  int32 PhantomEntry = 14;
}

// MessageId: 18626 (Notify)
message RoguelikeResultNotify {
  RoguelikeResultInfo RoguelikeResultInfo = 168;
}

// MessageId: 16931 (Request)
message RoguelikeResultRequest {
  int32 InstId = 235;
}

// MessageId: 24461 (Response)
message RoguelikeResultResponse {
  ErrorCode ErrorCode = 185;
  RoguelikeResultInfo RoguelikeResultInfo = 80;
}

// MessageId: 17033 (Notify)
message RoguelikeSubLevelNotify {
  string LoadSubLevel = 161;
  string UnLoadSubLevel = 186;
  float X = 203;
  float Y = 92;
  float gqs2 = 144;
  float fqs = 140;
  repeated string vyl2 = 184;
  repeated string Myl2 = 112;
}

// MessageId: 16290 (Request)
message T_s {
}

// MessageId: 17355 (Response)
message L_s {
  ErrorCode ErrorCode = 202;
}

enum RoguelikeRoomType {
  RoguelikeRoomType_Normal = 0;
  RoguelikeRoomType_Special = 1;
  RoguelikeRoomType_Boss = 2;
}

// MessageId: 20098 (Notify)
message RoguelikeRoomInfoNotify {
  int32 CurLayer = 98;
  int32 MaxLayer = 31;
  int32 RoguelikeRoomTypeId = 239;
  int32 SkyBoxId = 41;
  int32 Syl1 = 87;
}

// MessageId: 26307 (Request)
message RoguelikeTalentInfoRequest {
  int32 SeasonId = 96;
}

enum m8s {
  m8s_CMs = 0;
  m8s_Active = 1;
}

// MessageId: 29293 (Response)
message RoguelikeTalentInfoResponse {
  ErrorCode ErrorCode = 156;
  map<int32, int32> TalentSkillDict = 150;
}

// MessageId: 28787 (Request)
message RoguelikeTalentLevelUpRequest {
  int32 SkillId = 25;
}

// MessageId: 23161 (Response)
message RoguelikeTalentLevelUpResponse {
  ErrorCode ErrorCode = 201;
  int32 Level = 50;
}

// MessageId: 20925 (Notify)
message RoguelikeTalentUnlockNotify {
  int32 SkillId = 13;
}

message RoguelikeToken {
  int32 Id = 1;
  bool IsReceive = 2;
}

message SeasonReward {
  int32 Id = 1;
  bool IsReceive = 2;
}

message SeasonData {
  int32 SeasonId = 1;
  int64 StartTime = 2;
  int64 EndTime = 3;
  repeated RoguelikeToken RoguelikeTokenList = 4;
  repeated SeasonReward SeasonRewardList = 5;
  int32 TokenItemCount = 6;
}

// MessageId: 21876 (Request)
message RoguelikeSeasonDataRequest {
  int32 SeasonId = 124;
}

// MessageId: 25146 (Response)
message RoguelikeSeasonDataResponse {
  ErrorCode ErrorCode = 129;
  SeasonData SeasonData = 4;
}

// MessageId: 18317 (Request)
message RoguelikeTokenReceiveRequest {
  int32 SeasonId = 212;
  int32 Id = 34;
}

// MessageId: 18173 (Response)
message RoguelikeTokenReceiveResponse {
  ErrorCode ErrorCode = 31;
  map<int32, int32> ItemMap = 227;
}

// MessageId: 25016 (Request)
message RoguelikeSeasonRewardReceiveRequest {
  int32 SeasonId = 141;
  repeated int32 index = 170;
}

// MessageId: 20723 (Response)
message RoguelikeSeasonRewardReceiveResponse {
  ErrorCode ErrorCode = 3;
  map<int32, int32> ItemMap = 42;
}

// MessageId: 18415 (Request)
message RoguelikeGiveUpGainRequest {
  int32 BindId = 146;
  int32 Layer = 39;
}

// MessageId: 19421 (Response)
message RoguelikeGiveUpGainResponse {
  int32 BindId = 189;
  ErrorCode ErrorCode = 80;
  map<int32, int32> ItemMap = 77;
}

enum RoguelikeGainType {
  RoguelikeGainType_GainDataAdd = 0;
  RoguelikeGainType_GainDataDelete = 1;
  RoguelikeGainType_GainDataUpdate = 2;
}

// MessageId: 19183 (Notify)
message RoguelikeGainDataUpdateNotify {
  RoguelikeGainType Type = 132;
  int32 Index = 117;
  RogueGainEntry RogueGainEntry = 223;
}

// MessageId: 19533 (Request)
message RoguelikeTrialRoleInfoRequest {
  int32 SeasonId = 26;
  repeated int32 PHn = 242;
  repeated int32 uCl = 142;
}

// MessageId: 27194 (Response)
message RoguelikeTrialRoleInfoResponse {
  ErrorCode ErrorCode = 125;
  repeated int32 Rqs = 254;
  int32 PJs = 168;
  int32 wJs = 85;
  int32 RoleLevel = 227;
  int32 WeaponLevel = 54;
  repeated AEl yyl = 52;
}

message AEl {
  int32 InstId = 1;
  repeated int32 Rqs = 2;
  repeated int32 RoleIds = 3;
  repeated int32 Eyl = 4;
}

// MessageId: 21083 (Notify)
message RogueCharacterRoomSelectViewNotify {
  int32 Index = 1;
  repeated int32 RoomIdList = 152;
}

// MessageId: 18050 (Request)
message RoguelikeRoleRoomSelectRequest {
  int32 index = 102;
  int32 Mra = 222;
}

// MessageId: 21778 (Response)
message RoguelikeRoleRoomSelectResponse {
  ErrorCode ErrorCode = 154;
}

message Pqs {
  int32 SkillId = 1;
  repeated int64 Dqs = 2;
}

message f8s {
  int32 Aqs = 1;
  Pqs Pqs = 2;
}

message bqs {
  repeated Pqs Uqs = 1;
  repeated f8s wqs = 2;
}

message v8s {
  int32 xqs = 1;
  bqs bqs = 2;
}

message Gqs1 {
  bqs Bqs = 1;
  repeated v8s qqs = 2;
}

// MessageId: 15046 (Notify)
message PlayerSkillInfoPbNotify {
  Gqs1 Gqs = 189;
}

// MessageId: 28125 (Request)
message Cms1 {
  int64 EntityId = 90;
}

// MessageId: 24093 (Response)
message gms1 {
  ErrorCode ErrorCode = 70;
}

enum SceneStepStatus {
  SceneStepStatus_Accepted = 0;
  SceneStepStatus_Finished = 1;
  SceneStepStatus_Failed = 2;
}

message SceneStepConditionProgress {
  int32 ConditionId = 1;
  int32 ProgressNum = 2;
}

message SceneStepPlayerProgress {
  int32 PlayerId = 1;
  repeated SceneStepConditionProgress Progress = 2;
}

message SceneStepInfo {
  int32 StepId = 1;
  int32 Status = 2;
  repeated SceneStepConditionProgress Progress = 3;
  repeated SceneStepPlayerProgress MultiPlayerProgress = 4;
}

message SceneStepGroupInfo {
  int32 StepGroupId = 1;
  repeated SceneStepInfo StepGroupInfo = 2;
}

// MessageId: 17305 (Notify)
message SceneStepGroupInfoNotify {
  repeated SceneStepGroupInfo StepGroupInfo = 129;
}

// MessageId: 23267 (Notify)
message SceneStepInfoNotify {
  int32 StepGroupId = 197;
  SceneStepInfo StepInfo = 141;
}

// MessageId: 16176 (Request)
message TargetGearHitRequest {
  int64 EntityId = 53;
}

// MessageId: 25279 (Response)
message TargetGearHitResponse {
  ErrorCode ErrorCode = 249;
}

// MessageId: 26268 (Request)
message ThrowDamageRequest {
  int64 EntityId = 186;
  int64 CalculateId = 51;
}

// MessageId: 28610 (Response)
message ThrowDamageResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 26682 (Notify)
message ThrowDamageNotify {
  int64 EntityId = 214;
  int32 Durability = 18;
}

// MessageId: 20944 (Notify)
message ThrowDamageRecoveryNotify {
  int64 EntityId = 244;
  int32 Durability = 24;
}

// MessageId: 16998 (Request)
message GetRewardTreasureBoxRequest {
  int64 EntityId = 69;
}

// MessageId: 21955 (Response)
message GetRewardTreasureBoxResponse {
  ErrorCode ErrorCode = 232;
}

message MobileButtonSetting {
  int32 Id = 1;
  float Size = 2;
  float Transparency = 3;
  float ScreenX = 4;
  float ScreenY = 5;
  int32 ButtonLevel = 6;
  int32 PanelLevel = 7;
}

// MessageId: 18197 (Notify)
message SettingNotify {
  repeated MobileButtonSetting MobileButtonSettings = 150;
}

// MessageId: 28513 (Request)
message MobileButtonSettingUpdateRequest {
  repeated MobileButtonSetting MobileButtonSettings = 155;
}

// MessageId: 27858 (Response)
message MobileButtonSettingUpdateResponse {
  ErrorCode ErrorCode = 123;
}

// MessageId: 18526 (Request)
message LanguageSettingUpdateRequest {
  int32 Language = 47;
}

// MessageId: 25788 (Response)
message LanguageSettingUpdateResponse {
  ErrorCode ErrorCode = 143;
}

// MessageId: 25316 (Request)
message ChangeServerPlayStationPlayOnlyStateRequest {
  bool CrossPlayEnabled = 230;
}

// MessageId: 29059 (Response)
message ChangeServerPlayStationPlayOnlyStateResponse{
  ErrorCode ErrorCode = 207;
}

// MessageId: 26602 (Request)
message ServerPlayStationPlayOnlyStateRequest {
}

// MessageId: 26992 (Response)
message ServerPlayStationPlayOnlyStateResponse {
  bool PlayStationPlayOnlyState = 11;
}

message DEl2 {
  repeated string Cih = 1;
}

message wEl {
  string Mih = 1;
  repeated string Cih = 2;
  int32 Version = 3;
}

message UEl2 {
  string Sih = 1;
  map<string, int32> Iyl1 = 2;
  int32 Version = 3;
}

message Ayl1 {
  string Mih = 1;
  repeated DEl2 Tyl = 2;
  int32 Version = 3;
}

message Dyl1 {
  string Sih = 1;
  repeated DEl2 Tyl = 2;
  int32 Version = 3;
}

enum PEl1 {
  PEl_Mouse = 0;
  PEl_uVn = 1;
}

message hih {
  repeated xEl _ih = 1;
}

message xEl {
  map<string, wEl> Lyl1 = 1;
  map<string, uEl1> Ryl = 2;
  map<string, Ayl1> Ayl1 = 3;
  map<string, Dyl1> Dyl1 = 4;
  int32 uih1 = 5;
  string Tih = 6;
}

// MessageId: 29590 (Request)
message InputSettingRequest {
}

// MessageId: 26604 (Response)
message InputSettingResponse {
  hih hih = 174;
}

// MessageId: 23137 (Request)
message InputSettingUpdateRequest {
  hih hih = 151;
}

// MessageId: 19371 (Response)
message InputSettingUpdateResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 29179 (Notify)
message InputSettingNotify {
  hih hih = 102;
}

message T8s {
  int32 Id = 1;
  int32 BoughtCount = 2;
  int32 Lock = 3;
}

message ShoppMoneyInfo {
  int32 MoneyId = 1;
  int32 MoneyNum = 2;
}

message R8s2 {
  int32 ShopId = 1;
  int32 Id = 2;
}

message ShopItemInfoNew {
  int32 Id = 1;
  int32 BoughtCount = 2;
  bool Lock = 3;
  int32 ItemId = 4;
  int32 ItemNum = 5;
  string CondText = 6;
  repeated ShoppMoneyInfo MoneyList = 7;
  uint32 BeginTime = 8;
  uint32 EndTime = 9;
  int32 LimitNum = 10;
  repeated ShoppMoneyInfo OriginalMoneyList = 11;
  string Label = 12;
  string SwitchText = 13;
  string PurchaseText = 14;
}

message ShopInfo {
  int32 ShopId = 1;
  uint32 UpdateTime = 2;
  repeated ShopItemInfoNew ItemInfoList = 3;
}

// MessageId: 20127 (Request)
message ShopInfoRequest {
  string VersionStr = 252;
}

// MessageId: 27091 (Response)
message ShopInfoResponse {
  ErrorCode ErrorCode = 168;
  string VersionStr = 79;
  repeated ShopInfo ShopList = 78;
}

// MessageId: 18138 (Notify)
message ShopInfoNotify {
  string VersionStr = 146;
  repeated ShopInfo ShopList = 81;
}

// MessageId: 22969 (Request)
message ShopBuyRequest {
  string VersionStr = 234;
  int32 ShopId = 169;
  int32 Id = 231;
  int32 Num = 95;
  int32 MoneyId = 185;
  int64 InteractEntityId = 103;
}

// MessageId: 23331 (Response)
message ShopBuyResponse {
  ErrorCode ErrorCode = 158;
  int32 ShopId = 142;
  int32 Id = 235;
  int32 BoughtCount = 123;
}

// MessageId: 21883 (Request)
message ShopUpdateRequest {
  int32 ShopId = 134;
}

// MessageId: 25635 (Response)
message ShopUpdateResponse {
  ErrorCode ErrorCode = 159;
  ShopInfo Info = 70;
}

// MessageId: 20192 (Notify)
message ShopUnlockNotify {
  repeated R8s2 ABs = 130;
}

enum SneakState {
  SneakState_Open = 0;
  SneakState_Close = 1;
}

enum SneakFinishType {
  SneakFinishType_SneakSuccess = 0;
  SneakFinishType_SneakFail = 1;
}

// MessageId: 16891 (Notify)
message SceneItemDurabilityChangeNotify {
  int32 iGs1 = 170;
  int32 State = 252;
  repeated int64 EntityIds = 176;
}

// MessageId: 17259 (Request)
message Qms {
  int32 iGs1 = 63;
  int32 rGs2 = 233;
}

// MessageId: 22957 (Response)
message Xms {
  ErrorCode ErrorCode = 208;
}

// MessageId: 21397 (Notify)
message Yms {
  int32 oGs3 = 20;
}

// MessageId: 29213 (Request)
message SpecialItemEquipRequest {
  int32 ItemId = 169;
}

// MessageId: 25895 (Response)
message SpecialItemEquipResponse {
  ErrorCode ErrorCode = 254;
}

// MessageId: 29869 (Request)
message Zms {
}

// MessageId: 16877 (Response)
message eCs {
  ErrorCode ErrorCode = 29;
}

// MessageId: 27838 (Request)
message SynthesisInfoRequest {
}

// MessageId: 15658 (Response)
message SynthesisInfoResponse {
  ErrorCode ErrorCode = 247;
  repeated OneSynthesisInfo SynthesisInfoList = 14;
  repeated OneSynthesisConfig SynthesisConfigs = 52;
  SynthesisLevelInfo LevelInfo = 197;
  int64 LimitRefreshTime = 54;
}

message SynthesisLevelInfo {
  int32 Level = 1;
  int32 TotalProficiency = 2;
}

message OneSynthesisInfo {
  int32 Id = 1;
  int32 count = 2;
  int32 LastRoleId = 3;
  int32 LimitCount = 4;
  int32 LimitSynthesisCount = 5;
  int64 LimitBeginTime = 6;
  int64 LimitEndTime = 7;
}

message OneSynthesisConfig {
  int32 Id = 1;
  int64 LimitBeginTime = 2;
  int64 LimitEndTime = 3;
}

// MessageId: 16049 (Request)
message SynthesisItemRequest {
  int32 Id = 213;
  int32 roleId = 97;
  int32 count = 195;
  int64 InteractEntityId = 181;
}

// MessageId: 18714 (Response)
message SynthesisItemResponse {
  ErrorCode ErrorCode = 33;
  int32 Id = 125;
  repeated SingleItemInfo ItemInfos = 171;
  int32 ActiveSkillType = 176;
  repeated SingleItemInfo ExtraItemInfos = 252;
  int32 roleId = 244;
}

// MessageId: 19451 (Notify)
message SynthesisInfoUpdateNotify {
  repeated OneSynthesisInfo SynthesisInfoList = 247;
  repeated int32 HideSynthesisIdList = 210;
}

// MessageId: 15677 (Request)
message SynthesisLevelRewardRequest {
}

// MessageId: 23422 (Response)
message SynthesisLevelRewardResponse {
  ErrorCode ErrorCode = 98;
  SynthesisLevelInfo LevelInfo = 43;
}

// MessageId: 26210 (Notify)
message SynthesisLevelUpdateNotify {
  oneof B8s {
    SynthesisLevelInfo LevelInfo = 92;
  }

}

// MessageId: 26979 (Request)
message SynthesisFormulaUnlockRequest {
  int32 Id = 9;
}

// MessageId: 27616 (Response)
message SynthesisFormulaUnlockResponse {
  ErrorCode ErrorCode = 91;
  int32 Id = 131;
}

message TemporaryTeleportInfo {
  int32 MarkId = 1;
  int64 temporaryTeleportId = 2;
  int32 IsTrace = 3;
  int32 InstId = 4;
  Vector Pos = 5;
  Rotator Rot = 6;
  Vector PlayerTeleportPos = 7;
}

// MessageId: 16193 (Notify)
message TemporaryTeleportAllInfoNotify {
  repeated TemporaryTeleportInfo AllTemporaryTeleportInfo = 74;
}

// MessageId: 22241 (Notify)
message AddTemporaryTeleportInfoNotify {
  TemporaryTeleportInfo TemporaryTeleportInfo = 237;
}

// MessageId: 28869 (Notify)
message RemoveTemporaryTeleportNotify {
  int64 temporaryTeleportId = 203;
}

// MessageId: 20759 (Notify)
message TemporaryTeleportChangeNotify {
  TemporaryTeleportInfo TemporaryTeleportInfo = 232;
}

// MessageId: 17655 (Request)
message RemoveTemporaryTeleportRequest {
  int64 temporaryTeleportId = 103;
}

// MessageId: 22700 (Response)
message RemoveTemporaryTeleportResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 26324 (Request)
message TeleportToTargetRequest {
  int64 temporaryTeleportId = 25;
  Rotator Rot = 9;
}

// MessageId: 20681 (Response)
message TeleportToTargetResponse {
  ErrorCode ErrorCode = 233;
}

// MessageId: 23443 (Request)
message hpl1 {
  Vector Pos = 125;
  Rotator Rot = 131;
}

// MessageId: 25441 (Response)
message _pl {
  ErrorCode ErrorCode = 160;
  int64 temporaryTeleportId = 208;
}

// MessageId: 20225 (Notify)
message ThirdPartySharedNotify {
  repeated int32 SharedIds = 161;
}

// MessageId: 25641 (Request)
message ThirdPartyShareRequest {
  int32 SharedId = 114;
}

// MessageId: 24937 (Response)
message ThirdPartyShareResponse {
  ErrorCode ErrorCode = 227;
}

// MessageId: 25724 (Notify)
message TimeResetNotify {
  int32 S0a = 226;
}

// MessageId: 17449 (Request)
message TimelineTraceStartRequest {
  int64 EntityId = 246;
  int32 index = 251;
}

message ControlPointData {
  int32 ControlPointIndex = 1;
  bool LeftEnable = 2;
  bool RightEnable = 3;
}

// MessageId: 27788 (Response)
message TimelineTraceStartResponse {
  ErrorCode ErrorCode = 107;
  int32 index = 242;
  int32 ControlPoint = 23;
  repeated int64 EntityIds = 190;
  repeated ControlPointData PointDatas = 217;
}

// MessageId: 26670 (Request)
message TimelineTraceControlRequest {
  int64 EntityId = 37;
  bool Forward = 201;
}

// MessageId: 20572 (Response)
message TimelineTraceControlResponse {
  ErrorCode ErrorCode = 176;
  int32 ControlPoint = 224;
}

// MessageId: 25893 (Request)
message TimelineTraceExitRequest {
  int64 EntityId = 101;
}

// MessageId: 20900 (Response)
message TimelineTraceExitResponse {
  ErrorCode ErrorCode = 203;
}

// MessageId: 16238 (Request)
message TimeCheckRequest {
  int64 ClientTime = 67;
  float Dilation = 119;
  float RDilation = 31;
}

// MessageId: 19242 (Notify)
message KCs2 {
  int64 ClientTime = 88;
  int64 ServerTime = 164;
  int64 ServerStopTime = 198;
  int64 SceneStopTime = 87;
  int64 wyl2 = 100;
}

// MessageId: 26386 (Response)
message TimeCheckResponse {
  ErrorCode ErrorCode = 107;
  int64 ClientTime = 13;
  int64 ServerTime = 210;
  int64 ServerStopTime = 252;
  int64 SceneStopTime = 114;
  int64 wyl2 = 247;
}

message TowerInfo {
  int32 CurrentSeason = 1;
  int32 DataSeason = 2;
  repeated TowerDifficultyPb TowerDifficulties = 3;
  int64 BeginTime = 4;
  int64 EndTime = 5;
  int32 MaxUnlockDifficulty = 6;
}

message TowerDifficultyPb {
  int32 Difficulty = 1;
  repeated int32 RewardIndex = 2;
  repeated TowerAreaPb TowerAreas = 3;
  int32 MaxStar = 4;
}

message TowerAreaPb {
  int32 AreaNum = 1;
  repeated TowerFloorPb TowerFloors = 2;
}

message TowerFloorPb {
  int32 TowerConfigId = 1;
  int32 Star = 2;
  repeated TowerRolePb Formation = 4;
  repeated int32 AGs2 = 5;
}

message TowerRolePb {
  int32 RoleId = 1;
  int32 LeaveSkillId = 2;
}

message TowerRecommendRole {
  int32 RoleId = 1;
  int32 LeaveSkillId = 2;
  int32 Level = 3;
}

message TowerRecommendFormation {
  repeated TowerRecommendRole Formation = 1;
  int32 Usage = 2;
}

// MessageId: 24791 (Request)
message TowerRequest {
}

// MessageId: 20395 (Response)
message TowerResponse {
  TowerInfo TowerInfo = 154;
}

// MessageId: 23421 (Request)
message TowerSeasonUpdateRequest {
}

// MessageId: 20327 (Response)
message TowerSeasonUpdateResponse {
  oneof DOLLAR8s {
    TowerInfo TowerInfo = 204;
  }

  int32 MaxUnlockDifficulty = 116;
}

// MessageId: 20134 (Request)
message TowerFormationRecommendRequest {
  int32 TowerConfigId = 209;
}

// MessageId: 22564 (Response)
message TowerFormationRecommendResponse {
  ErrorCode ErrorCode = 148;
  bool NeedUpdateSeason = 189;
  int32 TowerConfigId = 140;
  repeated TowerRecommendFormation Formations = 87;
}

// MessageId: 15876 (Request)
message TowerRewardRequest {
  int32 Difficulty = 217;
  int32 RewardIndex = 169;
}

// MessageId: 25957 (Response)
message TowerRewardResponse {
  ErrorCode ErrorCode = 58;
  bool NeedUpdateSeason = 124;
}

// MessageId: 24693 (Request)
message TowerStartRequest {
  int32 TowerConfigId = 85;
  repeated TowerRolePb Formation = 77;
}

// MessageId: 15396 (Response)
message TowerStartResponse {
  ErrorCode ErrorCode = 51;
  bool NeedUpdateSeason = 99;
}

// MessageId: 22176 (Request)
message TowerResetRequest {
  int32 TowerConfigId = 217;
}

// MessageId: 18588 (Response)
message TowerResetResponse {
  ErrorCode ErrorCode = 70;
  int32 TowerConfigId = 129;
  bool NeedUpdateSeason = 52;
}

// MessageId: 29744 (Request)
message TowerApplyFloorDataRequest {
  bool Apply = 83;
}

// MessageId: 16312 (Response)
message TowerApplyFloorDataResponse {
  ErrorCode ErrorCode = 218;
  bool NeedUpdateSeason = 114;
}

// MessageId: 15683 (Notify)
message TowerEndNotify {
  bool NeedUpdateSeason = 119;
  TowerFloorPb CurrentFloorData = 190;
  bool Success = 214;
}

// MessageId: 15068 (Notify)
message TowerFloorUpdateNotify {
  repeated TowerFloorPb TowerFloors = 33;
}

// MessageId: 19321 (Notify)
message TowerDifficultyUpdateNotify {
  repeated TowerDifficultyPb TowerDifficulties = 163;
}

// MessageId: 23498 (Notify)
message TowerInfoUpdateNotify {
  TowerInfo TowerInfo = 97;
}

// MessageId: 15676 (Request)
message TowerGuideActivityRewardRequest {
  int32 TowerGuideId = 140;
}

// MessageId: 19359 (Response)
message TowerGuideActivityRewardResponse {
  ErrorCode ErrorCode = 198;
}

// MessageId: 17337 (Request)
message TowerGuideActivityInfoRequest {
}

// MessageId: 26017 (Response)
message TowerGuideActivityInfoResponse {
  repeated int32 TowerGuideId = 59;
}

message DOLLARGs {
  int32 Level = 1;
  KGs4 BGs = 2;
}

message eDOLLARs {
  int32 Id = 1;
  int32 Num = 2;
}

enum iOs2 {
  iOs_TrackMoonEntrust = 0;
  iOs_TrackMoonRole = 1;
  iOs_TrackMoonBuild = 2;
}

enum H8s {
  H8s_TrackMoonTargetRunning = 0;
  H8s_TrackMoonTargetFinish = 1;
  H8s_TrackMoonTargetTaken = 2;
}

message j8s {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  int32 Status = 4;
}

enum bEl {
  bEl_Bad = 0;
  bEl_Normal = 1;
  bEl_Good = 2;
}

message W8s {
  int32 roleId = 1;
  int32 Result = 2;
}

message KGs4 {
  int32 roleId = 1;
  int32 GGs2 = 2;
  int32 OGs2 = 3;
  int32 kGs3 = 4;
  int32 Level = 5;
}

message HGs {
  int32 W6n = 1;
  int32 Level = 2;
  bool IsUnlock = 3;
}

message VGs1 {
  int32 X6n = 1;
  bool NGs1 = 2;
  int32 FGs2 = 3;
}

message rOs1 {
  oneof Data {
    VGs1 VGs = 1;
    DOLLARGs DOLLARGs = 2;
    HGs HGs = 3;
  }

}

// MessageId: 24992 (Request)
message MoonChasingRoleTrainRequest {
  int32 RoleId = 170;
  int32 TrainType = 141;
}

// MessageId: 19185 (Response)
message MoonChasingRoleTrainResponse {
  ErrorCode ErrorCode = 186;
  bool IsMoreSuccessful = 121;
}

// MessageId: 26513 (Request)
message MoonChasingAcceptDelegateRequest {
  int32 DelegationId = 59;
  repeated int32 RoleIds = 104;
}

// MessageId: 22165 (Response)
message MoonChasingAcceptDelegateResponse {
  bool IsTriggerEvent = 156;
  int32 EvaluateLevel = 235;
  repeated KGs4 KGs = 32;
  repeated W8s QGs = 185;
  int32 Gold = 19;
  int32 Wish = 250;
  int32 JGs2 = 253;
  int32 TriggerEventRoleId = 195;
  VGs1 DelegationData = 77;
  ErrorCode ErrorCode = 234;
}

// MessageId: 26037 (Request)
message MoonChasingInvestRequest {
  int32 RoleId = 110;
  int32 Amount = 73;
}

// MessageId: 23463 (Response)
message MoonChasingInvestResponse {
  ErrorCode ErrorCode = 189;
  int32 XGs1 = 232;
  bool Success = 105;
  int32 WGs3 = 128;
  repeated KGs4 KGs = 63;
  int32 JGs2 = 243;
  int32 Uyl = 130;
}

// MessageId: 25202 (Request)
message MoonChasingAllDelegationDataRequest {
}

// MessageId: 21722 (Response)
message MoonChasingAllDelegationDataResponse {
  repeated VGs1 DelegationData = 227;
}

// MessageId: 17400 (Request)
message MoonChasingAllEditTeamDataRequest {
}

// MessageId: 23162 (Response)
message MoonChasingAllEditTeamDataResponse {
  repeated DOLLARGs eOs = 46;
}

// MessageId: 26824 (Request)
message MoonChasingAllBuildingDataRequest {
}

// MessageId: 25329 (Response)
message MoonChasingAllBuildingDataResponse {
  repeated HGs tOs = 160;
}

// MessageId: 15358 (Request)
message MoonChasingBuildingLevelUpRequest {
  int32 BuildingId = 218;
}

// MessageId: 28366 (Response)
message MoonChasingBuildingLevelUpResponse {
  ErrorCode ErrorCode = 15;
  HGs HGs = 124;
  int32 CurrentPopularity = 179;
}

// MessageId: 16073 (Request)
message MoonChasingBuildingUnLockRequest {
  int32 BuildingId = 22;
}

// MessageId: 25112 (Response)
message MoonChasingBuildingUnLockResponse {
  ErrorCode ErrorCode = 214;
  int32 CurrentPopularity = 219;
}

// MessageId: 28300 (Notify)
message Sfs2 {
  int32 iOs2 = 85;
  rOs1 rOs = 176;
}

// MessageId: 17018 (Request)
message MoonChasingTrackMoonTargetRewardRequest {
  int32 Id = 114;
}

// MessageId: 26435 (Response)
message MoonChasingTrackMoonTargetRewardResponse {
  ErrorCode ErrorCode = 218;
}

// MessageId: 21546 (Notify)
message MoonChasingAllRewardTargetData {
  repeated j8s oOs = 75;
}

// MessageId: 25922 (Request)
message MoonChasingTrackMoonMemoryInfoRequest {
}

// MessageId: 23158 (Response)
message MoonChasingTrackMoonMemoryInfoResponse {
  ErrorCode ErrorCode = 86;
  int32 j7s1 = 6;
  int32 W7s2 = 27;
  int32 Q7s2 = 59;
  int32 K7s2 = 203;
  eDOLLARs X7s = 182;
  eDOLLARs Y7s = 88;
  eDOLLARs J7s2 = 186;
}

// MessageId: 27097 (Request)
message MoonChasingTrackMoonHandbookRewardRequest {
  repeated int32 Ids = 235;
}

// MessageId: 29749 (Response)
message MoonChasingTrackMoonHandbookRewardResponse {
  repeated int32 Ids = 244;
}

// MessageId: 20880 (Notify)
message MoonChasingTrackMoonHandbookRewardNotify {
  repeated int32 Ids = 230;
}

// MessageId: 16480 (Notify)
message MoonChasingEditTeamDataNotify {
  repeated DOLLARGs exs = 230;
}

// MessageId: 29432 (Request)
message MoonChasingBuildingBuildFlowRequest {
  int32 BuildingId = 95;
}

// MessageId: 18630 (Response)
message MoonChasingBuildingBuildFlowResponse {
  ErrorCode ErrorCode = 200;
}

// MessageId: 27654 (Notify)
message MoonChasingTargetGetCountNotify {
  int32 TargetGetCount = 223;
}

// MessageId: 22528 (Request)
message MoonChasingTrackMoonActivityTargetRewardRequest {
  int32 Id = 222;
  int32 ActivityId = 99;
}

// MessageId: 26447 (Response)
message MoonChasingTrackMoonActivityTargetRewardResponse {
  ErrorCode ErrorCode = 218;
}

// MessageId: 18200 (Request)
message TurntableCompleteRequest {
  int64 EntityId = 71;
}

// MessageId: 21200 (Response)
message TurntableCompleteResponse {
  ErrorCode ErrorCode = 117;
  int64 EntityId = 207;
}

message TutorialInfo {
  int32 Id = 1;
  uint32 CreateTime = 2;
  bool GetAward = 3;
}

// MessageId: 15334 (Request)
message TutorialInfoRequest {
}

// MessageId: 27499 (Response)
message TutorialInfoResponse {
  repeated TutorialInfo UnlockList = 76;
}

// MessageId: 23586 (Notify)
message TutorialUnlockNotify {
  repeated TutorialInfo UnlockList = 154;
}

// MessageId: 29499 (Request)
message TutorialReceiveRequest {
  int32 Id = 79;
}

// MessageId: 15187 (Response)
message TutorialReceiveResponse {
  ErrorCode ErrorCode = 125;
  repeated string ErrorParams = 63;
  map<int32, int32> ItemMap = 145;
}

// MessageId: 26607 (Request)
message TutorialUnlockRequest {
  int32 Id = 11;
}

// MessageId: 28299 (Response)
message TutorialUnlockResponse {
  ErrorCode ErrorCode = 35;
  repeated string ErrorParams = 45;
  TutorialInfo UnLockInfo = 162;
}

message OneWeaponItemInfo {
  int32 IncId = 1;
  int32 WeaponLevel = 2;
  int32 WeaponExp = 3;
  int32 WeaponBreach = 4;
  int32 WeaponResonLevel = 5;
  int32 RoleId = 6;
}

message WeaponConsumeItem {
  int32 IncId = 1;
  int32 Count = 2;
  int32 ItemId = 3;
}

// MessageId: 23811 (Request)
message WeaponLevelUpRequest {
  int32 IncId = 92;
  repeated WeaponConsumeItem ConsumeList = 24;
}

// MessageId: 25426 (Response)
message WeaponLevelUpResponse {
  ErrorCode ErrorCode = 81;
  int32 IncId = 123;
  int32 WeaponLevel = 250;
  int32 WeaponExp = 44;
  map<int32, int32> ItemMap = 106;
}

// MessageId: 27282 (Request)
message WeaponBreachRequest {
  int32 IncId = 248;
}

// MessageId: 24522 (Response)
message WeaponBreachResponse {
  ErrorCode ErrorCode = 31;
  int32 IncId = 112;
  int32 WeaponBreach = 67;
}

// MessageId: 28689 (Request)
message WeaponResonUpRequest {
  int32 IncId = 249;
  repeated int32 ConsumeList = 47;
  repeated WeaponConsumeItem ConsumeItemList = 248;
}

// MessageId: 19745 (Response)
message WeaponResonUpResponse {
  ErrorCode ErrorCode = 83;
  int32 IncId = 15;
  int32 ResonLevel = 49;
}

// MessageId: 28666 (Notify)
message WeaponAllInfoNotify {
  repeated OneWeaponItemInfo AllWeapon = 129;
}

// MessageId: 21014 (Notify)
message WeaponAddNotify {
  OneWeaponItemInfo WeaponInfo = 117;
}

// MessageId: 19970 (Notify)
message WeaponRemoveNotify {
  int32 IncId = 207;
}

// MessageId: 20229 (Request)
message WorldLevelDownRequest {
}

// MessageId: 28147 (Response)
message WorldLevelDownResponse {
  ErrorCode ErrorCode = 72;
  int32 OriginWorldLevel = 196;
  int32 CurWorldLevel = 167;
  int32 WorldLevelTimeStamp = 192;
}

// MessageId: 24603 (Request)
message WorldLevelRegainRequest {
}

// MessageId: 20652 (Response)
message WorldLevelRegainResponse {
  ErrorCode ErrorCode = 233;
  int32 OriginWorldLevel = 172;
  int32 CurWorldLevel = 10;
  int32 WorldLevelTimeStamp = 105;
}

enum WorldEnterPermission {
  WorldEnterPermission_ConfirmJoin = 0;
  WorldEnterPermission_DirectJoin = 1;
  WorldEnterPermission_ForbidJoin = 2;
  WorldEnterPermission_OnlyFriendJoin = 3;
}

enum WorldEnterWay {
  WorldEnterWay_LobbyJoin = 0;
  WorldEnterWay_QueryJoin = 1;
}

enum AgreeJoinWay {
  AgreeJoinWay_ClientActive = 0;
  AgreeJoinWay_ClientTimeOut = 1;
}

// MessageId: 25671 (Request)
message WorldEnterPermissionsRequest {
  int32 Type = 81;
}

// MessageId: 27427 (Response)
message WorldEnterPermissionsResponse {
  ErrorCode ErrorCode = 185;
  int32 Type = 169;
}

// MessageId: 17918 (Request)
message ApplyJoinWorldRequest {
  int32 PlayerId = 193;
  int32 Ways = 117;
}

// MessageId: 16227 (Response)
message ApplyJoinWorldResponse {
  ErrorCode ErrorCode = 208;
  repeated string ErrorParams = 216;
}

// MessageId: 26384 (Notify)
message ApplyJoinWorldNotify {
  int32 PlayerId = 179;
  int64 RefuseTimestamp = 178;
  string PlayerName = 12;
  int32 HeadId = 232;
  int32 Level = 29;
  string PsnUserId = 14;
  string PsnOnlineId = 123;
  string PsnAccountId = 158;
}

// MessageId: 25135 (Request)
message AgreeJoinResultRequest {
  int32 PlayerId = 149;
  bool Result = 51;
  int32 Way = 219;
}

// MessageId: 17704 (Response)
message AgreeJoinResultResponse {
  ErrorCode ErrorCode = 176;
  string PlayerName = 139;
}

// MessageId: 19819 (Notify)
message AgreeJoinResultNotify {
  ErrorCode ErrorCode = 149;
  string PlayerName = 14;
}

// MessageId: 29805 (Notify)
message ApplyerEnterSceneNotify {
  ErrorCode ErrorCode = 6;
  int32 PlayerId = 100;
}

// MessageId: 21864 (Notify)
message AllApplyJoinNotify {
  repeated ApplyJoinWorldNotify ApplyList = 222;
}

// MessageId: 21035 (Request)
message LobbyListRequest {
  bool IsFriend = 227;
}

// MessageId: 22735 (Response)
message LobbyListResponse {
  ErrorCode ErrorCode = 28;
  repeated PlayerDetails ItemList = 92;
}

// MessageId: 26491 (Request)
message LobbyQueryPlayersRequest {
  int32 PlayerId = 43;
}

// MessageId: 18018 (Response)
message LobbyQueryPlayersResponse {
  ErrorCode ErrorCode = 70;
  PlayerDetails Item = 198;
}

message WorldTeamPlayerInfo {
  int32 PlayerId = 1;
  string PlayerName = 2;
  int32 HeadId = 3;
  int32 Level = 4;
  string Signature = 5;
  WorldTeamPlayerFightInfo FightInfo = 6;
  int32 PingState = 7;
  PlayerDetails Item = 8;
}

enum WorldTeamLeaveReason {
  WorldTeamLeaveReason_Initiative = 0;
  WorldTeamLeaveReason_BeKick = 1;
  WorldTeamLeaveReason_Dissolve = 2;
  WorldTeamLeaveReason_Logout = 3;
  WorldTeamLeaveReason_ToOwnBigWorld = 4;
  WorldTeamLeaveReason_PSNAccountLogin = 5;
}

enum i7s {
  i7s_H8n = 0;
  i7s_Head = 1;
  i7s_F6n = 2;
  i7s_zVn = 3;
}

enum ENetPingState {
  ENetPingState_UNKNOWN = 0;
  ENetPingState_GREAT = 1;
  ENetPingState_GOOD = 2;
  ENetPingState_POOR = 3;
  ENetPingState_MAX = 4;
}

enum EPlayerTeleportState {
  EPlayerTeleportState_Default = 0;
  EPlayerTeleportState_Teleporting = 1;
  EPlayerTeleportState_TeleportTimeOut = 2;
}

// MessageId: 25164 (Notify)
message WorldTeamPlayerInfoChangeNotify {
  int32 PlayerId = 32;
  int32 ChangeType = 118;
  int32 IntValue = 166;
  string StringValue = 193;
}

// MessageId: 22533 (Notify)
message JoinWorldTeamNotify {
  int32 OwnerId = 51;
  repeated WorldTeamPlayerInfo PlayerInfos = 208;
}

// MessageId: 21065 (Notify)
message PlayerLeaveWorldTeamNotify {
  int32 PlayerId = 241;
  int32 Reason = 69;
}

// MessageId: 28924 (Notify)
message PlayerEnterWorldTeamNotify {
  WorldTeamPlayerInfo PlayerInfo = 133;
}

// MessageId: 26083 (Request)
message LeaveWorldTeamRequest {
  int32 PlayerId = 91;
}

// MessageId: 21512 (Response)
message LeaveWorldTeamResponse {
  ErrorCode ErrorCode = 52;
}

// MessageId: 27187 (Request)
message KickWorldTeamRequest {
  int32 PlayerId = 175;
}

// MessageId: 26034 (Response)
message KickWorldTeamResponse {
  ErrorCode ErrorCode = 165;
}

// MessageId: 21379 (Push)
message RobotDestinationPush {
  Vector Location = 213;
}

// MessageId: 28915 (Notify)
message RobotDestinationNotify {
  Vector Location = 76;
}

message WorldTeamRoleInfo {
  int32 roleId = 1;
  int32 RoleLevel = 2;
}

message WorldTeamPlayerFightInfo {
  int32 CurRoleId = 2;
  repeated WorldTeamRoleInfo RoleInfos = 3;
}

// MessageId: 15574 (Notify)
message UpdateWorldTeamPlayerFightInfoNotify {
  int32 PlayerId = 141;
  WorldTeamPlayerFightInfo FightInfo = 124;
}

// MessageId: 21461 (Push)
message PlayerNetStatePush {
  int32 W7n = 174;
}

// MessageId: 26600 (Notify)
message PlayerNetStateNotify {
  int32 PlayerId = 203;
  int32 PingState = 181;
}

// MessageId: 22876 (Notify)
message PlayerTeleportStateNotify {
  int32 PlayerId = 28;
  int32 TeleportState = 102;
  EntitySimplyMoveInfo CurRolePosInfo = 188;
}